'use strict';

(function(){
	window.clinicalSmartAlerts = window.clinicalSmartAlerts || {};
	var _NS = clinicalSmartAlerts;
		
	_NS.CardComponent = function(store, element, alertsLoader, clearAlertCardCallback) {
		this.smartAlertSaveActionVOFactory = _NS.SmartAlertSaveActionVOFactory;

		_NS.StatefulComponent.call(this, { store:store, selector: element.id });
		this.element = element;
		this._alertsLoader = alertsLoader;
		this._clearAlertCardCallback = clearAlertCardCallback;
		this._flipElement = $(this.element).find(".flipcard");
		this._graphElement = $(this.element).find(".trendgraph");
		this._tableElement = $(this.element).find(".js-alert-details-table");
		this._checkboxToggles = $(this.element).find('.js-card-expander .c-custom-checkbox').closest('.js-show-hide');
		this._disabled = false;
		this._graphData = undefined;
		this._GRAPH_LOADER = 'js-graph-loader c-loader c-loader--center';
		
		if (_NS.moduleProps.canAddPN && _NS.moduleProps.isESignatureForPNEnabled) {
			this._eSignatureCarousel = new _NS.Carousel(this.element.querySelector('.js-carousel-esignature'));
		}

		this._initHandlers();
		if (_NS.Cards) {
			_NS.Cards.set(this.element.id, this);
		}

		this._toggleSaveCancelButtons(false);
	};

	_NS.CardComponent.prototype = Object.create(_NS.StatefulComponent.prototype);
	_NS.CardComponent.prototype.constructor = _NS.CardComponent;
	
	_NS.CardComponent.prototype._setupProgressNote = function(data) {
		var element = $(this.element);
		var alertText = (element.data('alertType')=='CLINICAL')?element.data('alertDescription'):element.data('wvPnDescription');
		var buttonsInvisible = parseInt(element.attr('data-pn-id')) > 0;
		var interactiveSection = element.find('.js-pn-interactive-section');
		for (var i=0;i<data.length;i++) {
			var elem = data[i];
			var text = (elem.text1)?elem.text1:(i>0)?'':alertText;
			interactiveSection.append('<span><small>' + elem.description + '</small></span>');
			if (data.length>1) {
				interactiveSection.append('<textarea class=".u-mt-16 u-mb-16 u-mw" rows="3"' + (buttonsInvisible === true ? 'readonly':'') + '>' + text + '</textarea>');
			} else {
				interactiveSection.append('<textarea class=".u-mt-16 u-mb-16 u-mw" rows="5"' + (buttonsInvisible === true ? 'readonly':'') + '>' + text + '</textarea>');
			}
		}

		
		if (buttonsInvisible === false) {
			if (data && data.length > 0) {
				element.find('textarea')[0].focus();
			}
		}
	};
    
	_NS.CardComponent.prototype._performMultiSave = function(clickedButton) {
		var _self = this;
		var element = $(_self.element);
		var alertType;
		var wvType;

		var smartAlertSaveActionVOs = [];
		for(var i = 0; i < _self._checkboxToggles.length; i++) {
			var checkbox = $(_self._checkboxToggles[i]);
			if(checkbox.hasClass('c-show-hide--is-active')) {
				if(checkbox.hasClass('js-assessment-create-wrapper')) {
					smartAlertSaveActionVOs.push(_self.smartAlertSaveActionVOFactory.buildSmartAlertSaveActionVO.call(_self, 'CREATE_EINTERACT_ASSESSMENT'));
				} else if(checkbox.hasClass('js-create-pn-wrapper')) {
					var progressNoteSaveActionVO = _self.smartAlertSaveActionVOFactory.buildSmartAlertSaveActionVO.call(_self, 'CREATE_PROGRESS_NOTE');
					smartAlertSaveActionVOs.push(progressNoteSaveActionVO);
					alertType = progressNoteSaveActionVO.alerts.type;
					wvType = progressNoteSaveActionVO.progressNote.wvType;
				}
			}
		}

		$.ajax({
			url: '/clinical/alerts/smart/saveActions.xhtml',
			data: JSON.stringify(smartAlertSaveActionVOs),
			dataType: 'json',
			type: 'POST',
			contentType: 'application/json',
			success: function(data, textStatus, jqXHR) {
				for(var i = 0; i < data.length; i++) {
					if(data[i].createProgressNote != null) {
						var pnId = data[i].createProgressNote.pnId;
						if(pnId) {
							_self._resetPN();
							if(_NS.moduleProps.isESignatureForPNEnabled) {

								_self._eSignatureCarousel.previous(function(){
									$(':focus').blur();
									element
									.find('.js-input-esignature-password').removeClass('has-error').val('');
								});
								_self._resetFormStatusMessage('.js-esignature-form-status-msg');
							}
							element.find('.js-create-pn-wrapper').removeClass('c-show-hide--is-active');
							if (element.data('clearAlertPermission') === true) {
								_self._clearFromUI();
							} else {
								var pnJSON = _self._getPnStructureFromCache(alertType, wvType, pnId);
								if (pnJSON) {
									var json = JSON.parse(pnJSON);
									json.forEach(function(pn) {pn.pnId=pnId;});
									_self._putPnStructureInCache(alertType, wvType, pnId, JSON.stringify(json));
								}
								else {
									$.getJSON('/clinical/alerts/smart/getpnsectiontext.xhtml', {
										alertType: alertType,
										wvType: wvType,
										pnId: pnId
									})
									.success(function(data) {
										if (data && data.length >0) {
											_self._putPnStructureInCache(alertType, wvType, data[i].pnId, JSON.stringify(data));
										}
									}.bind(this));
								}
								_self._updateCard(pnId);
							}
							_self._enableInputsAndButtons(clickedButton);

							_self.store.dispatch({
								type: 'CREATE_PROGRESS_NOTE_COMPLETE',
								payload: {
									id: element.data('alertId'),
									type: element.data('alertType')
								}
							});
						}
						else {
							_self._createPNFailCallback();
						}
						
					} else if(data[i].createEInteractAssessment != null) {
						var assessId = data[i].createEInteractAssessment.assessId;

						_self._enableInputsAndButtons(clickedButton);
						// close checkbox and disable
						element.find('.js-assessment-create-wrapper').removeClass('c-show-hide--is-active');
						if (assessId) {
							$(element.find('label.assessment-create.c-custom-checkbox'))
								.removeClass('c-custom-checkbox')
								.addClass('c-custom-checkbox__disabled')
								.find('input').prop('disabled', true);
								element.data('assessmentLinked', true);
						}
					}
				}
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					_self._createPNFailCallback();
				}
		});
	};

	_NS.CardComponent.prototype._createPNFailCallback = function() {
		var _self = this;
		var element = $(_self.element);

		//clean cache and show message
		var alertType = element.data('alertType');
		var wvType = element.data('vitalType');
		var pnId = element.attr('data-pn-id');
		_self._removePnStructureFromCache(alertType, wvType, pnId);
		alert('Failed to save Progress Notes. Click "OK" to refresh and try again.');
		_self.store.dispatch({
			type: 'CREATE_PROGRESS_NOTE_COMPLETE',
			payload: {
				id: element.data('alertId'),
				type: element.data('alertType')
			}
		});
		_self._enableInputsAndButtons(clickedButton);
		location.reload();
	};
	
	_NS.CardComponent.prototype._clearAlert = function(alertId, groupedAlertIds, alertType, module) {
		var _self = this;
		$.post('/clinical/alerts/smart/clearalert.xhtml', {
			alertId: alertId,
			alertType : alertType,
			groupedAlertIds : groupedAlertIds || '',
			module : module
			})
		.success(function(data, textStatus, jqXhr){
			_self._clearFromUI();
			_self.store.dispatch({
				type: 'CLEAR_COMPLETE',
				payload: {
					id: alertId,
					type: alertType,
				}
			});
		})
		.fail(function(data, textStatus, jqXhr) {
			//Todo: figure out what to do for failing situation
			_self.store.dispatch({
				type: 'CLEAR_COMPLETE',
				payload: {
					id: alertId,
					type: alertType,
				}
			});
		});
	};
    
	_NS.CardComponent.prototype._getPnKey = function(alertType, wvType, pnId) {
		return _NS.AppStorage.PN_PREFIX + alertType + '#' + wvType + '#' + pnId;
	}

	_NS.CardComponent.prototype._putPnStructureInCache = function(alertType, wvType, pnId, data) {
		return _NS.AppStorage.set(this._getPnKey(alertType, wvType, pnId), data);
	};

	_NS.CardComponent.prototype._getPnStructureFromCache = function(alertType, wvType, pnId) {
		return _NS.AppStorage.get(this._getPnKey(alertType, wvType, pnId));
	};

	_NS.CardComponent.prototype._removePnStructureFromCache = function(alertType, wvType, pnId) {
		return _NS.AppStorage.remove(this._getPnKey(alertType, wvType, pnId));
	};
	
	_NS.CardComponent.prototype._initHandlers = function() {
		var _self = this;
		
		if (_NS.moduleProps.canAddPN) {
			var element = $(_self.element);
			element
				.on('click.signPN', '.js-button-save-interactive-suggestions', function(e) {

					var pnCheckboxActive = false;
					for(var i = 0; i < _self._checkboxToggles.length; i++) {
						var checkbox = $(_self._checkboxToggles[i]);
						if(checkbox.hasClass('c-show-hide--is-active')) {
							if(checkbox.hasClass('js-create-pn-wrapper')) {
								pnCheckboxActive = true;
							}
							else if(checkbox.hasClass('js-assessment-create-wrapper')) {
								if(!_self._validateEffectiveDate()) {
									return;
								}
							}
						}
					}
					
					_self._disableInputsAndButtons(this);
					if (_NS.moduleProps.isESignatureForPNEnabled && pnCheckboxActive) {
						_self._eSignatureCarousel.next(function() {
							$(':focus').blur();
							$(_self.element).find('.js-input-esignature-password').focus();
						});
						_self._enableInputsAndButtons(this);
					} else {
						_self._performMultiSave(this);
					}
					_self._recordSuggestionsEvent(element, 'Save Progress Note or Create CIC Assessment');
				})
				.on('click.cancelPN', '.js-button-cancel-interactive-suggestions', function(e) {
					_self._resetPN();
					_self._resetAssessment();
					element.find('.js-create-pn-wrapper').removeClass('c-show-hide--is-active');
					element.find('.js-assessment-create-wrapper').removeClass('c-show-hide--is-active');
					_self._toggleSaveCancelButtons(false);
					_self._recordSuggestionsEvent(element, 'Cancel Progress Note or CIC Assessment');
				})
				.on('click','.smart-alert-card-link,input[type=checkbox], .c-card-expander, .c-more-less__btn, .flipcard-chevron-container' , function(e) {
					// Save this as the "scrolled alert" when clicking link so we will keep the alert in view
					// Trick the code into thinking it is the same tab by setting 
					// the appropriate tab type
					var clientId = element.data('clientId');
					var tabType = 'client';
					if (_NS.AppStorage.get(_NS.AppStorage.FORCE_ALL) === clientId)
						tabType = 'all';
					_self.store.dispatch({
						type: 'SAVE_SCROLLED_TO_ALERT',
						payload: {
							alertId: element.data('alertId'),
							alertType: element.data('alertType'),
							clientId: element.data('clientId'),
							createdTimestamp: element.data('createdTimestamp'),
							tabType : tabType,
						}
					});

					if($(this).hasClass('smart-alert-card-link')) {
						_self._recordSuggestionsEvent(element, this.text);
					}
				})
				.on('change.createPN', '.js-checkbox-create-pn', function(e) {
					if($(this).prop('checked')) {
						var alertType = element.data('alertType');
						var wvType = element.data('vitalType');
						var pnId = element.attr('data-pn-id');
						var pnJSON = _self._getPnStructureFromCache(alertType, wvType, pnId);
						if (pnJSON) {
							_self._setupProgressNote(JSON.parse(pnJSON));
						} else {
							$.getJSON('/clinical/alerts/smart/getpnsectiontext.xhtml', {
								alertType: alertType,
								wvType: wvType,
								pnId: pnId
							})
							.success(function(data) {
								_self._setupProgressNote(data);
								_self._putPnStructureInCache(alertType, wvType, pnId, JSON.stringify(data));
							}.bind(this));
						}
						_self._recordSuggestionsEvent(element, 'Add Progress Note');
					} else {
						_self._resetPN();	
					}
				});
		}
		
		if (_NS.moduleProps.canAddPN && _NS.moduleProps.isESignatureForPNEnabled) {
			var element = $(_self.element);
			element
				.on('click.signESign', '.js-button-sign-esignature', function(e) {
					for(var i = 0; i < _self._checkboxToggles.length; i++) {
						var checkbox = $(_self._checkboxToggles[i]);
						if(checkbox.hasClass('c-show-hide--is-active')) {
							if(checkbox.hasClass('js-assessment-create-wrapper')) {
								if(!_self._validateEffectiveDate()) {
									return;
								}
							}
						}
					}

					var passwordInput = $(_self.element).find('.js-input-esignature-password');
					_self._resetFormStatusMessage('.js-esignature-form-status-msg');
					_self._disableInputsAndButtons(this);
					if(_self._validateInput(passwordInput, true)) {
						$.post('/clinical/alerts/smart/verifyelectronicsignature.xhtml', {
							token: passwordInput.val()
						})
						.success(function(data, textStatus, jqXhr) {
							_self._performMultiSave(this);
						})
						.fail(function(jqXhr, textStatus, error) {
							_self._inputShowError(passwordInput);
							_self._setFormStatusMessage('.js-esignature-form-status-msg', jqXhr.responseText, true);

							_self._enableInputsAndButtons(this);
						}.bind(this));
					} else {
						_self._enableInputsAndButtons(this);
					}
				})
				.on('click.cancelESign', '.js-button-cancel-esignature', function(e) {
					_self._eSignatureCarousel.previous(function() {
						$(':focus').blur();
						element
							.find('.js-input-esignature-password').removeClass('has-error').val('');
					});
					_self._resetFormStatusMessage('.js-esignature-form-status-msg');
				})
				.on('keypress.keyPressESign', '.js-esignature-form', function(e){
					if (e.which === 13) {
						element.find('.js-button-sign-esignature').trigger('click.signESign');
						e.preventDefault();
					}
				});
		}

		if (_NS.moduleProps.canAssessAlerts && _NS.moduleProps.isCICOnline) {
			var element = $(_self.element);
			$(element)
			.on('change.setupAssess', '.js-checkbox-create-assessment', function(e) {
				var element = $(_self.element);
				var dateField = element.find('input.pccDateField');
				// initialize date picker
				var hiddenInput = element.find('input[name="effective_date"]');
				var curDate = new Date();
				hiddenInput.attr('value', (curDate.getMonth() + 1) + '/' + curDate.getDate() + '/' + curDate.getFullYear());
				dateField.attr('value', (curDate.getMonth()) + 1 + '/' + curDate.getDate() + '/' + curDate.getFullYear());
				element.find('select[name=hour]').val(curDate.getHours());
				element.find('select[name=min]').val(curDate.getMinutes());

				element.find('button').prop('disabled', true);

				if(!dateField.hasClass('hasDatepicker')) {
					dateField.dateField();
					$.getJSON('/clinical/alerts/smart/getCICReasons.xhtml', {
						alertType : element.data('alertType'),
						alertIds : element.data('groupedAlertIds')
					})
					.success(function(data, textStatus, jqXhr) {
						if(data.stopWatchAlertDesc != null && data.stopWatchAlertDesc.length != 0) {
							element.data('stopAndWatchAlertDescs', data.stopWatchAlertDesc);
							var SWspan = element.find('.alert-SW-conds');
							SWspan.after(' ' + data.stopWatchAlertDesc.join('; '));
						}

						// the multi-select uses the chosen library (https://github.com/harvesthq/chosen)
						var select = element.find('.chzn-select');
						for(var i in data.reasons) {
							var option = document.createElement('option');
							option.setAttribute('value', data.reasons[i].item_value);
							option.textContent = data.reasons[i].item_description;

							if(data.alertReasonIds.indexOf(data.reasons[i].item_value) >= 0) {
								option.setAttribute('selected', 'selected');
							}
							select.append(option);
						}

						_self._toggleOtherChangeinConditionTextBox();

						/* show multi-select after data is loaded
							unhiding must happen before chosen is called because jquery can't find element width
							when it's hidden */
						element.find(".c-einteract-assessment__hidden").removeClass("c-einteract-assessment__hidden");
						// initialize multi-select with 'chosen' library
						$(select).chosen();

						element.find('button').prop('disabled', false);
					})
					.fail(function(jqXhr, textStatus, error) {
						element.find('button').prop('disabled', false);
					}.bind(this));
				}
			})
			.on('change.toggle"OtherChangeInCondition"textbox', ".chzn-select", function(e) {
				_self._toggleOtherChangeinConditionTextBox();
			})
		}
		
		$(this.element)
			.on('click.clearAlert', '.js-alert-card-clear', function(e) {
				var element = $(_self.element);
				if(_self.store.getState().isLoading) return;
				_self._clearAlert(
						element.data('alertId'),
						element.data('groupedAlertIds'),
						element.data('alertType'),
						element.data('module')
				);				
				_self._recordCardEvent(element,'Clear');
			})
			.on('click.saveCardExpanderStatus', '.js-card-expander-toggle', function(e) {
				var element = $(_self.element);
				setTimeout(function(){
					if ($(this).closest('.js-show-hide').hasClass('c-show-hide--is-active')) {
						_self.store.dispatch({
							type: 'SAVE_ACTIVE_ALERT',
							payload: {
								alertId: element.data('alertId'),
								alertType: element.data('alertType'),
								isCardExpanded: true
							}
						});	
					} else {
						_self.store.dispatch({ 
							type: 'CLEAR_ACTIVE_ALERT',
							payload: {
								alertId: element.data('alertId'),
								alertType: element.data('alertType')
							}
						});	
					}
				}.bind(this), 10);
				_self._recordCardEvent(element,'Expand');
			})
			.on('click.saveAlertDetailsExpanderStatus', '.js-alert-details-expander-toggle', function(e) {
				var element = $(_self.element);
				setTimeout(function(){
					if ($(this).closest('.js-show-hide').hasClass('c-show-hide--is-active')) {
						_self.store.dispatch({
							type: 'SAVE_ACTIVE_ALERT',
							payload: {
								alertId: element.data('alertId'),
								alertType: element.data('alertType'),
								isCardExpanded: true,
								isDetailsExpanded: true,
								isGraphShown: true // meaning chart is shown
							}
						});
						if (!_self._graphData) {
							_self._loadGraph();
						}
					} else {
						_self.store.dispatch({
							type: 'SAVE_ACTIVE_ALERT',
							payload: {
								alertId: element.data('alertId'),
								alertType: element.data('alertType'),
								isCardExpanded: true,
								isDetailsExpanded: false,
								isGraphShown : true
							}
						});
						_self.selectFlipCard(true);
						_self.store.dispatch({ type: 'LOAD_ALERT_GRAPH_COMPLETE'});
					}
				}.bind(this), 10);
				_self._recordCardEvent(element,'Alert Details');
			})
			.on('click.flipCard', '.flipcard-chevron-container', function() {
				var element = $(_self.element);
				var isGraphShown = element.find('.flipcard-side-front').hasClass('flipcard-is-active');
				_self._flipCards();
				setTimeout(function(){
					_self.store.dispatch({
						type: 'SAVE_ACTIVE_ALERT',
						payload: {
							alertId: element.data('alertId'),
							alertType: element.data('alertType'),
							isCardExpanded: true,
							isDetailsExpanded: true,
							isGraphShown: !isGraphShown
						}
					});
					if (!_self._graphData) {
						_self._loadGraph();
					}
				}.bind(this), 10);
				_self._recordCardEvent(element,'Alert List View');
				return false;
			})
			.on('click.toggleSaveCancelButtons', 'label.c-custom-checkbox', function(e) {
				var show = false;
				for(var i = 0; i < _self._checkboxToggles.length; i++) {
					if(
						($(_self._checkboxToggles[i]).hasClass('c-show-hide--is-active') && $(e.target).closest('.js-show-hide')[0] != _self._checkboxToggles[i]) ||
						(!$(_self._checkboxToggles[i]).hasClass('c-show-hide--is-active') && $(e.target).closest('.js-show-hide')[0] == _self._checkboxToggles[i])
					) {
						show = true;
						break;
					}
				}

				_self._toggleSaveCancelButtons(show);
			});
	};

	_NS.CardComponent.prototype._toggleOtherChangeinConditionTextBox = function() {
		var select = $(this.element).find('.chzn-select');
		if(select.val() != null && select.val().indexOf(_NS.moduleProps.cicOtherCICReasonId) >= 0) {
			$(this.element).find('.c-cic-other-symptoms').removeClass('u-hidden');
		}
		else {
			$(this.element).find('.c-cic-other-symptoms').addClass('u-hidden');
		}
	}

	_NS.CardComponent.prototype._toggleSaveCancelButtons = function(show) {
		var element = $(this.element);
		if(show) {
			element.find('.js-button-save-interactive-suggestions').show();
			element.find('.js-button-cancel-interactive-suggestions').show();
		}
		else {
			element.find('.js-button-save-interactive-suggestions').hide();
			element.find('.js-button-cancel-interactive-suggestions').hide();
		}
	}
	
	_NS.CardComponent.prototype._recordEvent = function(e, category, action) {
		var cardCat = e.find(".c-card__type").text();
		_NS.sendEventIfEnabled(category, action, cardCat);
	};

	_NS.CardComponent.prototype._recordCardEvent = function(e, action) {
		this._recordEvent(e,'Card', action);
	};

	_NS.CardComponent.prototype._recordSuggestionsEvent = function(e, action) {
		this._recordEvent(e,'Suggestions', action);
	};

	_NS.CardComponent.prototype._inputHasError = function(target) {
		if (!$(target).val().trim()) return true;
	};
	
	_NS.CardComponent.prototype._inputShowError = function(target) {
		$(target).addClass('has-error');
	};
	
	_NS.CardComponent.prototype._inputRemoveError = function(target) {
		$(target).removeClass('has-error');
	};

	_NS.CardComponent.prototype._validateEffectiveDate = function() {
		var _self = this;
		var element = $(_self.element);
		// Assessment effective date can't be in the future
		if(_self.parseDate(_self._getEffectiveDate()) > Date.now()) {
			element.find('.js-effective-date-error').removeClass('u-hidden');
			return false;
		}
		else {
			element.find('.js-effective-date-error').addClass('u-hidden');
			return true;
		}
	}

	_NS.CardComponent.prototype.parseDate = function(effectiveDate) {
		var effectiveDateArr = effectiveDate.split(' ');
		var _date = effectiveDateArr[0];
		var _time = effectiveDateArr[1];
		var dateArr = _date.split('/');
		var timeArr = _time.split(':');

		var assessDate = new Date();
		assessDate.setMonth(dateArr[0] - 1, dateArr[1]);
		assessDate.setFullYear(dateArr[2]);
		assessDate.setHours(timeArr[0]);
		assessDate.setMinutes(timeArr[1]);
		assessDate.setSeconds(0);
		assessDate.setMilliseconds(0);

		return assessDate;
	}

	_NS.CardComponent.prototype._getEffectiveDate = function() {
			var element = $(this.element);
      var id = element.data('alertId');
      var datePicker = element.find('#qtf-effective-date-' + id);
  
      var date = datePicker.attr('value');
      if(date[1] === '/') {
        date = '0' + date;
      }
      date += ' ' + element.find('#qtf-effective-hour-' + id).find(':selected').text();
			date += ':' + element.find('#qtf-effective-minute-' + id).find(':selected').text();
			
			return date;
	}
	
	_NS.CardComponent.prototype._validateInput = function(jqInput, doFocus) {
		var doFocus = typeof doFocus === 'undefined' ? false : true;
		if (this._inputHasError(jqInput)) {
			this._inputShowError(jqInput);
			if(doFocus) jqInput.focus();
			return false;
		}
		this._inputRemoveError(jqInput);
		return true;
	}
	
	_NS.CardComponent.prototype._resetPN = function() {
		var div = $(this.element).find('div.js-pn-interactive-section');
		div.find('span').remove();
		div.find('textarea').remove();
		$(this.element)
			.find('.js-checkbox-create-pn')
				.prop('checked', false)
			.end();
	}

	_NS.CardComponent.prototype._resetAssessment = function() {
		var _self = this;
		var element = $(_self.element);
		if(element.data('assessmentLinked') === false) {
			element.find('.js-checkbox-create-assessment')
			.prop('checked', false)
			.end();
		}
	}
	
	_NS.CardComponent.prototype._clearFromUI = function(){
		var card = this.element,
			alertId = $(card).data('alertId'),
			alertType = $(card).data('alertType'),
			transitionEndEventName = _NS.Polyfill.tools.getTransitionEndEvent();
		
		if($(card).data('disabled')) return;
		
		$(card)
			.data('disabled', true)
			.addClass('u-transition-scale-down-bounce');
		
		this._transitionHeightToZero();
		
		if (!transitionEndEventName){
			if (_NS.Cards) {
				_NS.Cards.delete(this.element.id);
			}
			$(card).remove();
			this._clearAlertCardCallback(alertId, alertType);
			return;
		}
		
		$(card).one(transitionEndEventName, function(e){
			if (_NS.Cards) {
				_NS.Cards.delete(this.element.id);
			}
			$(card).remove();
			this._clearAlertCardCallback(alertId, alertType);
		}.bind(this));
	};
	
	_NS.CardComponent.prototype._transitionHeightToZero = function() {
		var sectionHeight = this.element.scrollHeight;
		
		var elementTransition = this.element.style.transition;
		this.element.style.transition = '';

		requestAnimationFrame(function() {
			this.element.style.height = sectionHeight + 'px';
			this.element.style.transition = elementTransition;
			
			requestAnimationFrame(function() {
				this.element.style.height = 0 + 'px';
			}.bind(this));
	    }.bind(this));
	};
	
	_NS.CardComponent.prototype.getAlertId = function() {
		return $(this.element).data('alertId');
	};
	
	_NS.CardComponent.prototype.getAlertType = function() {
		return $(this.element).data('alertType');
	};
	
	_NS.CardComponent.prototype.expandCard = function() {
		$(this.element).find('.js-card-expander').addClass('c-show-hide--is-active');
	};
	
	_NS.CardComponent.prototype.expandAlertDetails = function() {
		$(this.element).find('.js-alert-details-expander').addClass('c-show-hide--is-active');
		this._loadGraph();
	};
	
	_NS.CardComponent.prototype._setFormStatusMessage = function(selector, text, hasError) {
		var hasError = typeof hasError !== 'undefined' ? hasError : false;
		$(this.element).find(selector)
			.toggleClass('c-form__status-msg--has-error', hasError)
			.text(text);
	};
	
	_NS.CardComponent.prototype._resetFormStatusMessage = function(selector) {
		$(this.element).find(selector)
			.removeClass('c-form__status-msg--has-error')
			.empty();
	};
	
	_NS.CardComponent.prototype._updateCard = function(pnId) {
		var element = $(this.element);
		element.attr("data-pn-id", pnId);
		
		if (pnId == 0) {
			element.find('.pn-view').hide();
			element.find('.pn-create').css('display','block');
		} else {
			element.find('.pn-create').hide();
			element.find('.pn-view').css('display','block');
		}
		
		element.find('.js-checkbox-create-pn').prop('checked', false).end();
		element.find('.js-create-pn-wrapper').removeClass('c-show-hide--is-active');
	};
	
	_NS.CardComponent.prototype._disableInputsAndButtons = function(focusedElement) {
		this._disabled = true;
		$(this.element)
			.find('input').prop('disabled', true)
			.end()
			.find('textarea').prop('disabled', true)
			.end()
			.find('button').prop('disabled', true)
			.end()
			.find('select').prop('disabled', true)
			.end()
			.find('option').prop('disabled', true)
			.end()
			.find('.chzn-drop').hide()
			.end()
			.find('label.c-custom-checkbox')
			.removeClass('c-custom-checkbox')
			.addClass('c-custom-checkbox__disabled')
			.end();
		$(focusedElement).addClass('c-button--has-loader');
	};
	
	_NS.CardComponent.prototype._enableInputsAndButtons = function(focusedElement) {
		$(focusedElement).removeClass('c-button--has-loader');
		this._disabled = false;
		$(this.element)
			.find('input').prop('disabled', false)
			.end()
			.find('textarea').prop('disabled', false)
			.end()
			.find('button').prop('disabled', false)
			.end()
			.find('select').prop('disabled', false)
			.end()
			.find('option').prop('disabled', false)
			.end()
			.find('.chzn-drop').show()
			.end()
			.find('label.c-custom-checkbox__disabled')
			.removeClass('c-custom-checkbox__disabled')
			.addClass('c-custom-checkbox');
	};
	
	_NS.CardComponent.prototype.render = function() {}

	_NS.CardComponent.prototype._showGraphLoading = function() {
		this._flipElement.addClass(this._GRAPH_LOADER);
	}

	_NS.CardComponent.prototype._hideGraphLoading = function() {
		this._flipElement.removeClass(this._GRAPH_LOADER);
	}

	_NS.CardComponent.prototype._renderGraph = function(data) {
		this._graphData = data;
		var vitalType = $(this.element).data('vitalType'),
			chartOpts,
			baseLineOpts = [],
			localChartOpts = {},
			maxValue = -99999,
			minValue = 99999;

		if (vitalType >= 0 && vitalType < _NS.moduleProps.chartOpts.length) {
			localChartOpts = _NS.moduleProps.chartOpts[vitalType];
		}

		chartOpts = $.extend(true, {}, localChartOpts, _NS.moduleProps.defaultChartOpts);
		
		if (data.baseline) {
			baseLineOpts.push.apply(baseLineOpts, [{
			    value : data.baseline,
			    class: 'pccChartBaselineSystolic'}, 
				{ value : data.baseline, 
				text : vitalType === 3 ? _NS.moduleProps.termMap.systolicBaseline : _NS.moduleProps.termMap.baseline,
				position : 'start',
				class: 'pccChartBaselineSystolic',
			}]);
			maxValue = Math.max(maxValue, data.baseline);
			minValue = Math.min(minValue, data.baseline);
		}

		if (data.diastolicBaseline) { // Should only be true when vitalType === 3 (Blood Pressure)
			baseLineOpts.push.apply(baseLineOpts, [{
			    value : data.diastolicBaseline,
			    class: 'pccChartBaselineDiastolic'},
				{ value : data.diastolicBaseline,
				text : _NS.moduleProps.termMap.diastolicBaseline,
				position : 'start',
				class: 'pccChartBaselineDiastolic',
			}]);
			maxValue = Math.max(maxValue, data.diastolicBaseline);
			minValue = Math.min(minValue, data.diastolicBaseline);			
		}

		data.vitalList.forEach(function(elem) {
			chartOpts.data.columns[0].push(elem.value);
			maxValue = Math.max(maxValue, elem.value);
			minValue = Math.min(minValue, elem.value);
			if (vitalType === 3) {
				 // Blood pressure also has the dystolicValue
				chartOpts.data.columns[1].push(elem.diastolicValue);
				maxValue = Math.max(maxValue, elem.diastolicValue);
				minValue = Math.min(minValue, elem.diastolicValue);				
			}
		});

		chartOpts.axis.y = {
				min : minValue,
				max : maxValue,
		};

		if (!this._chart) {
			this._chart = this._graphElement.pccGenerateChart(chartOpts, _NS.moduleProps.termMap.trend, undefined, '');
			this._createTable(data, vitalType);
		}

		// Need to remove inline position style - it conflicts with the chart-flipping style
		$(this.element).find('.pccChartWrapper').css('position', '');

		this._chart.load({columns : chartOpts.data.columns});

		if (baseLineOpts.length > 0) {
			this._chart.ygrids(baseLineOpts);
		}

		// Wait until the chart gets fully rendered
		// to resize 
		var _self = this
		setTimeout(function() {
			_self._resizeChart();
		}, 500);
	};

	_NS.CardComponent.prototype._createTable = function(data, vitalType) {
		var tableOptions = _NS.moduleProps.chartOpts[vitalType].data;
		var tableBody = $(this.element).find('.js-alert-details-table').find('tbody');
		var tableHeaderRow = document.createElement('tr');

		tableHeaderRow.appendChild(document.createElement('th')); // Empty Header
		for(var i = 0; i < tableOptions.columns.length; i++) {
			var headerColumn = document.createElement('th');
			headerColumn.textContent = tableOptions.columns[i][0];
			tableHeaderRow.appendChild(headerColumn);
		}
		for(var i = 0; i < data.vitalList.length && i < _NS.moduleProps.maxVitalsInChart; i++) {
			var row = document.createElement('tr');
			var rowDate = document.createElement('td');
			var rowDateValue = new Date(data.vitalList[i].date);
			var minutes = (rowDateValue.getMinutes() < 10) ? '0' + rowDateValue.getMinutes() : rowDateValue.getMinutes();
			rowDate.textContent = _NS.moduleProps.months[rowDateValue.getMonth()] + ' ' + rowDateValue.getDate() + ' ' + rowDateValue.getHours() + ':' + minutes;
			row.appendChild(rowDate);

			for(var j = 0; j < tableOptions.columns.length; j++) {
				// Blood Pressure/Respiration/Pain Level is integer, everything else is float
				var rowVitalData = (_NS.moduleProps.chartOpts[vitalType].isInteger === true) ? parseInt(data.vitalList[i][tableOptions.columnKeys[j]], 10) : data.vitalList[i][tableOptions.columnKeys[j]];

				var tempColumn = document.createElement('td');

				if(data.vitalList[i].warning != null && 0 < data.vitalList[i].warning.length) {
					// Only show warning for diastolic values
					if(tableOptions.columnKeys[j] === _NS.moduleProps.chartOpts[vitalType].data.columnKeys[_NS.moduleProps.chartOpts[vitalType].data.columnKeys.length - 1]) {
						$(tempColumn).addClass('has-error');
						var warningImage = document.createElement('img');
						$(warningImage).attr('src', '/images/clinical/wv_warning.png');
						tempColumn.appendChild(warningImage);

						var warningLabel = document.createElement('div');
						warningLabel.textContent = rowVitalData;
						$(tempColumn).prepend(warningLabel);
					} else {
						tempColumn.textContent = rowVitalData;
					}
				} else {
					tempColumn.textContent = rowVitalData;
				}				
				row.appendChild(tempColumn);
			}
			
			if(i % 2 === 0) {
				$(row).addClass('highlighted-row');
			}
			tableBody.prepend(row);
		}
		tableBody.prepend(tableHeaderRow);
	}

	_NS.CardComponent.prototype._loadGraph = function() {
		var _self = this;
		var element = $(_self.element);
		var vitalType = element.data('vitalType');

		// vitalType of -1 indicates it's not vital alert
		if(vitalType >= 0) {
			element.find('.flipcard-container').removeClass('c-hidden');
			_self._showGraphLoading();
			// Cannot dispatch an event here because
			// We will cause an infinite loop when restore
			// alert status expanded state
			$.getJSON('/clinical/alerts/smart/getwvhistory.xhtml', {
				clientId : element.data('clientId'),
				wvType : vitalType
			})
			.done(function (data) {
				_self._hideGraphLoading();
				_self._renderGraph(data);
				_self.store.dispatch({ type: 'LOAD_ALERT_GRAPH_COMPLETE'});
			})
			.fail(function (data) {
				_self._hideGraphLoading();
				_self.store.dispatch({ type: 'LOAD_ALERT_GRAPH_COMPLETE'});
			});
		}
	};
	
	_NS.CardComponent.prototype._resizeChart = function() {
		this._chart.resize({ height: _NS.moduleProps.defaultChartOpts.size.height});
	}

	_NS.CardComponent.prototype._flipCards = function() {
		var _self = this;
		var container = $(this.element).find('.flipcard');
		var sides = container.find('.flipcard-side');
		var chartWrapper = $(this.element).find('.pccChartWrapper')
		var svg = chartWrapper.find('svg');

		container.toggleClass('flipcard-is-switched');

		window.setTimeout(function() {
			sides.toggleClass('flipcard-is-active');
			// Trigger the back-side of the card to not
			// display so the card doesn't show through on IE 11
			// I do it roughly 1/2 way through the rotation.
			sides.toggleClass('c-hidden');
		}, 200);

		window.setTimeout(function() {
			if (chartWrapper.width() > 0 && chartWrapper.width() !== svg.width()) {
				// IE doesn't compute the SVG chart width correctly and makes
				// it too big, overflowing the boundary. Force the width to its
				// parent. Make sure we check the size after the card has fully
				// animated into view.
				svg.width(chartWrapper.width());
				_self._resizeChart();
			}
		}, 501);
	}

	_NS.CardComponent.prototype.selectFlipCard = function(isFrontShown) {
		var container = $(this.element).find('.flipcard');
		var front = container.find('.flipcard-side-front');
		var back = container.find('.flipcard-side-back');
		var temp;

		if (isFrontShown === false) {
			// The code below makes the front card show
			// if we flip front and back then it will make the back show
			temp = front;
			front = back;
			back = temp;
		}

		front.removeClass('c-hidden');
		// Reset the cards to be showing the correct side
		if (isFrontShown === true)
			container.removeClass('flipcard-is-switched');
		else if (!container.hasClass('flipcard-is-switched'))
			container.addClass('flipcard-is-switched');

		if (!front.hasClass('flipcard-is-active'))
			front.addClass('flipcard-is-active')

		back.removeClass('flipcard-is-active');

		if (!back.hasClass('c-hidden'))
			back.addClass('c-hidden');
	}

	_NS.CardComponent.prototype.getChart = function() {
		return this._chart;
	}
}());