var COMSNamespace = COMSNamespace || {};
var ResidentHeader = ResidentHeader || {};
var COMS = COMS || {};
COMS.Controls = COMS.Controls || {};


//=======================================
// Card: 339 - Resident Search List 
var ResolveDate = function(o)
{
    return new Date((parseInt(o.substr(6))));
}

var ResidentSearchItemMap = function(i)
{
    self = this;
    self.Idx = ko.observable();
    self.FirstName = ko.observable();
    self.LastName = ko.observable();
    self.FullName = ko.computed(function () { return self.LastName() + ', ' + self.FirstName(); }, this);
    self.ResidentId = ko.observable();
    self.AdmissionType = ko.observable();
    self.ResidentIdx = ko.observable();
    self.SubUnit = ko.observable();
    self.Bed = ko.observable();
    self.Room = ko.observable();
    self.Physician = ko.observable();
    self.AbnormalCount = ko.observable();
    self.AlertCount = ko.observable();
    self.LastAssessment = ko.observable();
    self.AdmissionDate = ko.observable();
    self.DiseaseList = ko.observable();
    self.SearchCriteria = ko.computed(function () { return (self.FirstName() + self.LastName() + self.Physician() + self.SubUnit() + self.Room() + self.Bed()); }, this);
    self.RoomSort = ko.computed(function () { return self.SubUnit() + self.Room() + self.Bed(); });

    load = function () {

        var x = ko.mapping.fromJS(i);

        var tmpAssessmentDt = ResolveDate(ko.unwrap(x.LastAssessment));
        
        self.Idx(ko.unwrap(x.Idx));
        self.FirstName(ko.unwrap(x.FirstName));
        self.LastName(ko.unwrap(x.LastName));
        self.ResidentId(ko.unwrap(x.ResidentId));
        self.AdmissionType(ko.unwrap(x.AdmissionType));
        self.ResidentIdx(ko.unwrap(x.ResResident_Idx));
        self.SubUnit(ko.unwrap(x.SubUnit));
        self.Bed(ko.unwrap(x.BedName));
        self.Room(ko.unwrap(x.RoomName));
        self.Physician(ko.unwrap(x.PhysicianName).trim());
        self.AbnormalCount(ko.unwrap(x.AbnormalCount));
        self.AlertCount(ko.unwrap(x.AlertCount));
        self.DiseaseList(ko.unwrap(x.DiseaseList));
        if (tmpAssessmentDt.getFullYear() != 9999)
            self.LastAssessment(tmpAssessmentDt);
        else
            self.LastAssessment('');

        self.AdmissionDate(ko.unwrap(x.Admission_Date));
         
    }

    load();
}
//=======================================


COMS.Controls.ResidentListVM = COMS.Controls.ResidentListVM || function (ResidentList, FirstName, LastName) {
    var self = this;
    self.ResidentListVM = ResidentList;
    self.FirstName = FirstName;
    self.LastName = LastName;
    self.FilterValue = ko.observable('');
    self.selectedSortBy = ko.observable('');
    self.TotalResidents = ko.observable(0);
    self.CurrentPage = ko.observable(1);
    self.ShowLoadMoreResidents = ko.observable(true);
    self.operationInProgress = ko.observable(false);
    //=======================================
    // Card: 339 - Resident Search List 
    self.ResidentSearchListFiltered = ko.observableArray([]);
    self.ResidentSearchList = ko.observableArray([]);
    self.ResidentSearchFilter = ko.observable('');
    self.ShowResidentId = ko.observable();
    self.ShowAdmissionDate = ko.observable();
    self.ShowAbnormalCount = ko.observable();
    self.ShowLastEvalDate = ko.observable();
    //=======================================

    self.LoadResidentList = function () {
        self.operationInProgress(true);
        $('#inputsource').addClass('loadinggif');
        var searchModel = {
            SortBy: 0,
            Page: 1
        }
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/Residents',
            data: ko.toJSON(searchModel),
            success: function (model) {
                self.operationInProgress(false);
                var m = ko.mapping.fromJS(model.Residents);
                self.CurrentPage(1);   
                self.TotalResidents(model.TotalResidents);
                self.ResidentListVM(m());
                let allResidentsLoaded = (self.ResidentListVM().length == self.TotalResidents());
                self.ShowLoadMoreResidents(!allResidentsLoaded);
                $('#inputsource').removeClass('loadinggif');
            }
        });
        return false;
    };
    
    self.LoadMoreResidents = function () {
        self.CurrentPage(self.CurrentPage() + 1);
        self.operationInProgress(true);
        $('#inputsource').addClass('loadinggif');
        var searchModel = {
            SortBy: 0,
            Page: self.CurrentPage()
        }
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/Residents',
            data: ko.toJSON(searchModel),
            success: function (model) {
                self.operationInProgress(false);     
                var m = ko.mapping.fromJS(model.Residents);
                let residentArray = self.ResidentListVM();
                for (var i = 0, l = m().length; i < l; i++) {
                    residentArray.push(m()[i]);
                }
                self.TotalResidents(model.TotalResidents);
                self.ResidentListVM(residentArray());
                if (self.ResidentListVM().length == self.TotalResidents()) {
                    self.ShowLoadMoreResidents(false);
                }

                $('#inputsource').removeClass('loadinggif');
            }
        });
        return false;
    };


    //=======================================
    // Card: 339 - Resident Search List 

    self.LoadResidentSearchList = function () {
        $('#divResidentSearchList').addClass('loadinggif');
        $('#ddlResSearchListSort').val($('#ddlResSearchListSort option:first').val());
        self.ResidentSearchFilter('');
        self.ResidentSearchList([])
        self.ResidentSearchListFiltered([]);
                
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/GetSearchGetResidentSearchList',
            success: function (data, textStatus, jqXHR) {
                $.each(data, function () {
                    var res = new ResidentSearchItemMap(this);
                    self.ResidentSearchListFiltered.push(res);
                    self.ResidentSearchList.push(res);
                });
                $('#divResidentSearchList').removeClass('loadinggif');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                alert(errorThrown);
            }
        });
    }
    
    var prevSearchLen = 0;


    self.ResidentSearchFilter.subscribe(
        function () {
            var k = ko.unwrap(self.ResidentSearchFilter().toLowerCase());

            if (k.length == 0)
                self.ResidentSearchListFiltered(self.ResidentSearchList());
            else {
                if (k.length > prevSearchLen)
                    self.ResidentSearchListFiltered(ko.utils.arrayFilter(self.ResidentSearchList(), function (item) {
                        return (item.SearchCriteria().toLowerCase().indexOf(k) != -1);
                    }));
                else
                    self.ResidentSearchListFiltered(ko.utils.arrayFilter(self.ResidentSearchListFiltered(), function (item) {
                        return (item.SearchCriteria().toLowerCase().indexOf(k) != -1);
                    }));
            }
        });
    

    var prevSort = null;
    COMS.Controls.ResidentListVM.prototype.SortFiltered = function () {
        
        self.ShowAbnormalCount(false);
        self.ShowAdmissionDate(false);
        self.ShowLastEvalDate(false);
        self.ShowResidentId(false);

        var sortBy = $('#ddlResSearchListSort option:selected').text();

        if (sortBy == prevSort || sortBy == "Sort by")
            return;

        prevSort = sortBy;

        $('#divResidentSearchList').addClass('loadinggif');

        switch (sortBy)
        {
            case "A to Z":

                var tmpList = 
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.FullName().toUpperCase() == right.FullName().toUpperCase() ? 0 : (
                                    left.FullName().toUpperCase() < right.FullName().toUpperCase() ? -1 : 1));
                        });
                self.ResidentSearchList(tmpList);

                var tmpFiltered = self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.FullName().toUpperCase() == right.FullName().toUpperCase() ? 0 : (
                                    left.FullName().toUpperCase() < right.FullName().toUpperCase() ? -1 : 1));
                        });
                self.ResidentSearchListFiltered(tmpFiltered);
                break;
            case "Z to A":
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.FullName().toUpperCase() == right.FullName().toUpperCase() ? 0 : (
                                    left.FullName().toUpperCase() > right.FullName().toUpperCase() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.FullName().toUpperCase() == right.FullName().toUpperCase() ? 0 : (
                                    left.FullName().toUpperCase() > right.FullName().toUpperCase() ? -1 : 1));
                        }));
                break;
            case "Resident ID (Asc)":
                self.ShowResidentId(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.ResidentId().toUpperCase() == right.ResidentId().toUpperCase() ? 0 : (
                                    left.ResidentId().toUpperCase() < right.ResidentId().toUpperCase() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.ResidentId().toUpperCase() == right.ResidentId().toUpperCase() ? 0 : (
                                    left.ResidentId().toUpperCase() < right.ResidentId().toUpperCase() ? -1 : 1));
                        }));
                break;
            case "Resident ID (Desc)":
                self.ShowResidentId(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.ResidentId().toUpperCase() == right.ResidentId().toUpperCase() ? 0 : (
                                    left.ResidentId().toUpperCase() > right.ResidentId().toUpperCase() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.ResidentId().toUpperCase() == right.ResidentId().toUpperCase() ? 0 : (
                                    left.ResidentId().toUpperCase() > right.ResidentId().toUpperCase() ? -1 : 1));
                        }));
                break;
            case "# Abnormal Findings (Asc)":
                self.ShowAbnormalCount(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.AbnormalCount() == right.AbnormalCount() ? 0 : (
                                    left.AbnormalCount() < right.AbnormalCount() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.AbnormalCount() == right.AbnormalCount() ? 0 : (
                                    left.AbnormalCount() < right.AbnormalCount() ? -1 : 1));
                        }));
                break;
            case "# Abnormal Findings (Desc)":
                self.ShowAbnormalCount(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.AbnormalCount() == right.AbnormalCount() ? 0 : (
                                    left.AbnormalCount() > right.AbnormalCount() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.AbnormalCount() == right.AbnormalCount() ? 0 : (
                                    left.AbnormalCount() > right.AbnormalCount() ? -1 : 1));
                        }));
                break;
            case "Last Evaluation Date (Asc)":
                self.ShowLastEvalDate(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.LastAssessment() == right.LastAssessment() ? 0 : (
                                    left.LastAssessment() < right.LastAssessment() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.LastAssessment() == right.LastAssessment() ? 0 : (
                                    left.LastAssessment() < right.LastAssessment() ? -1 : 1));
                        }));
                break;
            case "Last Evaluation Date (Desc)":
                self.ShowLastEvalDate(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.LastAssessment() == right.LastAssessment() ? 0 : (
                                    left.LastAssessment() > right.LastAssessment() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.LastAssessment() == right.LastAssessment() ? 0 : (
                                    left.LastAssessment() > right.LastAssessment() ? -1 : 1));
                        }));
                break;
            case "Admission Date (Asc)":
                self.ShowAdmissionDate(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.AdmissionDate() == right.AdmissionDate() ? 0 : (
                                    left.AdmissionDate() < right.AdmissionDate() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.AdmissionDate() == right.AdmissionDate() ? 0 : (
                                    left.AdmissionDate() < right.AdmissionDate() ? -1 : 1));
                        }));
                break;
            case "Admission Date (Desc)":
                self.ShowAdmissionDate(true);
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.AdmissionDate() == right.AdmissionDate() ? 0 : (
                                    left.AdmissionDate() > right.AdmissionDate() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.AdmissionDate() == right.AdmissionDate() ? 0 : (
                                    left.AdmissionDate() > right.AdmissionDate() ? -1 : 1));
                        }));
                break;
            case "Primary Physician (Asc)":
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.Physician() == right.Physician() ? 0 : (
                                    left.Physician() < right.Physician() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.Physician() == right.Physician() ? 0 : (
                                    left.Physician() < right.Physician() ? -1 : 1));
                        }));
                break;
            case "Primary Physician (Desc)":
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.Physician() == right.Physician() ? 0 : (
                                    left.Physician() > right.Physician() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.Physician() == right.Physician() ? 0 : (
                                    left.Physician() > right.Physician() ? -1 : 1));
                        }));
                break;
            case "Room (Asc)":
                self.ResidentSearchList(
                    self.ResidentSearchList().sort(
                        function (left, right) {
                            return (left.RoomSort() == right.RoomSort() ? 0 : (
                                    left.RoomSort() < right.RoomSort() ? -1 : 1));
                        }));
                self.ResidentSearchListFiltered(
                    self.ResidentSearchListFiltered().sort(
                        function (left, right) {
                            return (left.RoomSort() == right.RoomSort() ? 0 : (
                                    left.RoomSort() < right.RoomSort() ? -1 : 1));
                        }));
                break;
        }

        $('#divResidentSearchList').scrollTop(0);
        $('#divResidentSearchList').removeClass('loadinggif');

    };

    self.SelectResident = function (admission) {
        if (self.operationInProgress()) {
            return;
        }

        ShowProgressDisplay("Loading...");
        var searchModel = {
            Idx: admission.Idx(),
            ResidentIdx: admission.ResidentIdx()
        }

        self.operationInProgress(true);
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/selectadmission',
            data: ko.toJSON(searchModel),
            success: function (msg) {
                    document.location.href = "../residents/residentprofile.aspx";
                }
            }
        );

        return false;
    };

    //=======================================



    COMS.Controls.ResidentListVM.prototype.GetFilteredData = function () {
        if (self.FilterValue && self.FilterValue()) {
            return ko.utils.arrayFilter(self.ResidentListVM(), function (item) {
                var m = false;
                //Filter on Resident FullName 
                if (!m && item.FullName()) {
                    m = item.FullName().toLowerCase().indexOf(self.FilterValue().toLowerCase()) !== -1;
                }
                //Filter on Room #
                if (!m && item.Room()) {
                    m = item.Room().indexOf(self.FilterValue()) !== -1;
                }
                //Filter on Bed #
                if (!m && item.Bed()) {
                    m = item.Bed().indexOf(self.FilterValue()) !== -1;
                }
                return m;
            });
        }
        else {
            return self.ResidentListVM();
        }
    };

    self.sortBy = [{ id: '0', name: 'Sort by' }, { id: '1', name: 'A to Z' }, { id: '2', name: 'Z to A' }, { id: '3', name: 'Resident ID (Asc)' }, { id: '4', name: 'Resident ID (Desc)' },
                    { id: '5', name: '# Abnormal Findings (Asc)' }, { id: '6', name: '# Abnormal Findings (Desc)' }, { id: '7', name: 'Last Evaluation Date (Asc)' }, { id: '8', name: 'Last Evaluation Date (Desc)' },
                    { id: '9', name: 'Primary Physician (Asc)' }, { id: '10', name: 'Primary Physician (Desc)' }, { id: '11', name: 'Room (Asc)' }, { id: '12', name: 'Admission Date (Asc)' }, { id: '13', name: 'Admission Date (Desc)'}];

    COMS.Controls.ResidentListVM.prototype.SortedData = function () {

        if (self.selectedSortBy().name == "A to Z") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {
                var textA = a.FullName().toUpperCase();
                var textB = b.FullName().toUpperCase();
                if (textA < textB) {
                    return -1;
                }
                if (textA > textB) {
                    return 1;
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Z to A") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {
                var textA = a.FullName().toUpperCase();
                var textB = b.FullName().toUpperCase();
                if (textA > textB) {
                    return -1;
                }
                if (textA < textB) {
                    return 1;
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Resident ID (Asc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {
                var textA = a.ResidentID().toUpperCase();
                var textB = b.ResidentID().toUpperCase();
                if (textA < textB) {
                    return -1;
                }
                if (textA > textB) {
                    return 1;
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Resident ID (Desc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {
                var textA = a.ResidentID().toUpperCase();
                var textB = b.ResidentID().toUpperCase();
                if (textA > textB) {
                    return -1;
                }
                if (textA < textB) {
                    return 1;
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "# Abnormal Findings (Asc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {

                return a.AbnormalCount() - b.AbnormalCount();
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "# Abnormal Findings (Desc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {

                return b.AbnormalCount() - a.AbnormalCount();
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Last Evaluation Date (Asc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {

                if (a.LastEvaluationDate() != "" || b.LastEvaluationDate() != "") {

                    return new Date(a.LastEvaluationDate()) - new Date(b.LastEvaluationDate())
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Last Evaluation Date (Desc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {

                if (a.LastEvaluationDate() != "" || b.LastEvaluationDate() != "") {

                    return new Date(b.LastEvaluationDate()) - new Date(a.LastEvaluationDate())
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Admission Date (Asc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {

                if (a.AdmissionDate() != "" || b.AdmissionDate() != "") {

                    return new Date(a.AdmissionDate()) - new Date(b.AdmissionDate())
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Admission Date (Desc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {

                if (a.AdmissionDate() != "" || b.AdmissionDate() != "") {

                    return new Date(b.AdmissionDate()) - new Date(a.AdmissionDate())
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Primary Physician (Asc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {
                var textA = a.Physician().toUpperCase();
                var textB = b.Physician().toUpperCase();
                if (textA < textB) {
                    return -1;
                }
                if (textA > textB) {
                    return 1;
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Primary Physician (Desc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {
                var textA = a.Physician().toUpperCase();
                var textB = b.Physician().toUpperCase();
                if (textA > textB) {
                    return -1;
                }
                if (textA < textB) {
                    return 1;
                }
            });
            return self.ResidentListVM(SortedList);
        }

        if (self.selectedSortBy().name == "Room (Asc)") {

            var SortedList = self.ResidentListVM().sort(function (a, b) {
                var textA = a.Room();
                var textB = b.Room();
                if (textA < textB) {
                    return -1;
                }
                if (textA > textB) {
                    return 1;
                }
            });
            return self.ResidentListVM(SortedList);
        }
    };


    self.SelectAdmission = function (admission, callback) {

        ShowProgressDisplay("Loading...");
        var searchModel = {
            Idx: admission.Idx(),
            ResidentIdx: admission.ResResident_Idx()
        }

        self.operationInProgress(true);
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/selectadmission',
            data: ko.toJSON(searchModel),
            success: function (msg) {
                if (callback) {
                    callback();
                }
                else {
                    document.location.href = "../residents/residentprofile.aspx";
                }
            }
        });

        return false;
    }
};
    

ResidentHeader.VerticalList = function (ItemArray, numItems) {
    var ColumnsArray = [];
    var Colsize = ItemArray.length / numItems;
    for (var i = 0; i < ItemArray.length; ++i) {
        var Column;
        if (i % numItems == 0) {
            Column = ko.observableArray();
            ColumnsArray.push(Column);
        }
        Column.push(ItemArray[i]);
    }
    return ko.observableArray(ColumnsArray);
}

COMSNamespace.CreateDX = function (mapping) {
    var self = this;
    if (mapping) {
        self.Idx = ko.observable(ko.unwrap(mapping.Idx));
        self.Name = ko.observable(ko.unwrap(mapping.Name));
    }
}

COMSNamespace.CreateRX = function (mapping) {
    var self = this;
    if (mapping) {
        self.Idx = ko.observable(ko.unwrap(mapping.Idx));
        self.Name = ko.observable(ko.unwrap(mapping.Name));
    }
}

COMSNamespace.CreateVital = function (mapping) {
    var self = this;
    if (mapping) {
        self.Idx = ko.observable(ko.unwrap(mapping.Idx));
        self.Date = ko.observable(ko.unwrap(mapping.Date));
        self.AssessmentIdx = ko.observable(ko.unwrap(mapping.AssessmentIdx));
        self.LastBM = ko.observable(ko.unwrap(mapping.LastBM));
        self.Temp = ko.observable(ko.unwrap(mapping.Temp));
        self.IsTempAbnormal = ko.observable(ko.unwrap(mapping.IsTempAbnormal));
        self.HR = ko.observable(ko.unwrap(mapping.HR));
        self.IsHRAbnormal = ko.observable(ko.unwrap(mapping.IsHRAbnormal));
        self.BP = ko.observable(ko.unwrap(mapping.BP));
        self.IsBPAbnormal = ko.observable(ko.unwrap(mapping.IsBPAbnormal));
        self.BS = ko.observable(ko.unwrap(mapping.BS));
        self.IsBSAbnormal = ko.observable(ko.unwrap(mapping.IsBSAbnormal));
        self.Resp = ko.observable(ko.unwrap(mapping.Resp));
        self.IsRespAbnormal = ko.observable(ko.unwrap(mapping.IsRespAbnormal));
        self.POx = ko.observable(ko.unwrap(mapping.POx));
        self.IsPOxAbnormal = ko.observable(ko.unwrap(mapping.IsPOxAbnormal));
        self.Pain = ko.observable(ko.unwrap(mapping.Pain));
        self.IsPainAbnormal = ko.observable(ko.unwrap(mapping.IsPainAbnormal));
        self.Weight = ko.observable(ko.unwrap(mapping.Weight));
        self.IsWeightAbnormal = ko.observable(ko.unwrap(mapping.IsWeightAbnormal));
        self.Observations = ko.observable(ko.unwrap(mapping.Observations));
        self.Abnormals = ko.observable(ko.unwrap(mapping.Abnormals));
        self.Nurse = ko.observable(ko.unwrap(mapping.Nurse));
        self.NurseTitle = ko.observable(ko.unwrap(mapping.NurseTitle));
        self.Name = ko.observable(ko.unwrap(mapping.Name));
        self.IsRemoved = ko.observable(ko.unwrap(mapping.IsRemoved));
        self.FindingEndDate = ko.observable(ko.unwrap(mapping.FindingEndDate));
        self.ShowQA = ko.observable(ko.unwrap(mapping.ShowQA));
    }
}

COMSNamespace.CreateRisk = function (mapping) {
    var self = this;
    if (mapping) {
        self.Name = ko.observable(ko.unwrap(mapping.Name));
    }
}

COMSNamespace.CreateAllergy = function (mapping) {
    var self = this;
    if (mapping) {
        self.Name = ko.observable(ko.unwrap(mapping.Name));
        self.ExcludeFromCount = ko.observable(ko.unwrap(mapping.ExcludeFromCount));
    }
}

COMSNamespace.CreateMemo = function (mapping) {
    var self = this;
    if (mapping) {
        self.Idx = ko.observable(ko.unwrap(mapping.Idx));
        if (mapping.Idx != "") {
            self.NoteText = ko.observable(ko.unwrap(mapping.NoteText));
            self.OwnerName = ko.observable(ko.unwrap(mapping.OwnerName));
            self.OwnerTitle = ko.observable(ko.unwrap(mapping.OwnerTitle));
            self.CollectedDate = ko.observable(ko.unwrap(mapping.CollectedDate));
        }
        else {
            self.NoteText = ko.observable(ko.unwrap(mapping.NoteText));
            self.OwnerName = ko.observable('');
            self.OwnerTitle = ko.observable('');
            self.CollectedDate = ko.observable('');
        }
    }
}

COMSNamespace.ResidentHeader = COMSNamespace.ResidentHeader || {};
COMSNamespace.ResidentHeader.LoadingState = {
    NOTLOADED: 1,
    LOADING: 2,
    LOADED: 3
};

if(!COMSNamespace.ResidentHeader.MemoAddSubscriptions) {
    COMSNamespace.ResidentHeader.MemoAddSubscriptions = [];
}

if(!COMSNamespace.ResidentHeader.NoteAddSubscriptions) {
    COMSNamespace.ResidentHeader.NoteAddSubscriptions = [];
}

if(!COMSNamespace.ResidentHeader.AlertAddSubscriptions) {
    COMSNamespace.ResidentHeader.AlertAddSubscriptions = [];
}

COMSNamespace.ResidentHeaderViewModel = COMSNamespace.ResidentHeaderViewModel || new function () {
    var self = this;

    COMSNamespace.ResidentHeader.LoadingState = {
        NOTLOADED: 1,
        LOADING: 2,
        LOADED: 3
    };

    self.LoadingStates = {
        Memos: ko.observable(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED),
        Alerts: ko.observable(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED),
        Dx: ko.observable(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED),
        Rx: ko.observable(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED),
        Allergies: ko.observable(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED),
        Vitals: ko.observable(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED)
    };

    self.Idx = ko.observable("");
    self.ResResident_Idx = ko.observable("");
    self.ResidentDischarged = ko.observable(false);
    self.ResidentID = ko.observable("");
    self.Gender = ko.observable("");
    self.Age = ko.observable("");
    self.LastName = ko.observable("");
    self.FirstName = ko.observable("");
    self.Unit = ko.observable("");
    self.Room_Bed = ko.observable("");
    self.PrimaryPhys = ko.observable("");
    self.PrimaryDX = ko.observable("");
    self.Admission_Date = ko.observable("");
    self.Birth_Date = ko.observable("");
    self.LOS = ko.observable("");
    self.ResImage = ko.observable("");
    self.DXList = ko.observableArray();
    self.NewDXCount = ko.observableArray(0);
    self.DXCount = ko.observableArray(0);
    self.RXList = ko.observableArray();
    self.NewRXCount = ko.observableArray(0);
    self.RXCount = ko.observableArray(0);
    self.RiskList = ko.observableArray();
    self.NewRiskCount = ko.observableArray(0);
    self.RiskCount = ko.observableArray(0);
    self.AllergyList = ko.observableArray();
    self.MemoList = ko.observableArray();
    self.NewMemoCount = ko.observableArray(0);
    self.MemoCount = ko.observableArray(0);
    self.VitalList = ko.observableArray();
    self.OverrideTabShow = ko.observable(false);
    self.AlertsVisible = ko.observable(false);
    self.AlertsEdit = ko.observable(false);
    self.DxVisible = ko.observable(false);
    self.DxEdit = ko.observable(false);
    self.RxVisible = ko.observable(false);
    self.VitalsVisible = ko.observable(false);
    self.AllergiesVisible = ko.observable(false);
    self.MemosVisible = ko.observable(false);
    self.MemosEdit = ko.observable(false);
    self.HideExtraTabs = ko.observable(false);
    self.TempGraphVisible = ko.observable(false);
    self.BPGraphVisible = ko.observable(false);
    self.HRGraphVisible = ko.observable(false);
    self.RespirationsGraphVisible = ko.observable(false);
    self.PulseOXGraphVisible = ko.observable(false);
    self.PainScoreGraphVisible = ko.observable(false);
    self.WeightGraphVisible = ko.observable(false);
    self.GlucoseGraphVisible = ko.observable(false);
    self.Tasks = ko.observableArray();
    self.TasksState = ko.observable(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
    self.CanAddCOMSSBAR = ko.observable(false);
    self.CanAddInteractSBAR = ko.observable(false);
    self.CanAccessInteract = ko.observable(false);
    self.CanAddNote = ko.observable(false);
    self.CanEvaluate = ko.observable(false);

    self.CanAddPhysNote = ko.observable(false);
    self.CanAddHomeCare = ko.observable(false);
    self.CanAccessChartReport = ko.observable(false);
    self.CanAccessMeds = ko.observable(false);
    self.CanAccessMedLookup = ko.observable(false);
    self.CanAccessExternalIDs = ko.observable(false);
    self.CanAccessProtocols = ko.observable(false);
    // START - Card #946 - COMS I/O Flow Sheet 
    self.CanAccessFlowsheet = ko.observable(false);
    // END - Card #946 - COMS I/O Flow Sheet 

    self.TabLoaded = ko.observable(false);

    self.ResidentList = ko.observableArray();
    self.ResidentListControl = new COMS.Controls.ResidentListVM(self.ResidentList, self.FirstName, self.LastName);

    this.ImageSrc = ko.computed(function () {
        if (this.ResImage().length == 0) {
            return "/App_Themes/COMS/Person.png";
        }
        else {
            return (this.ResImage());
        }
    }, this);

    self.Load = function () {
        $.ajax({
            type: 'GET',
            contentType: "application/json;",
            dataType: "json",
            url: '/resident/header/currentresident',
            success: function (messages) {
                if (messages) {
                    self.Idx(ko.unwrap(messages.ResAdmission_Idx));
                    self.ResResident_Idx(ko.unwrap(messages.ResResident_Idx));
                    self.ResidentID(ko.unwrap(messages.ResidentID));
                    self.ResidentDischarged(ko.unwrap(messages.ResidentDischarged));
                    self.Gender(ko.unwrap(messages.Gender));
                    self.Age(ko.unwrap(messages.Age));
                    self.LastName(ko.unwrap(messages.LastName));
                    self.FirstName(ko.unwrap(messages.FirstName));
                    self.Unit(ko.unwrap(messages.Unit));
                    self.Room_Bed(ko.unwrap(messages.Room_Bed));
                    self.PrimaryPhys(ko.unwrap(messages.PrimaryPhys));
                    self.PrimaryDX(ko.unwrap(messages.PrimaryDX));
                    self.Admission_Date(ko.unwrap(messages.Admission_Date));
                    self.Birth_Date(ko.unwrap(messages.Birth_Date));
                    self.LOS(ko.unwrap(messages.LOS));
                    self.ResImage(ko.unwrap(messages.ResImage));
                    self.AlertsVisible(ko.unwrap(messages.AlertsVisible));
                    self.AlertsEdit(ko.unwrap(messages.AlertsEdit));
                    self.DxVisible(ko.unwrap(messages.DxVisible));
                    self.DxEdit(ko.unwrap(messages.DxEdit));
                    self.RxVisible(ko.unwrap(messages.RxVisible));
                    self.VitalsVisible(ko.unwrap(messages.VitalsVisible));
                    self.AllergiesVisible(ko.unwrap(messages.AllergiesVisible));
                    self.MemosVisible(ko.unwrap(messages.MemosVisible));
                    self.MemosEdit(ko.unwrap(messages.MemosEdit));
                    self.LoadCounts();
                    self.LoadAllergyList(self);
                    self.CanAddCOMSSBAR(ko.unwrap(messages.CanAddCOMSSBAR));
                    self.CanAddInteractSBAR(ko.unwrap(messages.CanAddInteractSBAR));
                    self.CanAccessInteract(ko.unwrap(messages.CanAccessInteract));
                    self.CanAddNote(ko.unwrap(messages.CanAddNote));
                    self.CanEvaluate(ko.unwrap(messages.CanEvaluate));

                    self.CanAddPhysNote(ko.unwrap(messages.CanAddPhysNote));
                    self.CanAddHomeCare(ko.unwrap(messages.CanAddHomeCare));
                    self.CanAccessChartReport(ko.unwrap(messages.CanAccessChartReport));
                    self.CanAccessMeds(ko.unwrap(messages.CanAccessMeds));
                    self.CanAccessMedLookup(ko.unwrap(messages.CanAccessMedLookup));
                    self.CanAccessExternalIDs(ko.unwrap(messages.CanAccessExternalIDs));
                    self.CanAccessProtocols(ko.unwrap(messages.CanAccessProtocols));
                    // START - Card #946 - COMS I/O Flow Sheet 
                    self.CanAccessFlowsheet(ko.unwrap(messages.CanAccessFlowsheet));
                    // END - Card #946 - COMS I/O Flow Sheet 

                    $('.residentheaderTab').first().tab('show');
                }
            },
            error: function (emp) {
                COMSNamespace.DisplayCommunicationFault(null, self);
            }
        });
        return false;
    }

    self.LoadCounts = function () {
        $.ajax({
            type: 'GET',
            contentType: "application/json;",
            dataType: "json",
            url: '/resident/header/Counts/' + self.Idx(),
            success: function (data) {
                self.NewDXCount(parseInt(data.NewDxCount));
                self.NewRXCount(parseInt(data.NewRxCount));
                self.NewRiskCount(parseInt(data.NewAlertCount));
                self.NewMemoCount(parseInt(data.NewMemoCount));
                self.DXCount(parseInt(data.DxCount));
                self.RXCount(parseInt(data.RxCount));
                self.RiskCount(parseInt(data.AlertCount));
                self.MemoCount(parseInt(data.MemoCount));
            },
            error: function (emp) {
                COMSNamespace.DisplayCommunicationFault(null, self);
            }
        });
    }

    self.LoadActiveTab = function (contentGroup) {
        if (contentGroup.name == 'memos') {
            self.LoadMemoList(self);
        }
        else if (contentGroup.name == 'vitals') {
            self.LoadVitalList(self);
            self.TabLoaded(true);
        }
        else if (contentGroup.name == 'diagnosis') {
            self.LoadDXList(self);
        }
        else if (contentGroup.name == 'medications') {
            self.LoadRXList(self);
        }
        else if (contentGroup.name == 'allergies') {
            self.LoadAllergyList(self);
        }
        else if (contentGroup.name == 'alerts') {
            self.LoadRiskList(self);
        }
    }

    self.LoadDXList = function (resident) {
        if (self.LoadingStates.Dx() != COMSNamespace.ResidentHeader.LoadingState.NOTLOADED) {
            return;
        }
        if (!resident.Idx()) {
            return;
        }
        self.LoadingStates.Dx(COMSNamespace.ResidentHeader.LoadingState.LOADING);

        var setProperties =
            function (messages) {
                resident.DXList.removeAll();
                if (messages && messages.length > 0) {
                    var secondaries = ko.utils.arrayFilter(messages, function (item) {
                        return !item.IsPrimary;
                    });
                    COMSNamespace.PopulateObservableArray(secondaries, resident.DXList, COMSNamespace.CreateDX);
                    var primary = ko.utils.arrayFirst(messages, function (item) {
                        return item.IsPrimary;
                    });
                    if (primary) {
                        self.PrimaryDX(primary.Name);
                    }
                    else {
                        self.PrimaryDX('');
                    }
                }
            };

        var diseases = GetCacheItem('Dx' + resident.Idx());

        if (diseases) {
            self.LoadingStates.Dx(COMSNamespace.ResidentHeader.LoadingState.LOADED);
            setProperties(diseases);
        }
        else {
            $.ajax({
                type: 'GET',
                contentType: "application/json;",
                dataType: "json",
                url: '/resident/header/dxlist/' + resident.Idx(),
                success: function (messages) {
                    self.LoadingStates.Dx(COMSNamespace.ResidentHeader.LoadingState.LOADED);
                    setProperties(messages);
                    SetCacheItem('Dx' + resident.Idx(), messages, 10);
                },
                error: function (emp) {
                    self.LoadingStates.Dx(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                    COMSNamespace.DisplayCommunicationFault(null, self);
                }
            });
        }

        return false;
    }

    self.LoadRXList = function (resident) {
        if (self.LoadingStates.Rx() != COMSNamespace.ResidentHeader.LoadingState.NOTLOADED) {
            return;
        }
        if (!resident.Idx()) {
            return;
        }
        self.LoadingStates.Rx(COMSNamespace.ResidentHeader.LoadingState.LOADING);

        var setProperties =
            function (messages) {
                resident.RXList.removeAll();
                if (messages && messages.length > 0) {
                    COMSNamespace.PopulateObservableArray(messages, resident.RXList, COMSNamespace.CreateRX);
                }
                else {
                    $("#OptionRX").hide();
                }
            };

        var prescriptions = GetCacheItem('Rx' + resident.Idx());

        if (prescriptions) {
            self.LoadingStates.Rx(COMSNamespace.ResidentHeader.LoadingState.LOADED);
            setProperties(prescriptions);
        }
        else {
            $.ajax({
                type: 'GET',
                contentType: "application/json;",
                dataType: "json",
                url: '/resident/header/rxlist/' + resident.Idx(),
                success: function (messages) {
                    self.LoadingStates.Rx(COMSNamespace.ResidentHeader.LoadingState.LOADED);
                    setProperties(messages);
                    SetCacheItem('Rx' + resident.Idx(), messages, 10);
                },
                error: function (emp) {
                    self.LoadingStates.Rx(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                    COMSNamespace.DisplayCommunicationFault(null, self);
                }
            });
        }
        return false;
    }

    self.LoadRiskList = function (resident) {
        if (self.LoadingStates.Alerts() != COMSNamespace.ResidentHeader.LoadingState.NOTLOADED) {
            return;
        }
        if (!resident.Idx()) {
            return;
        }
        self.LoadingStates.Alerts(COMSNamespace.ResidentHeader.LoadingState.LOADING);

        var setProperties =
            function (messages) {
                resident.RiskList.removeAll();
                if (messages && messages.length > 0) {
                    COMSNamespace.PopulateObservableArray(messages, resident.RiskList, COMSNamespace.CreateRisk);
                    if (self.OverrideTabShow() == false) {
                        $('#ResidentHeaderAlertsTab').tab('show');
                    }
                } else {
                    if (self.OverrideTabShow() == false) {
                        $('#ResidentHeaderAlertsTab').tab('show');
                    }
                }
            };

        var risks = GetCacheItem('RL' + resident.Idx());

        if (risks) {
            self.LoadingStates.Alerts(COMSNamespace.ResidentHeader.LoadingState.LOADED);
            setProperties(risks);
        }
        else {
            $.ajax({
                type: 'GET',
                contentType: "application/json;",
                dataType: "json",
                url: '/resident/header/risklist/' + resident.Idx(),
                success: function (messages) {
                    self.LoadingStates.Alerts(COMSNamespace.ResidentHeader.LoadingState.LOADED);
                    setProperties(messages);
                    SetCacheItem('RL' + resident.Idx(), messages, 10);
                },
                error: function (emp) {
                    self.LoadingStates.Alerts(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                    COMSNamespace.DisplayCommunicationFault(null, self);
                }
            });
        }
        return false;
    }

    self.ShowMemoTab = function () {
        $('#ResidentHeaderMemosTab').tab('show');
        self.OverrideTabShow(true);
    }

    self.LoadAllergyList = function (resident) {
        if (self.LoadingStates.Allergies() != COMSNamespace.ResidentHeader.LoadingState.NOTLOADED) {
            return;
        }
        if (!resident.Idx()) {
            return;
        }
        self.LoadingStates.Allergies(COMSNamespace.ResidentHeader.LoadingState.LOADING);

        var setProperties =
            function (messages) {
                resident.AllergyList.removeAll();
                if (messages && messages.length > 0) {
                    COMSNamespace.PopulateObservableArray(messages, resident.AllergyList, COMSNamespace.CreateAllergy);
                }
            };

        var allergies = GetCacheItem('AG' + resident.Idx());

        if (allergies) {
            self.LoadingStates.Allergies(COMSNamespace.ResidentHeader.LoadingState.LOADED);
            setProperties(allergies);
        }
        else {
            $.ajax({
                type: 'GET',
                contentType: "application/json;",
                dataType: "json",
                url: '/resident/header/allergylist/' + resident.Idx(),
                success: function (messages) {
                    self.LoadingStates.Allergies(COMSNamespace.ResidentHeader.LoadingState.LOADED);
                    setProperties(messages);
                    SetCacheItem('AG' + resident.Idx(), messages, 10);
                },
                error: function (emp) {
                    self.LoadingStates.Allergies(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                    COMSNamespace.DisplayCommunicationFault(null, self);
                }
            });
        }
        return false;
    }

    self.LoadVitalList = function (resident) {
        if (self.LoadingStates.Vitals() != COMSNamespace.ResidentHeader.LoadingState.NOTLOADED) {
            return;
        }
        if (!resident.Idx()) { return; }

        var vitals = GetCacheItem('VI' + resident.Idx());
        if (vitals) {
            self.LoadingStates.Vitals(COMSNamespace.ResidentHeader.LoadingState.LOADED);
            resident.VitalList.removeAll();
            if (vitals.length > 0) {
                COMSNamespace.PopulateObservableArray(vitals, resident.VitalList, COMSNamespace.CreateVital);
            }
        }
        else {
            self.LoadingStates.Vitals(COMSNamespace.ResidentHeader.LoadingState.LOADING);
            $.ajax({
                type: 'GET',
                contentType: "application/json;",
                dataType: "json",
                url: '/resident/header/assessmentlist/' + resident.Idx(),
            })
            .done(function (messages) {
                self.LoadingStates.Vitals(COMSNamespace.ResidentHeader.LoadingState.LOADED);
                resident.VitalList.removeAll();
                if (messages && messages.length > 0) {
                    COMSNamespace.PopulateObservableArray(messages, resident.VitalList, COMSNamespace.CreateVital);
                }
                SetCacheItem('VI' + resident.Idx(), messages, 10);
            })
            .fail(function() {
                self.LoadingStates.Vitals(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                COMSNamespace.DisplayCommunicationFault(null, self);
            });
        }
        return false;
    }

    self.LoadMemoList = function (resident) {
        if (self.LoadingStates.Memos() != COMSNamespace.ResidentHeader.LoadingState.NOTLOADED) {
            return;
        }
        if (!resident.Idx()) {
            return;
        }
        self.LoadingStates.Memos(COMSNamespace.ResidentHeader.LoadingState.LOADING);

        var setProperties =
            function (messages) {
                resident.MemoList.removeAll();
                if (messages && messages.length > 0) {
                    COMSNamespace.PopulateObservableArray(messages, resident.MemoList, COMSNamespace.CreateMemo);
                }
            };

        var memos = GetCacheItem('MM' + resident.Idx());

        if (memos) {
            self.LoadingStates.Memos(COMSNamespace.ResidentHeader.LoadingState.LOADING);
            setProperties(memos);
        }
        else {
            $.ajax({
                type: 'GET',
                contentType: "application/json;",
                dataType: "json",
                url: '/resident/header/memolist/' + resident.Idx(),
                success: function (messages) {
                    self.LoadingStates.Memos(COMSNamespace.ResidentHeader.LoadingState.LOADED);
                    setProperties(messages);
                    SetCacheItem('MM' + resident.Idx(), messages, 10);
                },
                error: function (emp) {
                    self.LoadingStates.Memos(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                    COMSNamespace.DisplayCommunicationFault(null, self);
                }
            });
        }
        return false;
    }

    self.LoadTasks = function () {
        if (self.TasksState() == COMSNamespace.ResidentHeader.LoadingState.NOTLOADED) {
            self.TasksState(COMSNamespace.ResidentHeader.LoadingState.LOADING);
            var searchModel = {
                Idx: self.Idx(),
                ResidentIdx: self.ResResident_Idx()
            }

            $.ajax({
                type: 'POST',
                contentType: "application/json;",
                url: '/resident/header/scheduledtasks',
                data: ko.toJSON(searchModel),
                success: function (tasks) {
                    self.TasksState(COMSNamespace.ResidentHeader.LoadingState.LOADED);
                    self.Tasks.removeAll
                    var x = ko.mapping.fromJS(tasks);
                    self.Tasks(x());
                },
                error: function () {
                    self.TasksState(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                }
            });
        }
    }

    self.PerformTaskAction = function (task) {
        ShowProgressDisplay("Loading...");
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/header/taskurl/' + task.Idx(),
            data: "{}",
            success: function (url) {
                if (url) {
                    document.location.href = url;
                }
                else {
                    HideProgressDisplay();
                    $('#divResidentHeaderMessageText').text("The assessment associated with this task has been closed.");
                    $('#divResidentHeaderMessage').modal("show");
                    self.TasksState(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
                    self.LoadTasks();
                }
            },
            error: function () {
                HideProgressDisplay();
            }
        });
    }

    self.NavigateToSBAR = function () {
        if (self.CanAddInteractSBAR()) {
            document.location.href = "../asmt/asmtinteractlanding.aspx?type=SBAR";
        }
        else {
            radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&AIX=' + self.Idx() + '&NoteType=31', 'winGeneric');
        }
    }

    self.AddHomeCare = function (resident) {
        radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&NoteType=' + HomeCareNoteId + '&AIX=' + resident.Idx(), 'winGeneric');
        return false;
    }

    self.AddMemo = function (resident) {
        var win = radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/MemoEdit.aspx&Mode=A&NoRefresh=1&AIX=' + resident.Idx(), 'winGeneric');
        win.ClientCallBackFunction = function () {
            COMSNamespace.ResidentHeaderViewModel.LoadingStates.Memos(COMSNamespace.ResidentHeader.LoadingState.NOTLOADED);
            COMSNamespace.ResidentHeaderViewModel.LoadMemoList(COMSNamespace.ResidentHeaderViewModel);
            COMSNamespace.ResidentHeaderViewModel.LoadCounts();
            if (COMSNamespace.ResidentHeader.MemoAddSubscriptions) {
                for (var i = 0; i < COMSNamespace.ResidentHeader.MemoAddSubscriptions.length; i++) {
                    var callback = COMSNamespace.ResidentHeader.MemoAddSubscriptions[i];
                    callback();
                }
            }
        };
    }

    self.NavigateToChart = function (resident) {
        self.ResidentListControl.SelectAdmission(resident, function () { document.location.href = "../reporting/chartreport.aspx"; });
    }

    self.NavigateToMeds = function (resident) {
        if (self.CanAccessMedLookup()) {
            self.ResidentListControl.SelectAdmission(resident, function () {
                HideProgressDisplay();
                radOpenResponsive('../Residents/MedicationsWarningList.aspx', 'winGeneric');
            });
        }
        else {
            $('#divResidentHeaderMessageText').text("This option is available within the COMS premium package. Please contact your AHT sales rep for more information.");
            $('#divResidentHeaderMessage').modal("show");
        }
    }

    self.NavigateToProtocols = function () {
        document.location.href = "../residents/taskprotocols.aspx";
    }

    self.AddPhysNote = function (resident) {
        radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&NoteType=17&AIX=' + resident.Idx(), 'winGeneric');
    }

    self.NavigateToNote = function () {
        var oWin = radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&AIX=' + self.Idx(), 'winGeneric');
        oWin.ClientCallBackFunction = function() {
                if (COMSNamespace.ResidentHeader.NoteAddSubscriptions) {
                    for (var i = 0; i < COMSNamespace.ResidentHeader.NoteAddSubscriptions.length; i++) {
                        var callback = COMSNamespace.ResidentHeader.NoteAddSubscriptions[i];
                        callback();
                    }
                }
        }
    }

    self.NavigateToAsmt = function () {
        document.location.href = "../Residents/AssessmentSelection.aspx";
    }

    self.TemperatureGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity(COMSNamespace.Vitals.Temperature, self.ResResident_Idx(), null, null, null, function () { return self.TempGraphVisible(); })
    }

    self.BPGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity([COMSNamespace.Vitals.Systolic, COMSNamespace.Vitals.Diastolic], self.ResResident_Idx(), null, null, null, function () { return self.BPGraphVisible(); })
        }

    self.HRGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity([COMSNamespace.Vitals.HeartRate, COMSNamespace.Vitals.LegacyApicalHR, COMSNamespace.Vitals.LegacyRadialHR], self.ResResident_Idx(), null, null, null, function () { return self.HRGraphVisible(); })
        }

    self.RespirationsGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity(COMSNamespace.Vitals.Respirations, self.ResResident_Idx(), null, null, null, function () { return self.RespirationsGraphVisible(); })
        }

    self.PulseOXGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity(COMSNamespace.Vitals.PulseOx, self.ResResident_Idx(), null, null, null, function () { return self.PulseOXGraphVisible(); })
                    }

    self.PainScoreGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity(COMSNamespace.Vitals.PainScore, self.ResResident_Idx(), 0, 1, 10, function () { return self.PainScoreGraphVisible(); })
    }

    self.WeightGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity(COMSNamespace.Vitals.Weight, self.ResResident_Idx(), null, null, null, function () { return self.WeightGraphVisible(); })
    }

    self.GlucoseGraphBinding = function () {
        return COMSNamespace.DrawGraphResidentCaddEntity(COMSNamespace.Vitals.Glucose, self.ResResident_Idx(), null, null, null, function () { return self.GlucoseGraphVisible(); })
    }

    self.capitalizeFirstLetter = function (string) {
        var tempString = ((typeof (string) == 'function') ? string() : string);
        return tempString.charAt(0).toUpperCase() + tempString.slice(1);
    };

    self.ShowTemperatureGraph = function () {
        if (self.TabLoaded() == true)  self.TempGraphVisible(!self.TempGraphVisible());
    };

    self.ShowBPGraph = function () {
        if (self.TabLoaded() == true) self.BPGraphVisible(!self.BPGraphVisible());
    };

    self.ShowHRGraph = function () {
        if (self.TabLoaded() == true) self.HRGraphVisible(!self.HRGraphVisible());
    };

    self.ShowRespirationsGraph = function () {
        if (self.TabLoaded() == true) self.RespirationsGraphVisible(!self.RespirationsGraphVisible());
    };

    self.ShowPulseOXGraph = function () {
        if (self.TabLoaded() == true) self.PulseOXGraphVisible(!self.PulseOXGraphVisible());
    };

    self.ShowPainScoreGraph = function () {
        if (self.TabLoaded() == true) self.PainScoreGraphVisible(!self.PainScoreGraphVisible());
    };

    self.ShowWeightGraph = function () {
        if (self.TabLoaded() == true) self.WeightGraphVisible(!self.WeightGraphVisible());
    };

    self.ShowGlucoseGraph = function () {
        if (self.TabLoaded() == true) self.GlucoseGraphVisible(!self.GlucoseGraphVisible());
    };

    self.contentGroups = [
      {
          name: 'memos',
          title: 'memos',
          list: self.MemoList,
          count: ko.computed(function () { return self.MemoCount(); }, self),
          newCount: ko.computed(function () { return self.NewMemoCount(); }, self),
          visible: ko.computed(function () { return !self.HideExtraTabs() && self.MemosVisible() }, self),
          countIsVisible: ko.computed(function () { return self.MemoCount() > 0; }, self)
      },
      {
          name: 'vitals',
          title: 'vitals',
          list: self.VitalList,
          count: ko.computed(function () { return 0; }, self),
          visible: ko.computed(function () { return !self.HideExtraTabs() && self.VitalsVisible() }, self),
          countIsVisible: ko.computed(function () { return false; }, self),
          newCount: ko.computed(function () { return 0; }, self)
      },
      {
          name: 'diagnosis',
          title: 'diagnosis',
          list: self.DXList,
          count: ko.computed(function () { return self.DXCount(); }, self),
          visible: self.DxVisible,
          countIsVisible: ko.computed(function () { return self.DXCount() > 0; }, self),
          newCount: ko.computed(function () { return self.NewDXCount(); }, self)
      },
      {
          name: 'medications',
          title: 'medications',
          list: self.RXList,
          count: ko.computed(function () { return self.RXCount(); }, self),
          visible: self.RxVisible,
          countIsVisible: ko.computed(function () { return self.RXCount() > 0; }, self),
          newCount: ko.computed(function () { return self.NewRXCount(); }, self)
      },
      {
          name: 'alerts',
          title: 'alerts',
          list: self.RiskList,
          count: ko.computed(function () { return self.RiskCount(); }, self),
          visible: ko.computed(function () { return !self.HideExtraTabs() && self.AlertsVisible() }, self),
          countIsVisible: ko.computed(function () { return self.RiskCount() > 0; }, self),
          newCount: ko.computed(function () { return self.NewRiskCount(); }, self)
      },
      {
          name: 'allergies',
          title: ko.computed(function () {
              var includeCount = 0;
              var excludeCount = 0;
              var algTitle = '';
              for (var i = 0; self.AllergyList()[i]; i++) {
                  if (self.AllergyList()[i].ExcludeFromCount().toString() == "false") includeCount++;
                  else {
                      if (algTitle != '') algTitle += ', ';
                      algTitle += self.AllergyList()[i].Name();
                      excludeCount++;
                  }
              }
              return (excludeCount == 0 || (excludeCount > 0 && includeCount > 0)) ? (includeCount == 1 ? 'allergy' : 'allergies') : algTitle.toString();
          }, self),
          list: self.AllergyList,
          count: ko.computed(function () {
              var algCount = 0;
              for (var i = 0; self.AllergyList()[i]; i++) {
                  if (self.AllergyList()[i].ExcludeFromCount().toString() == "false") algCount++;
              }
              return algCount;
          }, self),
          visible: self.AllergiesVisible,
          countIsVisible: ko.computed(function () {
              var includeCount = 0;
              var excludeCount = 0;
              for (var i = 0; self.AllergyList()[i]; i++) {
                  if (self.AllergyList()[i].ExcludeFromCount().toString() == "false") includeCount++;
                  else excludeCount++;
              }
              return (excludeCount == 0 || (excludeCount > 0 && includeCount > 0));
          }, self),
          newCount: ko.computed(function () { return 0; }, self)
      },
    ];

    self.isCollapsed = ko.observable(true);

    self.ToggleAllExpand = function (item, event) {
        self.isCollapsed(!self.isCollapsed());
    }
}
