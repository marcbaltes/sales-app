var COMS = COMS || {};

ko.bindingHandlers.stopBinding = {
    init: function () {
        return { controlsDescendantBindings: true };
    }
};

var COMSDate = COMSDate || {};


COMSDate.DateControlVM = COMSDate.DateControlVM || function (Date, Min, Max, Validation, includeTimePicker) {
    if (!Date) {
        throw 'The Date binding provided for DatePicker is invalid';
    }
    return ko.observable({ Date: Date, Min: Min, Max: Max, Validation: Validation ? Validation : function () { return true; }, includeTimePicker: includeTimePicker ? includeTimePicker : function () { return true; } });
};

COMS.AddDateBindings = COMS.AddDateBindings || function () {
    var COMSDate = COMSDate || {};
    ko.bindingHandlers.COMSDate = ko.bindingHandlers.COMSDate || {
        init: function (element, valueAccessor, allBindingsAccessor) {
            var options = allBindingsAccessor().datepickerOptions || {};
            if (valueAccessor().Date == undefined) throw 'Binding must provide an Observable with Date';
            if (valueAccessor().includeTimePicker() == undefined || valueAccessor().includeTimePicker() == true) {
                $(element).datetimepicker();
            } else {
                $(element).datetimepicker({ format: 'MM/DD/YYYY' });
            }

            //when a user changes the date, update the viewModal
            ko.utils.registerEventHandler(element,
                'dp.change',
                function(evt) {
                    var observable = valueAccessor().Date;
                    var controlDate = evt.date;
                    if (controlDate) {
                        var day, month, newYear, year;
                        var dateCtr = controlDate.toDate();
                            month = dateCtr.getMonth() + 1;
                            day = dateCtr.getDate();
                            year = dateCtr.getFullYear();
                            if (year === "") {
                                year = "0";
                            }
                            if (year.toString().length < 4) {
                                newYear = String(2000 + parseInt(year));
                                var d  = month + "/" + day + "/" + newYear;
                                dateCtr = new Date(d);
                            }
                   observable(dateCtr);
                   }
                    else {
                    observable(null);
                   }

                
            });

            //handle disposal (if KO removes by the template binding)
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                $(element).datepicker("destroy");
            });
        },
        update: function (element, valueAccessor) {
            var value = ko.utils.unwrapObservable(valueAccessor());
            if (!value.Date()) {
                $(element).datepicker("setDate", null);
            }
            else {
                // In order to set the date for the date time picker we have to go
                // in to the data attribute and then use the .date method and pass in a date 
                // to set the actual date for the date tim picker
                $(element).data("DateTimePicker").date(value.Date());
            }

            if (value.Max) {
                if (COMS.Validation.IsValidDate(value.Max())) {
                    $(element).data("DateTimePicker").maxDate(value.Max());
                }
                else {
                    $(element).data("DateTimePicker").maxDate(false);
                }
            }
            if (value.Min) {
                if (COMS.Validation.IsValidDate(value.Min())) {
                    $(element).data("DateTimePicker").minDate(value.Min());
                }
                else {
                    $(element).data("DateTimePicker").minDate(false);
                }
            }

        }
    }
};

COMS.UndoableBinding = COMS.UndoableBinding  || function (observable) {
    var inst = this;
    inst.MirrorData = ko.observable();
    inst.RefreshReplica = function () {
        inst.MirrorData(ko.mapping.fromJS(ko.toJS(observable)));
    };
    inst.UndoChanges = function () {
        ko.mapping.fromJS(ko.mapping.toJS(inst.MirrorData), {}, observable);
    };
    inst.RefreshReplica();
    return inst;
};

COMS.Controls = COMS.Controls || {};



COMS.Controls.MultiSelect = COMS.Controls.MultiSelect || function () {
    var self = this;
    var Group = ko.observable({
        OBSGroup: ko.observableArray(),
        Label: ko.observable(),
        Expanded: ko.observable(false)
    });
    Group().GetSelectedValues = function () {
        var a = ko.utils.arrayFilter(Group().OBSGroup(), function (item) {
            return item().IsSelectedHandler();
        });
        return a;
    };
    Group().ToggleExpanded = function () {
        var a = Group().Expanded() !=  true ;
        Group().Expanded(a);
    };
    self.Bind = function () {
        if (!self.available) throw 'AvailableOptions must be used';
        if (!self.selected) throw 'SelectedOptions must be used';

        ko.utils.arrayForEach(ko.utils.unwrapObservable(self.available), function (item) {
            var groupItm = ko.observable({
                DisplayName: self.GetDisplayName(item),
                ObsVM: item,
                OnClickHandler: function () {
                    var foundItem = ko.utils.arrayFirst(ko.utils.unwrapObservable(self.selected), function (vIdx) {
                        return self.comparer(vIdx, item);
                    });
                    if (foundItem) {
                        self.selected.remove(foundItem);
                    } else {
                        self.selected.push(item);
                    }
                },
                IsSelectedHandler: function () {
                    var foundItem = ko.utils.arrayFirst(ko.utils.unwrapObservable(self.selected), function (vIdx) {
                        return self.comparer(vIdx, item);
                    });
                    return foundItem ? true : false;
                }
            });
            Group().OBSGroup().push(groupItm);


        });
        return Group;
    };
    self.SelectFrom = function (avalailableOptions) {
        self.available = avalailableOptions;
        return self;
    };
    self.Into = function (selectedOptions) {
        self.selected = selectedOptions;
        return self;
    }
    // use this function to set a custom comparer for your object i.e. to compare to objects looking at CustomProperty you would call  .SetComparer(function (a, b) { return a.CustomProperty  == b.CustomProperty ; });
    self.SetComparer = function (compareFunction) // function that takes two object and return true if they are the same;
    {
        self.comparer = compareFunction;
    }
    self.SetGetDisplay = function (displayFunction) {  // function that takes an object and returns a string that represents into the control
        self.GetDisplayName = displayFunction;
    }

    self.CompareByIdx = function () {
        self.SetComparer(function (a, b) { return a.Idx == b.Idx; });
        return self;
    }
    self.UseDisplayName = function () {
        self.SetGetDisplay(function (item) { return item.DisplayName; });
        return self;
    };
    self.UseName = function () {
        self.SetGetDisplay(function (item) { return item.Name; });
        return self;
    };
    self.Label = function (LabelText) {
        Group().Label(LabelText);
        return self;
    };

    return self;
};


COMS.Controls.PartialView = COMS.Controls.PartialView || function (data,element, viewPath) {
   
    var self = this;
    var Data = ko.observable();
    if (!element) throw 'Element is required when dynamically loading content';
    $(element).load(viewPath, function () {
        ko.applyBindingsToDescendants(data, element);
    });
    return true;
};
//use this to control the viewer


COMS.Controls.PDFViewer = COMS.Controls.PDFViewer || function (url) {
    var self = this;
    self.requestURL = url();
    self.url = url;
    self.NativePDF = PDFObject.supportsPDFs;
    self.downloading = ko.observable(false);
    self.downloadReady = ko.observable(false);
    self.downloadPDF = function () {
        if (self.downloadReady() == true) {
            return;
        }

        if (self.downloading() != true) {
            self.downloading(true);
            $.ajax({
                type: 'GET',
                url: url(),
                contentType: 'application/json; charset=utf-8',
                cache: true,  // clientside caching
                mimeType: 'application/pdf',
                success: function (returnValue) {
                    self.downloading(false);
                    self.downloadReady(true);

                },
                error: function (request, status, error) {

                }
            });
        }
    }
    self.PDFVisiblility = function () {
        if (self.url() != self.requestURL) { // the URL has changed since we last downloaded. 
            self.requestURL = self.url();
            self.downloadReady(false);
        }
        self.downloadPDF(); // request PDF if not done.
        return self.downloadReady();
    }

    return self;
}

