var consistencyRulesForSection = '';
var assessId = '';
var stdAssessId = '';
var sectionCode = '';
var AUTO_POPULATE_ITEM_ID = '4111';
var clientId = '';

function setClientId(clientId)
{
	this.clientId = clientId;
}

function getClientId()
{
	return clientId;
}

function setConsistencyRulesForSection(rulesForSection) {
	consistencyRulesForSection = rulesForSection;
}

function getConsistencyRulesForSection() {
	return consistencyRulesForSection;
}

function setAssessId(assessId) {
	this.assessId = assessId;
}

function getAssessId() {
	return assessId;
}

function setStdAssessId(stdAssessId) {
	this.stdAssessId = stdAssessId;
}

function getStdAssessId() {
	return stdAssessId;
}

function setSectionCode(sectionCode) {
	this.sectionCode = sectionCode;
}

function getSectionCode() {
	return sectionCode;
}

function bindAutoPopulateToQuestions() {
	var autoPopulationQuestions = getListOfQuestionKeysWithAutoPopulationRules();
	for(var i = 0; i < autoPopulationQuestions.length; i++) {
		bindAutoPopulationToFormType(autoPopulationQuestions[i], true);
	}
}

function bindAutoPopulationToFormType(questionKey, removeWVRules) {	
	if(isHCK(questionKey)) {
		var $hckElement = $('#'+ questionKey + 'AnswerRow').find("[name=" + questionKey + "Z]");
 		$hckElement.each(function (i) {
 			$(this).on('click', function() {
 				runAutoPopulate(questionKey, $(this).html());
 			});
 		});
	}
	else if(isYesNoControl(questionKey)) {
		var $yesNoElement = $('#'+ questionKey + 'QuestionRow').find("[name=chk" + questionKey + "]");
		$yesNoElement.each(function(i) {
			$(this).on('click', function() {
				runAutoPopulate(questionKey, $(':hidden[name=' + questionKey + ']').val());
			});
		});
	}
	else if(isCalendarField(questionKey)) {
		// hidden elements need to have onchange triggered; this is done in mdssection.jsp functions : dateChange() and dateTimeChange()
		$(':hidden[name=' + questionKey + ']').on('change', function() {
			runAutoPopulate(questionKey, $(':hidden[name=' + questionKey + ']').val());
		});
	}
	else if(isWVControl(questionKey)) {
		if(!removeWVRules){
			$.ajax({
				url: '/care/chart/uda/autopopulate/controllers/regenerateConsistencyRules.xhtml',
				dataType: "json",
				type: "GET",
				data: {"assessId": getAssessId(), "stdAssessId": getStdAssessId(), "sectionCode" : getSectionCode()}
			}).done(function(data){
				setConsistencyRulesForSection(data);
				runRulesForWV(questionKey);
			});
		}
		else{
			setTimeout(function(){runRulesForWV(questionKey);});
		}
		// ignore and do not bind; runAutoPopulate is called in picklistpopup.jsp
	}
	else if (typeof getInputElement(questionKey).attr("data-cptype") !== "undefined")
	{
		val = $("#link" + questionKey).val();
		runRulesForCP(questionKey);
	}
	else if(isNumControl(questionKey) || isNumDeControl(questionKey)) 
	{
		var $inputElement = getInputElement(questionKey);
		$inputElement.on('blur', function() {
			val = $(this).val();
			if($inputElement.attr("type") == "checkbox") {
				if(this.checked == false) {
					val = '';
				}
			}
			runAutoPopulate(questionKey, val);
		});
	}
	else {
		var $inputElement = getInputElement(questionKey);
		$inputElement.on('click', function() {
			val = $(this).val();
			if($inputElement.attr("type") == "checkbox") {
				if(this.checked == false) {
					val = '';
				}
			}
			runAutoPopulate(questionKey, val);
		});
	}
}

function runRulesForCP(questionKey)
{
	if (getInputElement(questionKey).attr("data-cptype") == 'speIn')
	{
		qkey = "#link"+questionKey+"-1";
		val = $(qkey).val();
		runAutoPopulate(questionKey, val);
	}
	else
	{
		checkValueForCP(questionKey);
		$('input:checkbox[id^="link'+questionKey+'_"]').on('click', function()
			{
				checkValueForCP(questionKey);
			});
		
	}
}

function checkValueForCP(questionKey)
{
	val = $("#link" + questionKey).val();

	var rules = getRulesForQuestionKey(questionKey);
	for (var i = 0; i < rules.length; i++) {
		if(rules[i].ruleItemId === AUTO_POPULATE_ITEM_ID) {
			if ($('#' + rules[i].destinationQuestionKey + 'QuestionRow').is(":visible"))
			{
				sourceVal = rules[i].sourceValues;
				
				var itemVal = String(sourceVal).split(",");
				for (var j = 0; j < itemVal.length; j++)
				{
					if (val.indexOf("%"+itemVal[j]+"%", 0) >=0)
					{
						populated = populate(rules[i].destinationQuestionKey, rules[i].destinationValues);
						if(populated)
						{	
							showAcknowledgeSymbol(rules[i].destinationQuestionKey);
						}
						
						break;
					}
				}
				
			}
		}
	}
	
}


function runRulesForWV(questionKey) {
	var wvType = getInputElement(questionKey).attr("data-wvtype");
	if(wvType == 'bp'){
		var rules = getRulesForQuestionKey(questionKey);
		for(var i = 0; i < rules.length; i++) {
			if(rules[i].sourceQuestionKeyInfo == 'sys'){
				runAutoPopulate(questionKey, $("#link" + questionKey + "-1").val());
			}
			else if(rules[i].sourceQuestionKeyInfo == 'dias') {
				runAutoPopulate(questionKey, $("#link" + questionKey + "-2").val());
			}
		}
	}
	else{
		val = $("#link" + questionKey).val();
		value = val.substring(0, val.indexOf("<space>"));
		runAutoPopulate(questionKey, value);
	}
}

function getInputElement(questionKey) {
	var $element = $('#'+ questionKey + 'AnswerRow').find("[name=" + questionKey + "]");
	if($element === 'undefined' || $element.length == 0) {
		$element = $('#'+ questionKey + 'QuestionRow').find("[name=" + questionKey + "]");
	}
	return $element;
}

function getCheckedInputElement(questionKey) {
	return $('#'+ questionKey + 'AnswerRow').find("[name=" + questionKey + "]:checked");
}

function getValue(questionKey) {	
	var $inputElement = getInputElement(questionKey);
	var inputType = $inputElement.attr('type');
	if(inputType == 'radio' || inputType == 'checkbox') {
		return getCheckedInputElement(questionKey).val();
	}
	else {
		$inputElement.val();
	}
}

function getListOfQuestionKeysWithAutoPopulationRules() {
	if(!getConsistencyRulesForSection()) {
		return [];
	}
	var rulesForSection = getConsistencyRulesForSection().sectionConsistencyRules;
	var autoPopulationQuestions = [];
	for(var i = 0; i < rulesForSection.length; i++) {
		for(var t = 0; t < rulesForSection[i].rules.length; t++) {
			if(rulesForSection[i].rules[t].ruleItemId === AUTO_POPULATE_ITEM_ID) {
				if(!isAlreadyInArray(autoPopulationQuestions, rulesForSection[i].sourceQuestionKey)) {
					autoPopulationQuestions[autoPopulationQuestions.length] = rulesForSection[i].sourceQuestionKey;
					break;
				}
			}
		}
	}
	return autoPopulationQuestions;
}

function isAlreadyInArray(arrayValues, value) {
	return $.inArray(value, arrayValues) > -1;
}

function runAutoPopulate(questionKey, value) {
	var populated = false;
	var sourceValue = value; 
	var subjectQuestionKey = questionKey;
	var rules = getRulesForQuestionKey(subjectQuestionKey);
	for(var i = 0; i < rules.length; i++) {
		if(rules[i].ruleItemId === AUTO_POPULATE_ITEM_ID) {
			if ($('#' + rules[i].destinationQuestionKey + 'QuestionRow').is(":visible"))
			{
				if(isInRange(rules[i].sourceValues, sourceValue)) {
					populated = populate(rules[i].destinationQuestionKey, rules[i].destinationValues);
					if(populated)
					{	
						showAcknowledgeSymbol(rules[i].destinationQuestionKey);
					}
				}
			}
		}
	}
}

function getRulesForQuestionKey(subjectQuestionKey) {
	if(!getConsistencyRulesForSection()) {
		return [];
	}
	var consistencyRulesForSection = getConsistencyRulesForSection().sectionConsistencyRules;
	for(var i = 0; i < consistencyRulesForSection.length; i++) {
		if(consistencyRulesForSection[i].sourceQuestionKey == subjectQuestionKey) {
			return consistencyRulesForSection[i].rules;
		}
	}
	return [];
}

function isInRange(range, value) {
	for(var i = 0; i < range.length; i++) {
		if(range[i].indexOf('thru') >= 0) {
			var rangeSplit = range[i].split('thru');
			var min = rangeSplit[0].trim();
			var max = rangeSplit[1].trim();
			if(parseFloat(value) >= parseFloat(min) && parseFloat(value) <= parseFloat(max)) {
				return true;
			}
		}
		else if(range[i].indexOf('valid') >= 0) {
			if(!isBlank(value)) {
				return true;
			}
		}
		else if(range[i].indexOf('blank') >= 0 || range[i].indexOf('sp') >= 0) {
			if(isBlank(value)) {
				return true;
			}
		}
		else if(range[i] == value) {
			return true;
		}
	}
	return false;
}

function isBlank(str) {
	return !str.trim() || /^\s*$/.test(str);
}

function populate(destinationQuestionKey, values) {
	var updated = false;
	var populated = false;
	
	var valueChanged = checkIfValuesChanged(destinationQuestionKey, values);
	if(valueChanged)
	{
		for(var i = 0; i < values.length; i++) {
		 	updated = updateValues(destinationQuestionKey, values[i]);
		 	if(updated == true)
				populated = true;
		}
	}
	return populated;
}

function checkIfValuesChanged(destinationQuestionKey, values)
{
	var valueChanged = false;
	var inputValues =  new Array();
	
	if( $('[name="' + destinationQuestionKey +'"]').attr("type") == "radio")
		inputValues.push($('input:radio[name=' + destinationQuestionKey +']:checked').val());
	
	else if($('[name="' + destinationQuestionKey +'"]').attr("type") == "checkbox")
		{
		$('[name="' + destinationQuestionKey +'"]').each(function() 
				{    
				    if($(this).is(':checked'))
				    	inputValues.push($(this).val());
				});
		}
	else
		inputValues.push($('[name="' + destinationQuestionKey +'"]').val());
	
	if(inputValues.sort().join(',')!= values.sort().join(',')  && !checkArrayContainsAnother(inputValues,values))
		valueChanged = true;
		
	return valueChanged;
}

function checkArrayContainsAnother(inputValues, values)
	{
		var found = false;

		var l=values.length;

		for(var j=0;j<l;j++)
		{
			if($.inArray(values[j], inputValues) > -1)
				found = true;
			else
				{
				found = false;
				break;
				}
		}
	return found;
}
	
function showAcknowledgeSymbol(questionKey)
{
	var htmlString = "<a onfocus=\"ackLinkOnFocus(this)\" onblur=\"ackLinkOnBlur(this)\" id=\"link"
					+ "ack"+ questionKey + "\" class=qcheck href=\"javascript:questionReviewed('"+questionKey+"');\""
					+">&#8730;&nbsp;</a>";
	
	if($("#ack" + questionKey + "questionchecker").length>0 && $("#" + questionKey + "QuestionRow").is(':visible'))
	{ 
		$("#ack" + questionKey + "questionchecker").html(htmlString);
		$("#ack" + questionKey + "questionchecker").css('display','inline');
		$('[name="ack' + questionKey+'"]').val("N");
	}
}

function updateValues(questionKey, value) {
	var updated = true;
	if(isPopUpSearch(questionKey)){
		updated = updatePopUpControl(questionKey, value);
	}
	else if(isHCK(questionKey)){
		updated = updateHCKControl(questionKey, value);
	}
	else if(isYesNoControl(questionKey)) {
		updated = updateYesNoControl(questionKey, value);
	}
	else {
		var $inputElement = getInputElement(questionKey);
		if($inputElement.length == 0 || $inputElement.is(":disabled") || !($inputElement.css("display") != "none")) {
			updated = false;
			return;
		}
		if($inputElement.attr("type") == "checkbox" || $inputElement.attr("type") == "radio") {
			updateRadioOrCheckBoxControl($inputElement, value);
		}
		else {
			if (isPccDateField($inputElement)) {
				$inputElement.data().dateField.setValue(value);
			} else {
				var $dummyInput = $("#" + $inputElement.attr("id") + "_dummy");
				if ($dummyInput.length) {
					var dateTokens = value.split(" ");
					var localizedDate = PCC.l10n.dateTime.internalDateToUserDate(dateTokens[0]);
					var time = dateTokens.length >= 2 ? dateTokens[1] : "";
					$dummyInput.val(localizedDate + " " + time);
					$inputElement.trigger('change');
				}
				$inputElement.val(value);
				$inputElement.trigger('click');
				$inputElement.trigger('change');
			}
		}
	}
	return updated;
}

function updateHCKControl(questionKey, value) {
	var updated = true;
	var $hiddenHckElement = $('#'+ questionKey + 'AnswerRow').find("[id^=selectionValue_]");
	if($hiddenHckElement.is(":disabled") || !$("#hckTable" + questionKey).is(':visible')) {
		updated = false;
		return;
	}	
	$hiddenHckElement.each(function (i) {
		if ($(this).val() == value) {	   		
   		var regex = new RegExp("selectionValue_(\\d+)_" + questionKey, "g");
   		var match = regex.exec($(this).attr("id"));
   		var NUMBER_OF_ELEMENTS_PAIRED_IN_TABLE = 2;
   		var childNumber = (match[1]*NUMBER_OF_ELEMENTS_PAIRED_IN_TABLE)+1;
   		var $hckElement = $("#hckTable" + questionKey).find("#hckrow").find("td:nth-child(" + childNumber + ")").get(0);
   		$hckElement.click();
   	}
  });
  return updated;
}

function updatePopUpControl(questionKey, value) {
	var updated = true;
	if($('#link' + questionKey).is(":disabled") || !$('#link' + questionKey).is(':visible')) {
		updated = false;
		return;
	}
	var stdAssessId = getConsistencyRulesForSection().stdAssessId;
	$.getJSON("/care/chart/uds/autopopulate/controllers/getPickListItem.xhtml",
	  {"stdAssessId": stdAssessId, "questionKey": questionKey, "itemValue": value},
	  function(data) {
		 $('#link' + questionKey).val(value);
		 $('#link' + questionKey + 'DESC').val(data.pickListItem.description);
	  }			   
	);
	runAutoPopulate(questionKey, value);
	return updated;
}

function updateYesNoControl(questionKey, value) {	
	var updated = true;
	if($('#link' + questionKey).is(":disabled") || !$('#link' + questionKey).is(':visible')) {
		updated = false;
		return;
	}
	if (1 == value) { 
		$('#link' + questionKey).each(function(){ 
			if(this.checked != true) {
				  this.click();
			}
		});
 	}
 	else {
	  $('#link' + questionKey).each(function(){ 
		  if(this.checked != false) {
			  this.click();
		  }
		});
 	}
 	
 	return updated;
}

function updateRadioOrCheckBoxControl($inputElement, value) {
  	$inputElement.each(function (i) {
    	if ($(this).val() == value) {
    		if(this.checked == false) {
    			this.click();
    		}
    		$(this).trigger('change');
    	}
  	});
}

function isHCK(questionKey) {
	var $element = $('#'+ questionKey + 'AnswerRow').find("#hckrow");
	return (typeof $element.val() !== "undefined");
}

function isYesNoControl(questionKey) {
	var $element = $('#'+ questionKey + 'QuestionRow').find("[name=chk" + questionKey + "]");
	return (typeof $element.val() !== "undefined");
}

function isNumControl(questionKey) {
	return getInputElement(questionKey).attr("control-type") !== "undefined" && getInputElement(questionKey).attr("control-type") == "num";
}

function isNumDeControl(questionKey) {
	return getInputElement(questionKey).attr("control-type") !== "undefined" && getInputElement(questionKey).attr("control-type") == "numde";
}

function isPopUpSearch(questionKey) {
	var $element = $("#" + questionKey + "PopSearch1");
	return (typeof $element.val() !== "undefined");
}

function isCalendarField(questionKey) {
	var $element = $("#" + questionKey + "Calendar");
	return (typeof $element.val() !== "undefined");
}

function isWVControl(questionKey) {
	var $inputElement = getInputElement(questionKey);
	return (typeof $inputElement.attr("data-wvtype")!== "undefined");
}

function isPainLevelControl(questionKey)
{
	var $inputElement = getInputElement(questionKey);
	return (typeof $inputElement.attr("data-pnltype")!== "undefined");
}

function isCPControl(questionKey)
{
	var $inputElement = getInputElement(questionKey);
	return (typeof $inputElement.attr("data-cptype")!== "undefined");
}

function refreshCareProfile(qKey, type)
{
	clientId = getClientId();
	
	picklist = "";
	if ($("#"+qKey+"_cp_picklist").length)
	{
		picklist = $("#"+qKey+"_cp_picklist").val();
	}
	
	
    if(clientId && clientId != -1 && clientId != -9999)
    {
      var ajaxControllerUrl = '/clinical/resident/getCareProfile.xhtml';
        $.getJSON(ajaxControllerUrl, 
        		{"clientId": clientId, "careProfileType": type, "questionKey": qKey, "picklist": picklist},
          function(data)
          {
        			resp = data.careProfile;
        			
        			// clear response
        			$("[id^="+qKey+"_]").each(function(index, i)
        			{
        				eleId = $(this).attr("id");
        				eleType = $(this).attr("type");
        				
        				if (eleType == "checkbox" || eleType == "radio")
        				{
        					$(this).prop('checked', false);
        				}
        				else if (eleType == "text")
        				{
        					$(this).val("");
        				}
        				
        			});
        			
        			// set response
        			$.each(resp, function(key, value) 
        			{
        				eleType = $("#"+key).attr("type");
        				
        				if (eleType == "checkbox" || eleType == "radio")
        				{
        					$("#"+key).prop('checked', true);
        				}
        				else if (eleType == "text")
        				{
        					$("#"+key).val(value);
        				}
        				else if (key == qKey)
        				{
        					$("#"+key).val(value);
        				}
        			});
        			
        			target = data.javascript;
        			window[target](qKey);
        			
          }
        );
    }
}

function pickInsurance(qkey)
{
   openSizedLookup2("/crm/pickinsurance.jsp?ESOLqkey="+qkey+"&ESOLclientid="+frmData.ESOLclientid.value,"picinsurance",600,400,"");
}
