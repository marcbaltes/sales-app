'use strict';

(function() {
  window.clinicalSmartAlerts = window.clinicalSmartAlerts || {};
  var _NS = clinicalSmartAlerts;
	
  _NS.SuggestionsSubComponent = function(store, selector, cardComponent) {
	
    _NS.StatefulComponent.call(this, { store:store, selector: selector });
    
    this.checkboxTemplate = document.querySelector('#tmpl-csa-alert-card-checkbox');
	
    this.cardComponent = cardComponent; // reference back to parent cardComponent
  	this.element = $(this.cardComponent.element).find(selector.split(' ')[1]);
  	
  	this._checkboxes = null;
  	this._addCheckboxes();
  };
  
  _NS.SuggestionsSubComponent.prototype = Object.create(_NS.StatefulComponent.prototype);
  _NS.SuggestionsSubComponent.prototype.constructor = _NS.SuggestionsSubComponent;

  _NS.SuggestionsSubComponent.prototype.render = function() {};
  
  _NS.SuggestionsSubComponent.prototype.getSmartAlertActionVOs = function() {
    var _self = this;
    var smartAlertSaveActionVOs = {};
    smartAlertSaveActionVOs.carePlanItemVOs = [];
    for(var i = 0; i < _self._checkboxes.length; i++) {
      var checkbox = $(_self._checkboxes[i]);
      if(checkbox.parent().hasClass('js-assessment-create-wrapper') && checkbox.is('label:has(input:checked:enabled)')) {
        smartAlertSaveActionVOs.eInteractAssessmentSaveActionVO = this._buildSmartAlertSaveActionVO(function() {
          var element = $(_self.cardComponent.element);
          var assessmentSection = checkbox.parent();
          var date = _self._getEffectiveDate();
          
          var cicReasons = [];
          assessmentSection.find('.chzn-select').find(':selected').each(function(i, domEl) {
            cicReasons.push($(domEl).attr('value'));
          });
          
          var SWdescs = element.attr('data-stop-and-watch-alert-descs') ? JSON.parse(element.attr('data-stop-and-watch-alert-descs')) : [];
          
          var otherCICDesc = assessmentSection.find('.c-cic-other-symptoms-input').val() || '';
          
          return {
            action: 'CREATE_EINTERACT_ASSESSMENT',
            einteractAssessment: {
              referenceDate: date,
              cicReasons: cicReasons,
              stopAndWatchDescriptions: SWdescs,
              otherReason: otherCICDesc
            }
          };
        });
      }
      else if(checkbox.parent().hasClass('js-create-pn-wrapper') && checkbox.is('label.pn-create:has(input:checked:enabled)')) {
        smartAlertSaveActionVOs.progressNoteSaveActionVO = this._buildSmartAlertSaveActionVO(function () {
          var element = $(_self.cardComponent.element);
            
          var notes = [];
          element.find('textarea').each(function(i,e){
            notes.push(e.value);
          });
          
          return {
            action: 'CREATE_PROGRESS_NOTE',
            progressNote: {
              wvType: element.data('vitalType'),
              module: element.data('module'),
              notes: notes
            }
          };
        });
      }
      /*else if(checkbox.parent().hasClass('js-suggested-care-plan-section') && checkbox.is('label:has(input:checked:enabled)')) {
        if(checkbox.attr('data-suggestion-type') == '1') {
          var carePlanItemVO =  this._buildSmartAlertSaveActionVO(function() {
            return {
              action: 'CREATE_FOCUS_ON_CARE_PLAN',
              carePlanItem : {
                itemId: checkbox.attr('data-item-id')
              }
            };
          });
          smartAlertSaveActionVOs.carePlanItemVOs.push(carePlanItemVO);
        }
        else if(checkbox.attr('data-suggestion-type') == '2') {
          var carePlanItemVO =  this._buildSmartAlertSaveActionVO(function() {
            return {
              action: 'CREATE_GOAL_ON_CARE_PLAN',
              carePlanItem : {
                itemId: checkbox.attr('data-item-id')
              }
            };
          });
          smartAlertSaveActionVOs.carePlanItemVOs.push(carePlanItemVO);
        }
        else if(checkbox.attr('data-suggestion-type') == '3') {
          var carePlanItemVO =  this._buildSmartAlertSaveActionVO(function() {
            return {
              action: 'CREATE_INTERVENTION_ON_CARE_PLAN',
              carePlanItem : {
                itemId: checkbox.attr('data-item-id')
              }
            };
          });
          smartAlertSaveActionVOs.carePlanItemVOs.push(carePlanItemVO);
        }
      }
      else if(checkbox.parent().hasClass('js-suggested-task-section') && checkbox.is('label:has(input:checked:enabled)')) {
        var carePlanItemVO =  this._buildSmartAlertSaveActionVO(function() {
          return {
            action: 'CREATE_TASK_ON_CARE_PLAN',
            carePlanItem : {
              itemId: checkbox.attr('data-item-id')
            }
          };
        });
        smartAlertSaveActionVOs.carePlanItemVOs.push(carePlanItemVO);
      }
      else if(checkbox.parent().hasClass('js-suggested-vitals-section') && checkbox.is('label:has(input:checked:enabled)')) {
      // Not Implemented
      // smartAlertSaveActionVOs.progressNoteSaveActionVO = this._buildSmartAlertSaveActionVO('!SOME_ENUM_VALUE!');
      }*/
    }
    return smartAlertSaveActionVOs;
  };

  _NS.SuggestionsSubComponent.prototype.isCreatePNActive = function() {
    return this._checkboxes.is('label.pn-create:has(input:checked:enabled)');
  };

  _NS.SuggestionsSubComponent.prototype.isCreateAssessmentActive = function() {
    return this._checkboxes.parent('.js-assessment-create-wrapper').is(':has(label > input:checked:enabled)');
  };
  
  _NS.SuggestionsSubComponent.prototype.uncheckAll = function() {
    this._checkboxes.find('input').prop('checked', false);
  };

  _NS.SuggestionsSubComponent.prototype._initHandlers = function() {
    var _self = this;
    $(this.element)
    .on('click.toggleSaveCancelButtons', 'label.c-custom-checkbox', function(e) {
      if(e.target !== e.currentTarget && !$(e.target).is('span.c-custom-checkbox__checkmark')) {
        // the input child of label.c-custom-checkbox triggers this event
        return;
      }
      // read-only pn-view should not alter visibility of save/cancel buttons
      if($(e.target).hasClass('pn-view')) {
        return;
      }
      var show = false;
      for(var i = 0; i < _self._checkboxes.length; i++) {
        if($(_self._checkboxes[i]).is('.pn-view:visible')) {
          return;
        }
        if($(_self._checkboxes[i]).find('input').is(':checked') && $(e.target).closest('label')[0] != _self._checkboxes[i] ||
          $(_self._checkboxes[i]).find('input').is(':not(:checked)') && $(e.target).closest('label')[0] == _self._checkboxes[i]) {
          show = true;
          break;
        }
      }

      _self.toggleSaveCancelButtons(show);
    });
  };
  
  _NS.SuggestionsSubComponent.prototype._addCheckboxes = function() {
    var _self = this;
    var alertId = $(_self.cardComponent.element).data('alertId');
    var carePlanWrapper = _self.element.find('.js-suggested-care-plan-section');
    var taskWrapper = _self.element.find('.js-suggested-task-section');
    var vitalsWrapper = _self.element.find('.js-suggested-vitals-section');
    var assessmentWrapper = _self.element.find('.js-suggested-assessment-section');

    var otherSuggestions = _self.element.find('div.suggestions-section ul.other-suggestions');
    
    $.getJSON('/clinical/alerts/smart/getalertsuggestions.xhtml', {
      alertId : alertId
    })
    .done(function (data) {
      for(var i = 0; i < data.length; i++) {
        var tmpl = _self.checkboxTemplate.innerHTML;
        
        // Skip Progress Note(5) and Care Pathways(6) for now
        if(data[i].suggestionTypeId >= 1 && data[i].suggestionTypeId <= 7 && data[i].suggestionTypeId !== 5 && data[i].suggestionTypeId !== 6) {
          tmpl = 
            tmpl.replace('{{checkbox_label}}', data[i].itemText)
            .replace('{{suggestion_type}}', data[i].suggestionTypeId)
            .replace('{{item_id}}', data[i].itemId);
          if(data[i].suggestionTypeId === 1 || data[i].suggestionTypeId === 2 || data[i].suggestionTypeId === 3) {
            carePlanWrapper.append(tmpl);
          }
          else if(data[i].suggestionTypeId === 4) {
            taskWrapper.append(tmpl);
          }
          else if(data[i].suggestionTypeId === 7) {
            assessmentWrapper.append(tmpl);
          }
        }
        else if(data[i].suggestionTypeId === 8) {
          var li = document.createElement('li');
          $(li).text(data[i].itemText);
          otherSuggestions.append(li);
        }
      }
    })
    .fail(function (data) {
      // TODO: What to do on failure -- nothing?
    })
    .always(function(data) {
      _self._checkboxes = $(_self.element).find('label.c-custom-checkbox');
      _self._initHandlers();
    });
  };
  
  _NS.SuggestionsSubComponent.prototype._buildSmartAlertSaveActionVO = function(callback) {
    var element = $(this.cardComponent.element);
    var groupedAlertIds = element.data('groupedAlertIds');

    if(typeof groupedAlertIds == 'number') {
      groupedAlertIds = [groupedAlertIds];
    }
    else if(groupedAlertIds === '') {
      groupedAlertIds = [element.data('alertId')];
    }
    else {
      groupedAlertIds = groupedAlertIds.split(',');
    }

    var smartAlertSaveActionVO =  {
      clientId: element.data('clientId'),
      alerts: {
        type: element.data('alertType'),
        alertIds: groupedAlertIds
      }
    };
    
    var data = callback();
    smartAlertSaveActionVO.action = data.action;
    smartAlertSaveActionVO.progressNote = data.progressNote;
    smartAlertSaveActionVO.einteractAssessment = data.einteractAssessment;
    smartAlertSaveActionVO.carePlanItem = data.carePlanItem;

    return smartAlertSaveActionVO;
  };
  
  _NS.SuggestionsSubComponent.prototype.validateEffectiveDate = function() {
    // Assessment effective date can't be in the future
    if(this._parseDate(this._getEffectiveDate()) > Date.now()) {
      this.element.find('.js-effective-date-error').removeClass('u-hidden');
      return false;
    }
    else {
      this.element.find('.js-effective-date-error').addClass('u-hidden');
      return true;
    }
  };

  _NS.SuggestionsSubComponent.prototype._parseDate = function(effectiveDate) {
    var effectiveDateArr = effectiveDate.split(' ');
    var _date = effectiveDateArr[0];
    var _time = effectiveDateArr[1];
    var dateArr = _date.split('/');
    var timeArr = _time.split(':');

    var assessDate = new Date();
    assessDate.setMonth(dateArr[0] - 1, dateArr[1]);
    assessDate.setFullYear(dateArr[2]);
    assessDate.setHours(timeArr[0]);
    assessDate.setMinutes(timeArr[1]);
    assessDate.setSeconds(0);
    assessDate.setMilliseconds(0);

    return assessDate;
  };

  _NS.SuggestionsSubComponent.prototype._getEffectiveDate = function() {
      var cardElem = $(this.cardComponent.element);
      var id = cardElem.data('alertId');
      var datePicker = this.element.find('#qtf-effective-date-' + id);
  
      var date = datePicker.attr('value');
      if(date[1] === '/') {
        date = '0' + date;
      }
      date += ' ' + this.element.find('#qtf-effective-hour-' + id).find(':selected').text();
      date += ':' + this.element.find('#qtf-effective-minute-' + id).find(':selected').text();
      
      return date;
  };
  
  _NS.SuggestionsSubComponent.prototype.toggleSaveCancelButtons = function(show) {
    var element = $(this.element);
    if(show) {
      element.find('.js-button-save-interactive-suggestions').show();
      element.find('.js-button-cancel-interactive-suggestions').show();
    }
    else {
      element.find('.js-button-save-interactive-suggestions').hide();
      element.find('.js-button-cancel-interactive-suggestions').hide();
    }
  }
  
}());
