function setLastUpdatedField(param)
	{
		if(typeof param.id==='undefined' && typeof param.name==='undefined' )
		{
			$("#lastUpdateField").val(param);	
			$("#lastUpdateFieldfrmData").val(param);
		}
		else
		{
			var field=param.id;
			if(field=='undefined' || field=='' )
			 {
			  field=param.name;
			 }
			 $("#lastUpdateField").val(field);
		}
	}

function setRadioButton(formName,elemName,index,state){
	var radioButton = getRadioButton(formName,elemName,index);
	if(radioButton != null && typeof(radioButton) != 'undefined'){
		radioButton.checked=state;
	}
}

function getRadioButton(formName,elemName,index){
	if(document.forms[formName]){
		var allRadioButtons = document.forms[formName].elements[elemName];
		if(allRadioButtons){
			if(typeof(allRadioButtons.length) == 'undefined'){
				return allRadioButtons;
			}
			else {
				if(allRadioButtons[index]){
					return allRadioButtons[index];
				}
			}
		}
	}
	return null;
}

function toggleCustomer(checkboxd, customerSpanId, disableToggleEditLink)
{
	if(disableToggleEditLink=="F") {
		if ($("#"+checkboxd).prop('checked')) {
			$("#"+customerSpanId).show();
		}
		else {
			$("#"+customerSpanId).hide();
		}
	}
}

// Removes dynamically added rows for section U
function removeMedRows()
{
	var table = document.getElementById("medication_table");
	while (insertedRow > startRow)
	{
		table.deleteRow(insertedRow-1);
		insertedRow--;
		medCount--;
	}
}

// Adds the key to the list of dynamic questions added - CM16062
function addKey(key)
{
	if (mdsData.ESOLquestadded.value != "")
	{
		mdsData.ESOLquestadded.value += ",";
	}
	mdsData.ESOLquestadded.value += key;
}

function regenTriggers()
{
	frmData.ESOLregeneratetriggers.value = "Y";
	frmData.submit();
}

function navFocus (obj)
{
	navclass = obj.className;
	if (!navigating)
		obj.className = "focus";
}

function navBlur (obj)
{
	obj.className = navclass;
}

function deactivate()
{
	clearInterval (MyInterval);
}

function updateUDAProfile(qKey)
{
	var obj = document.getElementById(qKey);

	var hidden = document.getElementById("hidden"+qKey);

	if(hidden!=null && obj!=null)
	{
		obj.value = hidden.innerHTML;

		var count=1;
		obj = document.getElementById(qKey+"-"+count);
		while(obj!=null)
		{
			count++;
			obj.value = hidden.innerHTML;
			obj = document.getElementById(qKey+"-"+count);
		}
	}

	obj = document.getElementById("refresh"+qKey.substring(4,qKey.length));
	if(obj!=null)
		obj.style.background="";
}


function updateAllergyFields(allergies, hiddenFieldId) {
	var allergyElement = document.getElementById('allergy');
	var hiddenField = document.getElementById(hiddenFieldId);
	hiddenField.value = allergies;
	allergyElement.value = allergies;
	updateAllergyCheckBox();
}

function updatePPQuestion(questionKey, response, controlType)
{
	if(response.length == 0) {
		return;
	}
		
	var qKey = "link" + questionKey;

	for (var i = 0; i < response.length; i++) {
		var inputId = "#" + qKey + (i == 0 ? "" : "-" + i);
		var $input = $(inputId);	
		if ($input.length) {
			var responseValue = response[i];
			if (isPccDateField($input)) {
				$input.data().dateField.setValue(responseValue);
			} else if ($input.hasClass("udapp-date")) {
				var $dummyInput = $(inputId + "_dummy");
				if ($dummyInput.length) {
					var dateTokens = responseValue.split(" ");
					var localizedDate = PCC.l10n.dateTime.internalDateToUserDate(dateTokens[0]);
					var time = dateTokens.length >= 2 ? dateTokens[1] : "";
					
					$dummyInput.val(localizedDate + " " + time);
					$dummyInput.trigger("change");
				}
				$input.val(responseValue);
				$input.trigger('change');
			} else {
				$input.val(responseValue);
				$input.trigger('change');
			}
		}
	}
	bindAutoPopulationToFormType(questionKey, false);
}

function checkCCRSAA8()
{
	if (mdsData.AA8 && mdsData.AA8.value == '')
	{
		alert("AA8 cannot be blank");
		return false;
	}
	return true;
}
function checkMDSAA8a()
{
	if (mdsData.AA8a && mdsData.AA8a.value == '')
	{
		alert("AA8a cannot be blank");
		return false;
	}
	return true;
}
function checkMDSA8a()
{
	if (mdsData.A8a && mdsData.A8a.value == '')
	{
		alert("A8a cannot be blank");
		return false;
	}
	return true;
}

function setHasCICUnacknowledgedNotifications(val)
{
	hasCICUnacknowledgedNotifications = val;
}

function chkBoxPostFactoOnclick(xElement)
{
	if (xElement.type === "checkbox" &&	xElement.name.indexOf("chk") === 0)
	{
		var hName = xElement.name.substring(3);
		var hFormObjs =  $(mdsData).find("input:hidden[name=" + hName + "]");
		if (hName.length > 0 && hFormObjs.length > 0 && typeof xElement.onclick === 'function')
		{
			var faugScope = {}; // Workaround IE auto-global problem.
			faugScope[hName] = hFormObjs[0];
			with (faugScope) {
				try {xElement.onclick();} catch(e) {/*console.log(e);*/}
			}
		}
	}
}

function checkboxOnClick(chkObj, hiddenObj)
{
	if (chkObj.checked)
		hiddenObj.value="1";
	else
		hiddenObj.value="0";
}

function toggleDependentTextArea(checkBoxQuestionElement, textAreaQuestionElement)
{
	if ($(checkBoxQuestionElement).prop('checked'))
	{
		$(textAreaQuestionElement).removeAttr('disabled');
	}
	else
	{
		$(textAreaQuestionElement).attr('disabled','disabled');
		$(textAreaQuestionElement).val('');
	}
}

function toggleDependentTextAreaWithMagnifyGlassIcon(checkBoxQuestionElement, textAreaQuestionElement)
{
	toggleDependentTextArea(checkBoxQuestionElement, textAreaQuestionElement);

	if ($(checkBoxQuestionElement).prop('checked'))
	{
		 $(textAreaQuestionElement).siblings("a", 0).css('display','inline');
		 $(textAreaQuestionElement).siblings("span", 0).css('display','inline');
	}
	else
	{
		 $(textAreaQuestionElement).siblings("a", 0).css('display','none');
		 $(textAreaQuestionElement).siblings("span", 0).css('display','none');
	}
}

function selectValue(selectedTDObj,hiddenResponseName,pickIndex)
{
	// A note from your friendly neighbourhood cross-browser maintenance guy:
	// This function is IE-only. You see that "hiddenResponseObj" argument, up
	// there, in the argument list? Yeah, that one. A bit back, somebody decided
	// that it'd be a great idea to pass in an element directly into this
	// function. Not by reference, not by string. DIRECTLY. By its NAME.
	// What does this mean for you?
	// It means that this function is broken at the argument-level. No amount
	// of jQuery or other clever coding is going to fix this. Yup, sucks, but
	// it is what it is.
	// Carry on, now, netizen.

	// Now it is Cross-Browser [RickM]

	//if hidden field is disabled, prevent user from setting hck component value
	hiddenResponseObj = $('input[name="'+ hiddenResponseName +'"]').get(0);
	if (hiddenResponseObj.disabled == false) //CM7340 moved here
	{
		$("[id='"+selectedTDObj.id+"']").attr("class", "off");
		selectedTDObj.className="on";
		if(typeof(pickIndex) != 'undefined')
		{
			hiddenResponseObj.value= $('#selectionValue_'+pickIndex+'_'+hiddenResponseName).val().replace(/&quot;/g, '"');
		}
		else
		{
			hiddenResponseObj.value= '-';
		}
	}
}

function hideDemoChange(isEffectiveDate){
	var is00Exist = false;
	var elSel = document.getElementById('linkAA8');
	if(elSel != null){
	  var i;
	  for (i = elSel.length - 1; i>=0; i--) {
	      if(elSel.options[i].value == '00'){
	    	  is00Exist = true;
	    	  if(isEffectiveDate)
	    	  	elSel.remove(i);
	      }
	  }

	  if(is00Exist == false && !isEffectiveDate){
		  if (elSel.selectedIndex >= 0) {
			  var elOptNew = document.createElement('option');
			   elOptNew.text = '00. Resident demographic change information';
			   elOptNew.value = '00';
			   elSel.add(elOptNew);
	  	}
	  }
	}
}

function hideAA8ForCorrectionAssess(assessType){

	var elSel = document.getElementById('linkAA8');
	if(elSel != null){
	  var i;
	  for (i = elSel.length - 1; i>=0; i--) {
	      if((assessType == 'AM' || assessType == 'Y') &&
	    		  (elSel.options[i].value == '05' || elSel.options[i].value == '06' ||
	   	    		   elSel.options[i].value == '07' || elSel.options[i].value == '08' ||
	   	    		   elSel.options[i].value == '08' || elSel.options[i].value == '09' ||
	   	    		   elSel.options[i].value == '10' || elSel.options[i].value == '17' ||
	   	    		   elSel.options[i].value == '18')){
	    	  		elSel.remove(i);
	      }else if(assessType == 'Q' && (elSel.options[i].value == '01' || elSel.options[i].value == '02' ||
	    		   elSel.options[i].value == '03' || elSel.options[i].value == '04' ||
	    		   elSel.options[i].value == '06' || elSel.options[i].value == '07' ||
	    		   elSel.options[i].value == '08' || elSel.options[i].value == '09' ||
	    		   elSel.options[i].value == '17' || elSel.options[i].value == '18')){
	    		 elSel.remove(i);
	      }
	  }

	}
}

function disableCustE2Question()
{
    $("#linkCust_E_2_a").prop("checked", false);
    $("#linkCust_E_2_b").prop("checked", false);
    $("#linkCust_E_2_c").prop("checked", false);
    $("#linkCust_E_2_d").prop("checked", false);
    $("#linkCust_E_2_e").prop("checked", false);
    $("#linkCust_E_2_f").prop("checked", false);
    $("#linkOtherCust_E_2_g").prop("checked", false);
    $("#linkCust_E_2_g").val("");
	
    $("#linkCust_E_2_a").attr("disabled", true);
    $("#linkCust_E_2_b").attr("disabled", true);
    $("#linkCust_E_2_c").attr("disabled", true);
    $("#linkCust_E_2_d").attr("disabled", true);
    disableCustE2DQuestion();
    $("#linkCust_E_2_e").attr("disabled", true);
    $("#linkCust_E_2_f").attr("disabled", true);
    $("#linkOtherCust_E_2_g").attr("disabled", true);
    $("#linkCust_E_2_g").attr("disabled", true);
}

function enableCustE2Question()
{
    $("#linkCust_E_2_a").removeAttr("disabled");
    $("#linkCust_E_2_b").removeAttr("disabled");
    $("#linkCust_E_2_c").removeAttr("disabled");
    $("#linkCust_E_2_d").removeAttr("disabled");
    toggleCustE2DQuestion();
    $("#linkCust_E_2_e").removeAttr("disabled");
    $("#linkCust_E_2_f").removeAttr("disabled");
    $("#linkOtherCust_E_2_g").removeAttr("disabled");
}

function disableCustE2DQuestion()
{
    $("#linkCust_E_2_da").prop("checked", false);
    $("#linkCust_E_2_db").prop("checked", false);
    $("#linkCust_E_2_dc").prop("checked", false);
    $("#linkCust_E_2_dd").prop("checked", false);
    $("#linkOtherCust_E_2_de").prop("checked", false);
    $("#linkCust_E_2_de").val("");
	
    $("#linkCust_E_2_da").attr("disabled", true);
    $("#linkCust_E_2_db").attr("disabled", true);
    $("#linkCust_E_2_dc").attr("disabled", true);
    $("#linkCust_E_2_dd").attr("disabled", true);
    $("#linkOtherCust_E_2_de").attr("disabled", true);
    $("#linkCust_E_2_de").attr("disabled", true);
}

function enableCustE2DQuestion()
{
    $("#linkCust_E_2_da").removeAttr("disabled");
    $("#linkCust_E_2_db").removeAttr("disabled");
    $("#linkCust_E_2_dc").removeAttr("disabled");
    $("#linkCust_E_2_dd").removeAttr("disabled");
    $("#linkOtherCust_E_2_de").removeAttr("disabled");
}

function disableCustC7Question()
{
    $("#linkCust_C_7_a").prop("checked", false);
    $("#linkCust_C_7_b").prop("checked", false);
    $("#linkCust_C_7_c").prop("checked", false);
    $("#linkCust_C_7_d").prop("checked", false);
    $("#linkCust_C_7_e").prop("checked", false);
	
    $("#linkCust_C_7_a").attr("disabled", true);
    $("#linkCust_C_7_b").attr("disabled", true);
    $("#linkCust_C_7_c").attr("disabled", true);
    $("#linkCust_C_7_d").attr("disabled", true);
    $("#linkCust_C_7_e").attr("disabled", true);
}

function enableCustC7Question()
{
    $("#linkCust_C_7_a").removeAttr("disabled");
    $("#linkCust_C_7_b").removeAttr("disabled");
    $("#linkCust_C_7_c").removeAttr("disabled");
    $("#linkCust_C_7_d").removeAttr("disabled");
    $("#linkCust_C_7_e").removeAttr("disabled");
}

function toggleCustE2DQuestion()
{
    if ($("input[name='chkCust_E_2_d']").is(':checked') == true)
    {
        enableCustE2DQuestion();
    }
    else
    {
        disableCustE2DQuestion();
    }
}

function disableCustC6CQuestion()
{
	jQuery("input[name='Cust_C_6_b']").each(function(i) {
        jQuery(this).attr('disabled', 'disabled');
        jQuery(this).prop("checked", false);
    });
	
	disableCustC7Question();
}

function enableCustC6CQuestion()
{
  jQuery("input[name='Cust_C_6_b']").each(function(i) {
        jQuery(this).removeAttr("disabled");
    });
}

function toggleRadioButtonTextArea(radioButtonName, textAreaId, itemValue)
{
	if ($("input:radio[name='" + radioButtonName + "']:checked").val() == itemValue ||
			!($("input:radio[name='" + radioButtonName + "']:checked").val()))
	{
		$("#" + textAreaId + "").val("");
	  $("#" + textAreaId + "").prop("disabled", true);
	}
	else
		$("#" + textAreaId + "").prop("disabled", false);
}

function toggleQIQuestion()
{
	$("#linkCust_D_1_a").attr("readonly", true);
	toggleRadioButtonTextArea("Cust_A_4_a", "linkCust_A_4_b", "2");
	toggleRadioButtonTextArea("Cust_A_5_a", "linkCust_A_5_b", "2");
	toggleRadioButtonTextArea("Cust_E_3_a", "linkCust_E_3_b", "0");
  toggleRadioButtonTextArea("Cust_E_4_a", "linkCust_E_4_b", "0");
	  
	if ($("input:radio[name='Cust_E_1_a']:checked").val() == '1')
	  enableCustE2Question();
	else
	  disableCustE2Question();
	  
	if ($("input:radio[name='Cust_C_6_a']:checked").val() == '1')
	  enableCustC6CQuestion();
	else
	  disableCustC6CQuestion();
	    
	if ($("input:radio[name='Cust_C_6_b']:checked").val() == '1')
	  enableCustC7Question();
	else
	  disableCustC7Question();
	  
	toggleCustE2DQuestion();
	  
	$("input[name='Cust_A_4_a']").on("change", function(){
	 	toggleRadioButtonTextArea("Cust_A_4_a", "linkCust_A_4_b", "2");
	});
	        
	$("input[name='Cust_A_5_a']").on("change", function(){
	 	toggleRadioButtonTextArea("Cust_A_5_a", "linkCust_A_5_b", "2");
	});
	      
	$("input[name='Cust_E_3_a']").on("change", function(){
	  toggleRadioButtonTextArea("Cust_E_3_a", "linkCust_E_3_b", "0");
	});
	          
	$("input[name='Cust_E_4_a']").on("change", function(){
	  toggleRadioButtonTextArea("Cust_E_4_a", "linkCust_E_4_b", "0");
	});
	              
	$("input[name='chkCust_E_2_d']").on("change", function(){
	  toggleCustE2DQuestion();
	});
	  
	$("input[name='Cust_E_1_a']").on("change", function(){
	  if (this.value == '1')
	  {
	    enableCustE2Question();
	  }
	  else
	  {
	    disableCustE2Question();
	  }
	});
	    
	$("input[name='Cust_C_6_a']").on("change", function(){
	  if (this.value == '1')
	  {
	    enableCustC6CQuestion();
	  }
	  else
	  {
	    disableCustC6CQuestion();
	  }
	});

	$("input[name='Cust_C_6_b']").on("change", function(){
	  if (this.value == '1')
	  {
	    enableCustC7Question();
	  }
	  else
	  {
	    disableCustC7Question();
	  }
	});
}

function toggleCICMessage(jqObject, triggerShowValue)
{
	if (jqObject.length > 0)
	{
		var name = jqObject.attr('name');
		var id = 'showCICMessage_'+ name;
		if (triggerShowValue == jqObject.val())
		{
			$('#'+id).show();
		}
		else
		{
			$('#'+id).hide();
		}
	}
}

function createCICMessage(jqObject, triggerShowValue, message)
{
	if (jqObject.length > 0)
	{
		var name = jqObject.attr('name');
		var id = 'showCICMessage_'+ name;
		try
		{
			$('#'+name+'AnswerRow').after('<tr id="'+ id +'" height="25"><td style="color:#FF0000;font-weight:bold" valign="top" colspan="4">' + message + '</td></tr>');
			$('#'+id).hide();
			jqObject.each(function() {
				if($(this).is(':checked') && $(this).val() == triggerShowValue)
				{
					$('#'+id).show();
				}
			});
		}
		catch(e){}
	}
}

function getCurrentReponseDrugCode(currentResponse)
{
	var numberPrefix="0";
	if (currentResponse > 9)
		numberPrefix = "";

	return document.forms.mdsData["U" + numberPrefix + currentResponse + "NDC"];
}

function getCurrentReponseFreqCode(currentResponse) //CM15779
{
	var numberPrefix="0";
	if (currentResponse > 9)
		numberPrefix = "";

	return document.forms.mdsData["U" + numberPrefix + currentResponse + "FR"];
}

function getCurrentReponseAmmount(currentResponse) //CM15779
{
	var numberPrefix="0";
	if (currentResponse > 9)
		numberPrefix = "";

	return document.forms.mdsData["U" + numberPrefix + currentResponse + "AA"];
}

function getCurrentReponsePrn(currentResponse) //CM15779
{
	var numberPrefix="0";
	if (currentResponse > 9)
		numberPrefix = "";

	return document.forms.mdsData["U" + numberPrefix + currentResponse + "PRN"];
}

function clearAllOnEnter(msg)//cm891
{
	if (event.keyCode==13)
		clearAll(msg);
}


function clearhck(hckrow)
{
	for (var y=0;y<hckrow.cells.length;y++)
	{
     hckrow.cells[y].className="off";
	}
}


function missearch()
{
	var value=document.forms.mdsData.AD3.value;

    var enabled = $("input[name='AD3']:disabled").size() === 0;

    if (enabled) {
        openSizedLookup("/care/chart/mds/missearch.jsp?ESOLqkey=AD3&substring=" + value, 550, 400);
    }
}

//CM11219 Begin
function facIdSearch(key,frmObj,str)
{
  var frmObj = "mdsData";
  openSizedLookup("/care/setup/facid_find.jsp?ESOLnotqueKey=Y&ESOLqkey="+key+"&ESOLfrmname="+frmObj,650,630);  //CM12150
}
//CM11219 End

function submitRefresh()
{
	frmData.submit();
}

//CM5331: Begin
function dateTimeChange(qkey)
{
	var dateString = document.forms.mdsData["displaydate" + qkey].value;
	var hourString = document.forms.mdsData["displayhour" + qkey].value;
	var minString = document.forms.mdsData["displaymin" + qkey].value;

	// If the date field is clear than clear the time field
	if (dateString == '')
	{
		document.forms.mdsData["displaydate" + qkey].value = "";
		document.forms.mdsData["displayhour" + qkey].value = "";
		document.forms.mdsData["displaymin" + qkey].value = "";

		var $hiddenInput = $(':hidden[name=' + qkey +']');
		$hiddenInput.val("");
		$hiddenInput.trigger('change');
	}
	else
	{
		if (!ESOLValidateDateString(document.forms.mdsData["displaydate" + qkey]))
		{
			alert("Please enter a valid date: " + PCC.l10n.dateTime.userDateFormatHint);
			document.getElementById("link" + qkey).blur();
			document.getElementById("link" + qkey).focus();
		}
		else
		{
			if (hourString == '')
				hourString = '00';
			if (minString == '')
				minString = '00';
			document.forms.mdsData["displayhour" + qkey].value = hourString;
			document.forms.mdsData["displaymin" + qkey].value = minString;

			dateString = document.forms.mdsData["displaydate" + qkey].value;

			var m = dateString.substring(0,2);
			var d = dateString.substring(3,5);
			var yy = dateString.substring(6);
			document.forms.mdsData[qkey].value = yy + "-" + m + "-" + d + " " + hourString + ":" + minString + ":" + "00.000";
			$(':hidden[name=' + qkey +']').trigger('change');
		}
	}
}
//CM5331: End

function setOtherHck(srce, dest, val)
{
	tmp = document.forms.mdsData[srce];
	if (tmp.value == val)
	{
		my = document.forms.mdsData[dest];
		my.value=val;
		my = $("[id='"+dest+"Z']");
		if (my!=null)
			for (var y=0;y<my.length;y++)
			{
				if (my[y].innerHTML == tmp.value)
					my[y].className="on";
				else
					my[y].className="off";
			}
	}
}

function disableRadQuestions (questionNo, questList, selectValue) //cm974
{
	for (var i=0; i<questList.length; i++)
	{
		if (document.getElementsByName(questionNo + questList.charAt(i)))
		{
			if (selectValue!=null)
				document.getElementsByName(questionNo + questList.charAt(i))[selectValue].checked=true;

			for (var j=0; j< document.getElementsByName(questionNo + questList.charAt(i)).length; j++)
				document.getElementsByName(questionNo + questList.charAt(i))[j].disabled = true;
		}
	}
}

function enableRadQuestions (questionNo, questList, selectValue) //cm974
{
	for (var i=0; i<questList.length; i++)
	{
		if (document.getElementsByName(questionNo + questList.charAt(i)))
		{
			for (var j=0; j< document.getElementsByName(questionNo + questList.charAt(i)).length; j++)
				document.getElementsByName(questionNo + questList.charAt(i))[j].disabled = false;

			if (selectValue!=null)
				document.getElementsByName(questionNo + questList.charAt(i))[selectValue].checked=true;

		}
	}
}

//CM5908: Begin
//Function to disable the body control input fields
function bdyDisableCtrl(qKey, disable)
{
	row = 0;
	while (document.forms.mdsData["a" + row + "_" + qKey]) //Check if row exists
	{
		if (disable == true)
			bdyClearRow(row, qKey);
		bdyDisableRow(row, qKey, disable);
		row++;
	}
}

//This function checks to make sure that no other questions have the disabled question disabled.  It removes
//the question key that is trying to enable it from its hidden value (disabledby+qkey) and if the resulting string
//is empty than this function returns true allowing the question to be enabled.
function canEnable(disabledKey, enabledBy)
{//CM12816: Adding try and catch to handle javascrip error.
	var ret = false;
try{
	var disabledByString = document.forms.mdsData["disabledby" + disabledKey].value;
	disabledByString = disabledByString.replace(enabledBy + ",", "");
	document.forms.mdsData["disabledby" + disabledKey].value = disabledByString;

	if (disabledByString == "")
		ret = true;
}catch(e){}
	return ret;
}

function canHide(hiddenKey, hiddenBy)
{
	var ret = false;
	try
	{
		var hiddenByString = document.forms.mdsData["hiddenby" + hiddenKey].value;
		hiddenByString = hiddenByString.replace(hiddenBy + ",", "");
		document.forms.mdsData["hiddenby" + hiddenKey].value = hiddenByString;

		if (hiddenByString == "")
			ret = true;
	}
	catch (e)
	{
		alert('Error in canHide: ' + e.message);
	}
	return ret;
}

//This function appends the question key (disabledBy) to the hidden disabledby value
//of the disabledBy key.
function setDisabledBy(disabledKey, disabledBy)
{
	//append disabledBy to hidden value if it isn't already there
     //CM12816: Adding try/catch to handle the exception
	try
	{
	var disabledByString = document.forms.mdsData["disabledby" + disabledKey].value;
	if (disabledByString.search(disabledBy + ",") == -1)
		document.forms.mdsData["disabledby" + disabledKey].value = disabledByString + disabledBy + ",";
}
	catch(e){}
}

//This function appends the question key (hiddenBy) to the hidden hiddenby value of the hiddenBy key.
function setHiddenBy(hiddenKey, hiddenBy)
{
	try
	{
		var temp = document.forms.mdsData["hiddenby" + hiddenKey];
		if (temp != null && temp != undefined)
		{
			var hiddenByString = document.forms.mdsData["hiddenby" + hiddenKey].value;
			if (hiddenByString.search(hiddenBy + ",") == -1)
				document.forms.mdsData["hiddenby" + hiddenKey].value = hiddenByString + hiddenBy + ",";
		}
	}
	catch (e)
	{
		alert('error in setHiddenBy: ' + e.message);
	}
}

//This function enables the disableKey
function enableQuestion(disableKey)
{
    //CM12816: adding try catch to handle the exceptions
	try{
	// hck
	if (document.getElementById("hckTable"+disableKey))
	{
		document.forms.mdsData[disableKey].disabled = false;
		document.getElementById("hckTable"+disableKey).className = "bdr";
	}

	// bdy controls
	else if (document.getElementById("bdyScroll"+disableKey))
		bdyDisableCtrl(disableKey, false);

	// radio
	else if ($('#link'+disableKey).length && document.forms.mdsData["link" + disableKey][0])
	{
		if (document.forms.mdsData["link" + disableKey][0].type == "radio" ||document.forms.mdsData["link" + disableKey][0].type == "checkbox")
			{
				for (var rad = 0; rad < document.forms.mdsData["link" + disableKey].length; rad++)
					document.forms.mdsData["link" + disableKey][rad].disabled = false;
			}
		else if ($('#link'+disableKey)[0].tagName == "SELECT")
			{
				$('#link'+disableKey).prop("disabled", false);
			}
	}

	// chk controls
	else if ( document.forms.mdsData["link" + disableKey] && document.forms.mdsData["link" + disableKey].type == "checkbox" )
	{
		document.forms.mdsData["link" + disableKey].disabled = false;

	    if (document.forms.mdsData[disableKey].value == "")
	    {
	    	document.forms.mdsData[disableKey].value = "0"; //CM15278
		}
	}

	// text controls
	else if (document.forms.mdsData["link" + disableKey] &&
		(document.forms.mdsData["link" + disableKey].type.search("text") != -1 || isPccDateField(document.forms.mdsData["link" + disableKey])))
	{
		var $inputElement = $(document.forms.mdsData["link" + disableKey]);
		if (isPccDateField($inputElement)) {
			$inputElement.data().dateField.setEnabled(true);
		} else {
			$inputElement.prop("disabled", false);
			$inputElement.css("background", "#ffffff");
		}

		// hour and min control
		if (document.forms.mdsData["displayhour" + disableKey] && document.forms.mdsData["displaymin" + disableKey])
		{
			document.forms.mdsData["displayhour" + disableKey].disabled = false;
			document.forms.mdsData["displaymin" + disableKey].disabled = false;
		}

		// pop control
		if (document.forms.mdsData["link" + disableKey + "DESC"])
		{
			document.forms.mdsData["link" + disableKey + "DESC"].disabled = false;
			document.forms.mdsData["link" + disableKey + "DESC"].style.background = "ffffff";

			if (document.getElementById(disableKey + "PopSearch1") && document.getElementById(disableKey + "PopSearch2"))
			{
				document.getElementById(disableKey + "PopSearch1").style.display = "inline";
				document.getElementById(disableKey + "PopSearch2").style.display = "inline";
			}
		}
	}
	else if(document.getElementsByName(disableKey))
	{
		var elemnts = document.getElementsByName(disableKey);
		for(var i=0;i<elemnts.length;i++)
		{
			elemnts[i].disabled = false;
		}
	}

	// select controls
	else if (document.forms.mdsData["link" + disableKey] && document.forms.mdsData["link" + disableKey].type.search("select") != -1)
	{
		document.forms.mdsData["link" + disableKey].disabled = false;
	}
	}catch (e){}
}

//This function disables the disabledKey and appends the disabledBy to the hidden value for that key
//to track which questions have a particular question disabled.
function disableQuestion(disabledKey, disabledBy)
{
	try{
	// hck
	if (document.getElementById("hckTable"+disabledKey))
	{
		document.forms.mdsData[disabledKey].disabled = true;
		clearhckControl(document.getElementById("hckTable" + disabledKey).rows[0], document.forms.mdsData[disabledKey]);
		document.getElementById("hckTable"+disabledKey).className = "bdrRO";
	}

	// bdy controls
	else if (document.getElementById("bdyScroll"+disabledKey))
		bdyDisableCtrl(disabledKey, true);
	// radio add multi select
	else if ($('#link'+disabledKey).length && document.forms.mdsData["link" + disabledKey][0])
	{
		if (document.forms.mdsData["link" + disabledKey][0].type == "radio" ||document.forms.mdsData["link" + disabledKey][0].type == "checkbox")
		{
			for (var rad = 0; rad < document.forms.mdsData["link" + disabledKey].length; rad++)
			{
			document.forms.mdsData["link" + disabledKey][rad].disabled = true;
	       	document.forms.mdsData["link" + disabledKey][rad].checked = false;
			}
		}
		else if ($('#link'+disabledKey)[0].tagName == "SELECT")
		{
			$('#link'+disabledKey).prop("disabled", true);
		}

	}
	// chk controls
	else if (document.forms.mdsData["link" + disabledKey] && document.forms.mdsData["link" + disabledKey].type == "checkbox")
	{
   	    document.forms.mdsData["link" + disabledKey].checked = false;
		document.forms.mdsData["link" + disabledKey].disabled = true;
   	document.forms.mdsData[disabledKey].value = "";
	}

	// text controls
	else if (document.forms.mdsData["link" + disabledKey] &&
			(document.forms.mdsData["link" + disabledKey].type.search("text") != -1 || isPccDateField(document.forms.mdsData["link" + disabledKey])))
	{
		var inputElement = document.forms.mdsData["link" + disabledKey];
		if (isPccDateField(inputElement)) {
			$(inputElement).data().dateField.clearValue();
			$(inputElement).data().dateField.setEnabled(false);
		} else {
			inputElement.disabled = true;
			inputElement.style.background = "#d5d5d5";
			inputElement.value = "";
		}

		// Date control
		if (document.getElementById(disabledKey + "Calendar"))
		{
			document.forms.mdsData[disabledKey].value = ""; //hidden value in case of date
		}
		// hour and min control
		if (document.forms.mdsData["displayhour" + disabledKey] && document.forms.mdsData["displaymin" + disabledKey])
		{
			document.forms.mdsData["displayhour" + disabledKey].disabled = true;
			document.forms.mdsData["displayhour" + disabledKey].value = "";
			document.forms.mdsData["displaymin" + disabledKey].disabled = true;
	        document.forms.mdsData["displaymin" + disabledKey].value = "";
		}

		// pop control
		if (document.forms.mdsData["link" + disabledKey + "DESC"])
		{
 	        document.forms.mdsData["link" + disabledKey + "DESC"].value = "";
			document.forms.mdsData["link" + disabledKey + "DESC"].disabled = true;
			document.forms.mdsData["link" + disabledKey + "DESC"].style.background = "#d5d5d5";

			if (document.getElementById(disabledKey + "PopSearch1") && document.getElementById(disabledKey + "PopSearch2"))
			{
				document.getElementById(disabledKey + "PopSearch1").style.display = "none";
				document.getElementById(disabledKey + "PopSearch2").style.display = "none";
			}
		}

	}
	else if($('#'+ disabledKey + 'AnswerRow').find("[name=" + disabledKey + "]").is('select')) {
		var $selectElement = $('#'+ disabledKey + 'AnswerRow').find("[name=" + disabledKey + "]");
		$selectElement.val('');
		$selectElement.attr('disabled', 'disabled');
	}
	else if(document.getElementsByName(disabledKey))
	{
		var elemnts = document.getElementsByName(disabledKey);
		for(var i=0;i<elemnts.length;i++)
		{
			elemnts[i].disabled = true;
			if ($(elemnts[i]).attr('type') == "checkbox" || $(elemnts[i]).attr('type') == "radio")
				$(elemnts[i]).attr('checked', false);
		}
	}
	}catch (e){}

	if( $('input[name="' + 'ack' + disabledKey + '"]'))
	 $('input[name="' + 'ack' + disabledKey + '"]').val("Y");

	if($("#ack" + disabledKey + "questionchecker").length>0)
		$("#ack" + disabledKey + "questionchecker").css("display","none");
}


function readOnlyQuestion(questionKey) {
    try
    {
        var parentTd = $("form[name='mdsData']").find("#link" + questionKey).parent();

        var inputSelectItems = $(parentTd).find('input[type!="hidden"]:not([readonly]), select:not([readonly])');

        $(inputSelectItems).each(function (i,e) {
            $(e).data("readonly", true);
            $(e).prop("onclick", "").prop("onfocus", "").prop("onblur", "");
            if ($(e).prop("type") === 'text')
			{
		        $(e).prop('readonly', true);
			}
			else
			{
				$(e).prop('disabled', true);
			}
		});

        var clearAnchors = $(parentTd).find('a:contains("clear")');
        $(clearAnchors).prop("href", "#").prop("onclick", "");

        if (document.forms.mdsData["link" + questionKey] &&
            (document.forms.mdsData["link" + questionKey].type.search("text") != -1 || isPccDateField(document.forms.mdsData["link" + questionKey]))) {
            var inputElement = document.forms.mdsData["link" + questionKey];
            if (isPccDateField(inputElement)) {
                $(inputElement).data().dateField.setEnabled(false);
            }
        }
    } catch (e) {
    }

    if ($('input[name="' + 'ack' + questionKey + '"]'))
        $('input[name="' + 'ack' + questionKey + '"]').val("Y");

    if ($("#ack" + questionKey + "questionchecker").length > 0)
        $("#ack" + questionKey + "questionchecker").css("display", "none");
}



//This function is called if a question has logic associated with it to disable other questions.
//qKey - question disabling or enabling
//valArray - array of values that can disable the corresponding questions in disableArray
//disableArray - array of array of questions which will be disabled if their corresponding value is equal to the value for qKey
//ex. enableDisableQuestions(C1, [1,2], [ [C2], [C3, C4] ] )
//if C1 is answered a 1 than enable C3 and C4 and than disable C2
//if C1 is answered a 2 than enable C2 and than disable C3 and C4

function enableDisableQuestions(qKey, valArray, disableArray) {
	enableDisableQuestions(qKey, valArray, disableArray, null);
}


function enableDisableQuestions(qKey, valArray, disableArray, questionKeyInfoArr)
{
	var disableIndicies = new Array();
	var disableSize = 0;


	for (var i = 0; i < valArray.length; i++)
	{
		var disable = false;

		// radio
		if (document.forms.mdsData[qKey][0] &&
				(document.forms.mdsData[qKey][0].type == "radio"||document.forms.mdsData[qKey][0].type == "checkbox") )
		{
			for (var j = 0; j < document.forms.mdsData[qKey].length; j++)
			{
				if (document.forms.mdsData[qKey][j].checked)
				{
					//CM13141 - need to search the values in valArray in case of multiple values
					var possibleVals = valArray[i].split(",");
					for (var k = 0; k < possibleVals.length; k++)
					{
						if (!disable)
						{
							disable = document.forms.mdsData[qKey][j].value == possibleVals[k];
						} // end if
						else
						{
							break;
						} // end else
					} // end for
				}
			}
		} // end if

		else
		{
			//CM13141 - need to search the values in valArray in case of multiple values
			var possibleVals = valArray[i].split(",");
			for (var k = 0; k < possibleVals.length; k++)
			{
				if (!disable)
				{
						var htmlValue=document.forms.mdsData[qKey].value;

						if (!htmlValue) {
							var linkQkey = "link" + qKey;
							if (document.forms.mdsData[linkQkey]
								&& document.forms.mdsData[linkQkey].type == "checkbox"
								&& !document.forms.mdsData[linkQkey].checked){
								htmlValue = "0";
							}
						}

						if(htmlValue.split('<space>').length>1)
						{
						  htmlValue=htmlValue.split('<space>')[0];
						}

						if(questionKeyInfoArr[i] == 'sys'){
							htmlValue = htmlValue.split("/")[0];
						}
						else if(questionKeyInfoArr[i] == 'dias'){
							htmlValue = htmlValue.split("/")[1];
						}

						var isCPResponse = isCareProfileControlResponse(qKey);
						if (isCPResponse)
						{
							var careProfileControlResponses = getCareProfileControlResponseValuesFromResponse(htmlValue);
							disable = ($.inArray(possibleVals[k], careProfileControlResponses) >= 0);
						}
						else{
							disable = htmlValue == possibleVals[k];
						}

						//PCC-6827
						if(!disable && !isNaN(htmlValue))
						{
							//PCC-7496
							if(valArray[i].indexOf("thru") < 0)
							{
								var v = htmlValue;
								var pv = possibleVals[k];
								disable = parseFloat(v) == parseFloat(pv);
							}
							else
							{
								//check to see if this is a range
								var range = valArray[i].split(" thru ");
								if(range.length > 0)
								{
									var val = htmlValue;
									var v = parseFloat(val);
									var from = parseFloat(range[0]);
									var to = parseFloat(range[1]);
									disable = from <= v && v <= to;
								}
							}
					}
				} // end if
				else
				{
					break;
				} // end else
			} // end for
		}

		if (disable)
		{
			disableIndicies[disableSize] = i;
			disableSize++;
		}

		// Enable the questions if no other question has them disabled
		else
		{
			for (var k = 0; k < disableArray[i].length; k++)
			{
				if (canEnable(disableArray[i][k], qKey))
					enableQuestion(disableArray[i][k]);
			}
		}

	} // end for
	if (disableSize > 0)
	{
	  for (var x = 0; x < disableSize; x++)
		{
		  var disableIndex = disableIndicies[x];
	      for (var k = 0; k < disableArray[disableIndex].length; k++)
		  {
		 	setDisabledBy(disableArray[disableIndex][k],qKey);
		 	disableQuestion(disableArray[disableIndex][k],qKey);
		  }
		}
	}
}

/*
The following function is used for optimizing how the DOM is queried
for checkboxes that are checked.  This is used by the showHideChildQuestions
function to determine which child questions should be hidden.
*/
function doCheckForShowChild(qKey, valArrayI, hideObj)
{
	var valArrayMap = new Object();
	for(var k=0; k<valArrayI.length; k++)
	{
		valArrayMap[valArrayI[k]] = 1;
	}
	var qKeyCheckboxes = document.forms['mdsData'].elements[qKey];
	for (var i=0; i<qKeyCheckboxes.length; i++)
	{
		if (qKeyCheckboxes[i].checked)
		{
			if (!hideObj.hide)
			{
				hideObj.hide = (valArrayMap[qKeyCheckboxes[i].value] == 1);
			}
		}
	}
}

function isCareProfileControlResponse(qKey)
{
	var ret = false;
	var cpEleAttr = $("input[name='"+qKey+"']").attr("data-cpType");
	if (cpEleAttr != undefined && cpEleAttr != null && cpEleAttr != "") {
		ret = true;
	}
	return ret;
}

function getCareProfileControlResponseValuesFromResponse(htmlValue)
{
	var ret = new Array();
	var responsesWithoutOther = htmlValue.split('%#@')[0];
	var responsesArr = responsesWithoutOther.split('%');
	for (var i=0; i<responsesArr.length; i++)
	{
		if (responsesArr[i] == '')
		{
			continue;
		}
		ret.push(responsesArr[i]);
	}
	return ret;
}

function showHideChildQuestions(qKey, valArray, childArr, questionKeyInfoArr)
{
	if (allowHideRules )
	{
		numShowHideChildQuestionCalls++;
		setHideChildValueMap(qKey, valArray, questionKeyInfoArr);
		var hiddenIndicies = new Array();
		var hiddenSize = 0;

		for (var i = 0; i < valArray.length; i++)
		{
			var hide = false;
			var hideObj = new Object();
			hideObj.hide = hide;

			var possibleVals = valArray[i].split(",");

			// radio and checkbox
			if (document.forms.mdsData[qKey] && document.forms.mdsData[qKey][0] &&
					(document.forms.mdsData[qKey][0].type == "radio"||document.forms.mdsData[qKey][0].type == "checkbox") )
			{
				doCheckForShowChild(qKey, possibleVals, hideObj);
				hide = hideObj.hide;
			}
			else
			{
				// need to search the values in valArray in case of multiple values
				if (document.forms.mdsData[qKey])
				{
					for (var k = 0; k < possibleVals.length; k++)
					{
						if (!hide)
						{
							var htmlValue=document.forms.mdsData[qKey].value;
							if(htmlValue.split('<space>').length>1)
							{
							  htmlValue=htmlValue.split('<space>')[0];
							}

							if(questionKeyInfoArr[i] == 'sys'){
								htmlValue = htmlValue.split("/")[0];
							}
							else if(questionKeyInfoArr[i] == 'dias'){
								htmlValue = htmlValue.split("/")[1];
							}

							var isCPResponse = isCareProfileControlResponse(qKey);
							if (isCPResponse)
							{
								var careProfileControlResponses = getCareProfileControlResponseValuesFromResponse(htmlValue);
								hide = ($.inArray(possibleVals[k], careProfileControlResponses) >= 0);
							}
							else
							{
								hide = htmlValue == possibleVals[k];
							}

							if(!hide && !isNaN(htmlValue) && !isCPResponse)
							{
								if(valArray[i].indexOf("thru") < 0)
								{
									var v = htmlValue;
									var pv = possibleVals[k];
									hide = parseFloat(v) == parseFloat(pv);
								}
								else
								{
									// check to see if this is a range
									var range = valArray[i].split(" thru ");
									if(range.length > 0)
									{
										var val = htmlValue;
										var v = parseFloat(val);
										var from = parseFloat(range[0]);
										var to = parseFloat(range[1]);
										hide = from <= v && v <= to;
									}
								}
							}
						}
						else
						{
							break;
						}
					}
				}
				/*
				 check if qKey refers to a popup control. if so, assign jquery data.
					this is used for synchronizing javascript calls for hiding questions
				*/
				if (document.forms.mdsData["link" + qKey] &&
						document.forms.mdsData["link" + qKey].type.search("text") != -1 &&
						$('#link' + qKey + 'DESC').length > 0 &&
						$('#link' + qKey).data("hideinfo") == null)
				{
					$('#link' + qKey).data("hideinfo", {qKey: qKey, valArray: valArray, childArr: childArr});
					$('#link' + qKey + 'DESC').data("hideinfo", {qKey: qKey, valArray: valArray, childArr: childArr});
				}

			}

			if ($('#' + qKey + 'QuestionRow').data('hideinfo') == null)
			{
				$('#' + qKey + 'QuestionRow').data('hideinfo', {qKey: qKey, valArray: valArray, childArr: childArr});
			}

			if (hide)
			{
				hiddenIndicies[hiddenSize] = i;
				hiddenSize++;
			}

			// show the questions if no other question has them disabled
			else
			{
				for (var k = 0; k < childArr[i].length; k++)
				{
					// if there are other parents then call showHideChildQuestions on them to determine viewability of the child question
					checkIfOtherParentCheckedAndHide(qKey, childArr[i][k]);

					queKey = childArr[i][k];
	                if (hideChildValueMap[queKey] != null && hideChildValueMap[queKey] != undefined && hideChildValueMap[queKey] != ''
	                        && hideChildMap[queKey] != null && hideChildMap[queKey] != undefined && hideChildMap[queKey] != '')
	                {
	                    showHideChildQuestions(queKey, hideChildValueMap[queKey], hideChildMap[queKey], hideChildQuestionKeyInfoMap[queKey]);
	                }
				}
			}
		}

		if (hiddenSize > 0)
		{
		  for (var x = 0; x < hiddenSize; x++)
			{
			  var hiddenIndex = hiddenIndicies[x];
		      for (var k = 0; k < childArr[hiddenIndex].length; k++)
			  {
		    	  if ($('#' + childArr[hiddenIndex][k] + 'QuestionRow').length)
		    	  {
		    		  showChildQuestion(childArr[hiddenIndex][k],qKey);
		    	  }
		    	  queKey = childArr[hiddenIndex][k];
			 	  if (hideChildValueMap[queKey] != null && hideChildValueMap[queKey] != undefined && hideChildValueMap[queKey] != ''
			 			&& hideChildMap[queKey] != null && hideChildMap[queKey] != undefined && hideChildMap[queKey] != '')
		 		  {
	                  showHideChildQuestions(queKey, hideChildValueMap[queKey], hideChildMap[queKey], hideChildQuestionKeyInfoMap[queKey]);
		 		  }
			  }
			}
		}
		if (showHideChildQuestionsInverval == null)
		{
			showHideChildQuestionsInverval = setInterval(
				function(){
					if (numShowHideChildQuestionCalls == 0)
					{
						visitedChildren = new Object();
						clearInterval(showHideChildQuestionsInverval);
						showHideChildQuestionsInverval = null;
					}
				},
				300
			);
		}
		numShowHideChildQuestionCalls--;
	}
}

function getHideControlValue(hiddenKey)
{
	var ret = null;

	if (document.forms.mdsData["link" + hiddenKey] && document.forms.mdsData["link" + hiddenKey][0] && document.forms.mdsData["link" + hiddenKey][0].type == "radio")
	{
		ret = $('input[name="' + hiddenKey +'"]:checked').val();
	}
	else if (document.forms.mdsData["link" + hiddenKey] && document.forms.mdsData["link" + hiddenKey][0] && document.forms.mdsData["link" + hiddenKey][0].type == "checkbox")
	{
		ret = '';
		$('input[name="' + hiddenKey +'"]:checked').each(function() {
		    ret = ret + $(this).val() + ',';
		});
	}
	else if (document.forms.mdsData["link" + hiddenKey] && document.forms.mdsData["link" + hiddenKey].type == "checkbox")
	{
		if ($('#link' + hiddenKey).prop('checked'))
		{
			ret = '1';
		}
		else
		{
			ret = '0';
		}
	}
	else if (document.forms.mdsData["link" + hiddenKey] &&
			(document.forms.mdsData["link" + hiddenKey].type.search("text") != -1 || isPccDateField(document.forms.mdsData["link" + hiddenKey])))
	{
		ret = $('#link' + hiddenKey).val();
	}
	else if (document.forms.mdsData["link" + hiddenKey] && document.forms.mdsData["link" + hiddenKey].type.search("select") != -1)
	{
		ret = $('#link' + hiddenKey).find('option:selected').val();
	}
	else if (document.forms.mdsData[hiddenKey] && document.forms.mdsData[hiddenKey].getAttribute("data-wvType")!=null){
		ret = document.forms.mdsData[hiddenKey].value.split("<space>")[0];
		if(document.forms.mdsData[hiddenKey].getAttribute("data-wvType") == 'bp' && hideInverseChildQuestionKeyInfoMap[hiddenKey] != "undefined"){
			if(hideInverseChildQuestionKeyInfoMap[hiddenKey] == "sys")
				ret = ret.split("/")[0];
			else if(hideInverseChildQuestionKeyInfoMap[hiddenKey] == "dias")
				ret = ret.split("/")[1];
		}
	}
	else if (document.forms.mdsData[hiddenKey])
	{
		ret = document.forms.mdsData[hiddenKey].value;
	}

	return ret;
}

function checkIfOtherParentCheckedAndHide(qKey, questionToHideKey) {

	if (hideInverseChildMap[questionToHideKey] && hideInverseChildMap[questionToHideKey] != null &&
			hideInverseChildMap[questionToHideKey].split(',').length > 1)
	{
		var parentsArr = hideInverseChildMap[questionToHideKey].split(',');
		var shouldShowArr = [];
		for (var z = 0; z<parentsArr.length; z++)
		{
			if (qKey != parentsArr[z])
			{
				var qVal = getHideControlValue(parentsArr[z]);
				if (qVal != null)
				{
					var possibleValsInValArray = $('#' + parentsArr[z] + 'QuestionRow').data('hideinfo').valArray;
					if (isCareProfileControlResponse(parentsArr[z])){
						var careProfileControlResponses = getCareProfileControlResponseValuesFromResponse(qVal);
						for(var cpVal = 0; cpVal < possibleValsInValArray.length; cpVal++) {
							for (var cp = 0; cp < careProfileControlResponses.length; cp++) {
						    	if ($.inArray(careProfileControlResponses[cp], possibleValsInValArray[cpVal].split(",")) != -1) {
						    		shouldShowArr = shouldShowArr.concat($('#' + parentsArr[z] + 'QuestionRow').data('hideinfo').childArr[cpVal]);
							    }
							}
						}
					}
					else{
						var qValArray = qVal.split(",");
						for(var cpVal = 0; cpVal < possibleValsInValArray.length; cpVal++) {
							for (var cp = 0; cp < qValArray.length; cp++) {
								if(possibleValsInValArray[cpVal].indexOf("thru") > 0){
									var range = possibleValsInValArray[cpVal].split(" thru ");
									if(range.length > 0) {
										var v = parseFloat(qValArray[cp]);
										var from = parseFloat(range[0]);
										var to = parseFloat(range[1]);
										if(from <= v && v <= to){
											shouldShowArr = shouldShowArr.concat($('#' + parentsArr[z] + 'QuestionRow').data('hideinfo').childArr[cpVal]);
										}
									}
								}
								else{
									if ($.inArray(qValArray[cp], possibleValsInValArray[cpVal].split(",")) != -1) {
										shouldShowArr = shouldShowArr.concat($('#' + parentsArr[z] + 'QuestionRow').data('hideinfo').childArr[cpVal]);
								    }
								}
							}
						}
					}
				}
			}
		}
		if ($.inArray(questionToHideKey, shouldShowArr) == -1)
		{
			if ($('#' + questionToHideKey + 'QuestionRow').length && visitedChildren[questionToHideKey] != 1)
			{
				setHiddenBy(questionToHideKey,qKey);
				hideChildQuestion(questionToHideKey,qKey);
			}
		}
	}
	else
	{
		if ($('#' + questionToHideKey + 'QuestionRow').length && visitedChildren[questionToHideKey] != 1)
		{
			setHiddenBy(questionToHideKey,qKey);
			hideChildQuestion(questionToHideKey,qKey);
		}
	}
}

function hideChildQuestion(hiddenKey, hiddenBy)
{
	if (allowHideRules && visitedChildren[hiddenKey] != 1)
	{
		try{
			var questionRowId = '#' + hiddenKey + 'QuestionRow';
			var answerRowId = '#' + hiddenKey + 'AnswerRow'
			var questionRowList = $(questionRowId);			
			if (questionRowList.length)
			{
				// hck
				var hckTableList = $("#hckTable"+hiddenKey);
				var selectorList = $.merge($('input[name="' + hiddenKey + '"]', questionRowId), $('input[name="' + hiddenKey + '"]', answerRowId));
				var carePlanControlList = $.merge($('input[id^="'+ hiddenKey + '-"]', questionRowId), $('input[id^="'+ hiddenKey + '-"]', answerRowId));
				if (hckTableList.length)
				{
					clearhckControl(hckTableList.find('tr#hckrow')[0], document.forms.mdsData[hiddenKey]);
				}
				// pain controls
				else if ($("#painTable" + hiddenKey).length)
				{
					selectorList.filter(":checked").prop('checked', false);
				}
				else if (typeof getInputElement(hiddenKey).attr("data-wvtype") !== "undefined" || typeof getInputElement(hiddenKey).attr("data-pnltype") !== "undefined")
				{
					clearPPControl('link'+hiddenKey);
				}
				else if (typeof getInputElement(hiddenKey).attr("data-cptype") !== "undefined")
				{
					$('#link'+hiddenKey).val("");
					$('#link'+hiddenKey+"_push").val("N");

					$.merge($('input[id^="link'+ hiddenKey + '_"]', questionRowId), $('input[id^="link'+ hiddenKey + '_"]', answerRowId)).each(function() {
						type = $(this).attr("type");
						if (type == "checkbox" || type == "radio")
						{
							$(this).prop('checked', false);
						}
						else if (type == "text")
						{
							$(this).val("");
						}
					});

					if (getInputElement(hiddenKey).attr("data-cptype") == 'speIn')
					{
						$.merge($('textarea[id^="link'+ hiddenKey + '-"]', questionRowId), $('textarea[id^="link'+ hiddenKey + '-"]', answerRowId)).each(function() {
							$(this).val("");
						});
					}

				}
				// care plan controls
				else if(carePlanControlList.length)
				{
					carePlanControlList.each(function() {
					       if ($(this).attr("data-care-plan-item-status") != 'A') {
					    	   if($(this).prop('checked'))
					    	   {
					    		   $(this).data('restore-value', true);
					    	   }
					    	   $(this).prop('checked', false);
					       }
					   });
				}
				// radio add multi select
				else if (document.forms.mdsData["link" + hiddenKey] && document.forms.mdsData["link" + hiddenKey][0] &&
						(document.forms.mdsData["link" + hiddenKey][0].type == "radio" ||document.forms.mdsData["link" + hiddenKey][0].type == "checkbox"))
				{
					selectorList.filter(":checked").prop('checked', false);
				}

				// chk controls
				else if (document.forms.mdsData["link" + hiddenKey] && document.forms.mdsData["link" + hiddenKey].type == "checkbox")
				{
					var chkControlList = $('#link' + hiddenKey);					
					chkControlList.prop('checked', false);
					onclickFunc = chkControlList.attr("onclick");

					if (onclickFunc != null && onclickFunc != undefined && onclickFunc.indexOf("checkboxOnClick") >= 0)
					{
	                    $("[name='" + hiddenKey + "']").val("0");
					}
				}

				// text controls
				else if (document.forms.mdsData["link" + hiddenKey] &&
						(document.forms.mdsData["link" + hiddenKey].type.search("text") != -1 || isPccDateField(document.forms.mdsData["link" + hiddenKey])))
				{
					// check to see if the popsearch text boxes need to be cleared
					var textControlList = $('#link' + hiddenKey + 'DESC');
					if (textControlList.length)
					{
						var restoredValue=textControlList.data('restore-value');
						var fieldValue=textControlList.val();

						textControlList.data('restore-value', getRestoredValueIfExists(restoredValue,fieldValue));
						textControlList.val('');
					}
					// date hour and min control
					if (document.forms.mdsData["displaydate" + hiddenKey] && document.forms.mdsData["displayhour" + hiddenKey] && document.forms.mdsData["displaymin" + hiddenKey])
					{
						var displayHourList = $('[name="displayhour' + hiddenKey+'"]');
						var restoredHourValue=displayHourList.data('restore-value');
						var hourFieldValue=displayHourList.val();

                        var displayMinList = $('[name="displaymin' + hiddenKey+'"]');
						var restoredMinValue=displayMinList.data('restore-value');
						var minFieldValue=displayMinList.val();

						var displayDateList = $('[name="displaydate' + hiddenKey+'"]');
						var restoredDateValue=displayDateList.data('restore-value');
						var dateFieldValue=displayDateList.val();

						var fieldList = $('[name="' + hiddenKey + '"]');
						var restoredValue=fieldList.data('restore-value');
						var fieldValue=fieldList.val();

						displayHourList.data('restore-value', getRestoredValueIfExists(restoredHourValue,hourFieldValue) );
						displayMinList.data('restore-value', getRestoredValueIfExists(restoredMinValue,minFieldValue));
						displayDateList.data('restore-value', getRestoredValueIfExists(restoredDateValue,dateFieldValue));
						fieldList.data('restore-value', getRestoredValueIfExists(restoredValue,fieldValue));

						displayHourList.val('');
						displayMinList.val('');

						if (isPccDateField(displayDateList)) {
							displayDateList.data().dateField.clearValue();
						} else {
							displayDateList.val('');
						}
						fieldList.val('');

					}
					//date control
					else if (document.forms.mdsData["displaydate" + hiddenKey] )
					{
						var displayDateList = $('[name="displaydate' + hiddenKey+'"]');
						var restoredDateValue=displayDateList.data('restore-value');
						var dateFieldValue=displayDateList.val();

						var restoredValue=displayDateList.data('restore-value');
						var fieldValue=displayDateList.val();

						displayDateList.data('restore-value',getRestoredValueIfExists(restoredDateValue,dateFieldValue));
						var fieldList = $('[name="' + hiddenKey + '"]');
						fieldList.data('restore-value', getRestoredValueIfExists(restoredValue,fieldValue));

						if (isPccDateField(displayDateList)) {
							displayDateList.data().dateField.clearValue();
						} else {
							displayDateList.val('');
						}
						fieldList.val('');
					}
					else
					{
						var linkList = $('#link' + hiddenKey);
						var restoredValue=linkList.data('restore-value');
						var fieldValue=linkList.val();

						linkList.data('restore-value', getRestoredValueIfExists(restoredValue,fieldValue));
						linkList.val('');

					}

				}
				// select controls
				else if (document.forms.mdsData["link" + hiddenKey] && document.forms.mdsData["link" + hiddenKey].type.search("select") != -1)
				{
					var linkList = $('#link' + hiddenKey);
					var fieldValue=linkList.find('option:selected').val();
					var fieldText=linkList.find('option:selected').text();

					var restoredfieldValue= linkList.data('restore-value');
					var restoredfieldText= linkList.data('restore-text');

					linkList.data('restore-value',getRestoredValueIfExists(restoredfieldValue,fieldValue));
					linkList.data('restore-text',getRestoredValueIfExists(restoredfieldText,fieldText));
					var parentRow = linkList.parent().parent();
					parentRow.find('option:selected').prop('selected', false);
					parentRow.val('');
				}

				var titleRow = $('#' + hiddenKey + 'TitleRow');
				if (titleRow.length)
				{
					titleRow.hide();
				}
				questionRowList.hide();
				var answerRow = $(answerRowId);
				if (answerRow.length)
				{
					answerRow.hide();
				}

				var childArr = hideChildMap[hiddenKey];
				if (childArr != null && childArr != undefined)
				{
					$.each(childArr, function(i, e){
						if (e != null && e != undefined && e != '')
						{
							$.each(e, function(i, ch){
								if (ch != null && ch != undefined && ch != '')
								{
									checkIfOtherParentCheckedAndHide(hiddenKey, ch);
								}
							});
						}
					});
				}
			}
			var ackList = $('input[name="' + 'ack' + hiddenKey + '"]', questionRowId);
			if(ackList)
				 ackList.val("Y");
		}
		catch (e)
		{
			alert('Error in hideChildQuestion for question ' + hiddenKey + ': '+ e.message);
		}
	}
}


function getRestoredValueIfExists(restoredValue, fieldValue)
{
	if (fieldValue==null || fieldValue.length==0 && restoredValue != undefined)
	{
	 return restoredValue;
	}
	else
	{
	 return fieldValue;
	}

}

function showChildQuestion(qKey)
{
	if (allowHideRules)
	{
		try{
			var controlType = $("[name='" + qKey + "']").attr("data-type");
			
			// chk controls
			if ( loadingPage && document.forms.mdsData["link" + qKey] && document.forms.mdsData["link" + qKey].type == "checkbox" )
			{
				if (controlType !== "undefined" && controlType == "mcs")
				{
					// multiple checkbox with only one option
					if(document.forms.mdsData["link" + qKey].hasAttribute("checked")){
						document.forms.mdsData["link" + qKey].checked = "true";
					}
					
				}
				else
				{
					if((document.forms.mdsData["link" + qKey].hasAttribute("checked")) || (document.forms.mdsData["link" + qKey].checked))
				    {
						$("#link" + qKey).prop("checked", true);
						 $("[name='" + qKey + "']").val("1");
					}
				    else
			    	{
				    	$("#link"+ qKey).prop('checked', false);
				    	$("[name='" + qKey + "']").val("0");
			    	}
				}
			}
			// chk for radio button and set back to its original value
			if ( loadingPage && document.forms.mdsData["link" + qKey] && document.forms.mdsData["link" + qKey][0] && document.forms.mdsData["link" + qKey][0].type == "radio" )
			{
				for (var i = 0; i<document.forms.mdsData["link" + qKey].length; i++){
					if(document.forms.mdsData["link" + qKey][i].hasAttribute("checked")){
						document.forms.mdsData["link" + qKey][i].checked = "true";
					}
				}
			}
			// care plan controls
			else if(loadingPage && $('input[id^="'+ qKey + '-"]').length)
			{
				$('input[id^="'+ qKey + '-"]').each(function() {
				       if ($(this).attr("data-care-plan-item-status") != 'A') {
				    	   if($(this).data('restore-value')!=undefined &&  $(this).data('restore-value'))
				    	   {
				    		   $(this).prop('checked', true);
				    	   }

				       }
				   });
			}
			else if (loadingPage && document.forms.mdsData["link" + qKey] && document.forms.mdsData["link" + qKey][0] && document.forms.mdsData["link" + qKey][0].type == "checkbox")
			{
				for (var i = 0; i<document.forms.mdsData["link" + qKey].length; i++){
					if(document.forms.mdsData["link" + qKey][i].hasAttribute("checked")){
						document.forms.mdsData["link" + qKey][i].checked = "true";
					}
				}
			}
			else if (document.forms.mdsData["link" + qKey]
						&& ((document.forms.mdsData["link" + qKey].type && document.forms.mdsData["link" + qKey].type.search("text") != -1)
							|| isPccDateField(document.forms.mdsData["link" + qKey])))
			{
				if(loadingPage)
				{
					if($('#link' + qKey).data('restoreValue')!=undefined)
					$('#link' + qKey).val($('#link' + qKey).data('restoreValue'));

					// check to see if the popsearch text boxes need to be cleared
					if ($('#link' + qKey + 'DESC').length && $('#link' + qKey + 'DESC').data('restore-value')!=undefined)
					{
						$('#link' + qKey + 'DESC').val($('#link' + qKey + 'DESC').data('restore-value'));
					}
					//date control
					if (document.forms.mdsData["displaydate" + qKey] && $('[name="displaydate' + qKey+'"]').data('restore-value')!=undefined)
					{
						var restoreDate = $('[name="displaydate' + qKey+'"]').data('restore-value');
						var $dateInput = $('[name="displaydate' + qKey + '"]');
						if (isPccDateField($dateInput)) {
							$dateInput.data().dateField.setValue(restoreDate);
						} else {
							$dateInput.val(restoreDate);
						}
						$('[name="' + qKey + '"]').val($('[name="' + qKey+'"]').data('restore-value'));
					}
					// hour and min control
					if ((document.forms.mdsData["displayhour" + qKey] && document.forms.mdsData["displaymin" + qKey]) &&
						($('[name="displayhour' + qKey+'"]').data('restore-value')!=undefined && $('[name="displaymin' + qKey+'"]').data('restore-value') !=undefined) )
					{
						$('[name="displayhour' + qKey + '"]').val($('[name="displayhour' + qKey+'"]').data('restore-value'));
						$('[name="displaymin' + qKey + '"]').val($('[name="displaymin' + qKey+'"]').data('restore-value'));
					}
				}

			}
			else if (loadingPage && $("#hckTable"+qKey).length)
			{
				restorehckControl($('#hckTable' + qKey).find('tr#hckrow')[0], document.forms.mdsData[qKey]);
			}
			// select controls
			else if (loadingPage && document.forms.mdsData["link" + qKey] && document.forms.mdsData["link" + qKey].type.search("select") != -1 && $('#link' + qKey).data('restore-value') !=undefined )
			{
				$('#link' + qKey).val($('#link' + qKey).data('restore-value'));

			}
			else if (typeof getInputElement(qKey).attr("data-cptype") !== "undefined")
			{
				$('#link' + qKey +"_push").val("Y");
			}

			if ($('#' + qKey + 'TitleRow').length)
			{
				$('#' + qKey + 'TitleRow').show();
			}
			$('#' + qKey + 'QuestionRow').show();

			if ($('#' + qKey + 'AnswerRow').length)
			{
				$('#' + qKey + 'AnswerRow').show();
			}
			visitedChildren[qKey] = 1;


		}
		catch (e)
		{
			alert('error in showChildQuestion for question: ' + qKey + '.  Error is ' + e.message);
		}
	}
}

function clearDiagnosis(qkey)
{
       if(qkey == "J2aDESC")
       {
         mdsData.J2aDESC.disabled = false;
         mdsData.J2aDESC.value = "";
         mdsData.J2a.value = "";
       }
       if(qkey == "J2bDESC")
       {
         mdsData.J2bDESC.disabled = false;
         mdsData.J2bDESC.value = "";
         mdsData.J2b.value = "";
       }
       if(qkey == "J2cDESC")
       {
         mdsData.J2cDESC.disabled = false;
         mdsData.J2cDESC.value = "";
         mdsData.J2c.value = "";
       }
       if(qkey == "J2dDESC")
       {
         mdsData.J2dDESC.disabled = false;
         mdsData.J2dDESC.value = "";
         mdsData.J2d.value = "";
       }
}

function checkNoneAboveOption(fieldId, value)
{
    $('input[name=\"'+fieldId+'\"]:checked').each(function(){
        if ($(this).val() == value)
        {
          $('input[name=\"'+fieldId+'\"]').removeAttr('checked');
          $('input[name=\"'+fieldId+'\"][value=\"'+value+'\"]').attr('checked','checked');
        }
      });
}

function clearNoneAboveOption(fieldId, value)
{
	$('input[name=\"'+fieldId+'\"][value=\"'+value+'\"]').removeAttr('checked');
}

//PCC-18810
function setUncheckResponseToZero(questList, questionSection, doubleLetters)
{
	var adj = 1; // adjustment factor default to 1

	if (doubleLetters) { // The subquestion contains double letters (e.g. I1-aa, I1-bb  )
		adj = 2; // Make the index to move 2 position at a time
	}

	if (document.forms.mdsData[questionSection + questList.substring(0,adj)]) // See if the item is available
	{
		var i = 0;
		for (var ctr=0; ctr<(questList.length / adj); ctr++)
		{
			if (document.forms.mdsData[questionSection + questList.substring(i,(i + adj))] && (document.forms.mdsData[questionSection + questList.substring(i,(i + adj))].value == ""))
			{
				document.forms.mdsData[questionSection + questList.substring(i,(i + adj))].value = "0";
			}
			i += adj;
		}
	}
}

function setHideInverseChildMap(childArrElem, qKey, questionKeyInfo)
{
	if (!hideInverseChildMap[childArrElem] || hideInverseChildMap[childArrElem] == null)
	{
		hideInverseChildMap[childArrElem] = qKey;
		hideInverseChildQuestionKeyInfoMap[qKey] = questionKeyInfo;
	}
	else
	{
		var parentsArr = hideInverseChildMap[childArrElem].split(',');
		if ($.inArray(qKey, parentsArr) == -1)
		{
			hideInverseChildMap[childArrElem] = hideInverseChildMap[childArrElem] + ',' + qKey;
			hideInverseChildQuestionKeyInfoMap[qKey] = questionKeyInfo;
		}
	}
}
function setHideChildMap(qKey, childArr, questionKeyInfoArr)
{
	if (!hideChildMap[qKey] || hideChildMap[qKey] == null)
	{
		hideChildMap[qKey] = childArr;
	}
	for (var i=0; i<childArr.length; i++)
	{
		if (!$.isArray(childArr[i]))
		{
			setHideInverseChildMap(childArr[i], qKey, questionKeyInfoArr[i]);
		}
		else
		{
			for (var k=0; k<childArr[i].length; k++)
			{
				setHideInverseChildMap(childArr[i][k], qKey, questionKeyInfoArr[i]);
			}
		}
	}
}

function setHideChildValueMap(qKey, valueArr, questionKeyInfoArr)
{
    if (!hideChildValueMap[qKey] || hideChildValueMap[qKey] == null)
    {
    	hideChildValueMap[qKey] = valueArr;
    	hideChildQuestionKeyInfoMap[qKey] = questionKeyInfoArr;
    }
}


function setMedQuest(callingQuest)
{
	medQuest = callingQuest;
}
//Function being called from Medispan which needs to populate the medication value on MDS Section U. PCC-13592
function setMedFieldValues(medInfo)
 {

  document.forms.mdsData[medQuest + "DSC"].value = medInfo.description + " " + medInfo.dose;

 closePopup();
 }
  //Function being called from medi-span. Will not be used here so returning nothing. PCC-13592
 function resetMedFieldValues()
 {
      return;
 }

 function selectValueByKeypress(TDObjArrayName,hiddenResponseObj,valueSelected)//cm891
 {
 	var arr = document.getElementsByName(TDObjArrayName);
 	if (hiddenResponseObj.disabled == false) //if hidden field is disabled, prevent user from setting hck component value //CM7340 - moved here
 	{
 	for (var x=0;x<arr.length;x++)
 		arr[x].className="off";
 		hiddenResponseObj.value="";
 		// loop through each td object in hck control a check if value matched key selected
 		for (var i=0; i<arr.length; i++)
 		{
 			if ((arr[i]) && arr[i].innerHTML==valueSelected)
 			{
 				arr[i].className="on";
 				hiddenResponseObj.value= valueSelected; //set the hidden object value to the selected hck value
 				break;
 			}
 		}
 	}
 }

 function onHckBlur(questionKey)//cm891
 {
 	document.getElementById("hckTable" + questionKey).style.fontWeight = 'normal';
 	document.getElementById("hckTable" + questionKey).style.borderWidth = '1';
 	document.getElementById("hckTable" + questionKey).style.borderColor = '';
 }

 function selectNextLink()//cm891
 {
 	var selectedElementIndex="-1";
 	//loop forward to find index of currently selected element, then find index of next element with an id like 'link' and set focus to it
 	for (var i=0; i<linkArray.length; i++)
 	{
 		if (document.activeElement.id == linkArray[i].id)
 			selectedElementIndex=i;
 		else if (selectedElementIndex > -1 && linkArray[i].id.substring(0,4)== "link")
 		{
 			linkArray[i].focus();
 			break;
 		}
 	}//for
 }

 function hckSelectorKeyDown(questionKey)//cm891
 {
 	var asciiCode=event.keyCode;
 	if (event.keyCode >= 96 && event.keyCode <= 105)
 		asciiCode = asciiCode-48; // adjust keypad values into number key values
 	//CM3283: Begin
 	else if (event.keyCode == 189)
 		asciiCode = asciiCode - 144;
 	//CM3283: End
 	if ((asciiCode >= 48 && asciiCode <= 57) || asciiCode == 45)	//CM3283
 	{
 		selectValueByKeypress(questionKey+"Z",document.forms.mdsData[questionKey],asciiValue(asciiCode));
 		selectNextLink();
 	}
 	else
 		hckTabTo = true;

 }

 function asciiValue(asciiCode) //cm891
 {
 	return String.fromCharCode(asciiCode);
 }


 function controlOnBlur(obj) //cm891
 {
 	obj.style.backgroundColor="";
 }


// TODO Remove old MDS calendar function
//CM5331: Begin
 function openMDSDateTimeCalendar(op)
 {
 	var top = (screen.height)/4;
 	var left = (screen.width + 200)/3;
 	datePopupWindow = window.open('/tools/mdscalendar.jsp?ESOLqkey=' + op + "&ESOLdatetime=Y","Calendar","toolbar=0,location=0,top="+top+",left="+left+",directories=0,status=0,menubar=0,scrollbars=0,resizable=1,width=220,height=160");
 }
 //CM5331: End

//TODO Remove old MDS calendar function
 //CM3291: Begin
 function openMDSCalendar(op)
 {
 	var top = (screen.height)/4;
 	var left = (screen.width + 200)/3;
 	datePopupWindow = window.open('/tools/mdscalendar.jsp?ESOLqkey=' + op,"Calendar","toolbar=0,location=0,top="+top+",left="+left+",directories=0,status=0,menubar=0,scrollbars=0,resizable=1,width=220,height=160");
 }

//TODO Remove old MDS calendar function
 function openMDSCalendar(op, callback)
 {
   var top = (screen.height)/4;
   var left = (screen.width + 200)/3;
   datePopupWindow = window.open('/tools/mdscalendar.jsp?ESOLcallback=' + callback + '&ESOLqkey=' + op,"Calendar","toolbar=0,location=0,top="+top+",left="+left+",directories=0,status=0,menubar=0,scrollbars=0,resizable=1,width=220,height=160");
 }

 function checkMDSAA6b()
 {
 	var i;
 	var s = mdsData.AA6b.value;
 	for (i = 0; i < s.length; i++)
 	{
   	var c = s.charAt(i);
     if ((c == "-" || (c > 'a' && c < 'z')) && c != ' ')
 		{
 			alert("AA6b cannot contain a  \"-\" (dash)  or lower case letters. ");
 			return false;
 		}
 	}
 	return true;
 }
 //CM3291: End

//CM5081: Begin
 function checkMDSAA5a()
 {
 	var i;
 	var s = mdsData.AA5a.value;

 	var onlydashes = true;
 	for (i = 0; i < s.length; i++)
 	{
 		var ch = s.charAt(i);
 		if (ch != '-')
 		{
 			onlydashes = false;
 			break;
 		}
 	}

 	if (s.length > 0 && onlydashes)
 	{
 		mdsData.AA5a.value = '---------';
 	}
 	else if (s.length > 0 && s.length != 9)
 	{
 		alert("AA5a must be 9 digits, 9 \"-\" (dashes) or blank. ");
 		return false;
 	}
 	else if (s.substring(0,3) == '000')
 	{
 		alert("AA5a cannot start with 000. ");
 		return false;
 	}
 	else
 	{
 		for (i = 0; i < s.length; i++)
 		{
 	  	var c = s.charAt(i);
 	    if (c == "-" || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == ' ')
 			{
 				alert("AA5a cannot contain an embedded \"-\" (dash), space or letter. ");
 				return false;
 			}
 		}
 	}
 	return true;
 }

 function checkMDSAA5b()
 {
 	var i;
 	var s = mdsData.AA5b.value;

 	var onlydashes = true;
 	for (i = 0; i < s.length; i++)
 	{
 		var ch = s.charAt(i);
 		if (ch != '-')
 		{
 			onlydashes = false;
 			break;
 		}
 	}

 	if (s.length > 0)
 	{
 		// Check for spaces at the end of the string
 		var ch = s.substring(s.length-1, s.length);
    		while (ch == " ")
 		{
 			s = s.substring(0, s.length-1);
       		ch = s.substring(s.length-1, s.length);
    		}
 		mdsData.AA5b.value = s;
 	}

 	if (s.length > 0 && onlydashes)
 	{
 		mdsData.AA5b.value = '------------';
 	}
 	else
 	{
 		for (i = 0; i < s.length; i++)
 		{
 	  	var c = s.charAt(i);
 	    if (c == "-" || (c >= 'a' && c <= 'z') || c == ' ')
 			{
 				alert("AA5b cannot contain an embedded \"-\" (dash), space or lower case letter. ");
 				return false;
 			}
 		}
 	}

 	//CM5410: Begin
 	if (s.length > 0)
 	{
 		var c = s.charAt(0);
 		if (c >= 0 && c <= 9)
 		{
 			//if first character is numeric, then the first nine characters must be numeric
 			if (s.length < 9)
 			{
 				alert("If the first character of AA5b is numeric, then the first 9 characters must be numeric.");
 				return false;
 			}
 			var indx = 1;
 			while (indx < s.length && indx < 9)
 			{
 				c = s.charAt(indx);
 				if (!(c >= 0 && c <= 9))
 				{
 					alert("If the first character of AA5b is numeric, then the first 9 characters must be numeric.");
 					return false;
 				}
 				indx++;
 			}
 		}
 		else if (c == 'C' && s.length < 2)
 		{
 			alert("If the first character of AA5b is a C, it must be at least 2 characters long.");
 			return false;
 		}
 		else if (c != 'C' && (c >= 'A' && c <= 'Z'))
 		{
 			var numFound = false;
 			var nums = 0;
 			for (i = 0; i < s.length; i++)
 			{
 	  			var c = s.charAt(i);
 				if (!(c >= 0 && c <= 9) && (indx >= 3 || numFound))
 				{
 					alert("If the first character of AA5b is a letter, but not a C, then there must be 1-3 alphabetic characters\nfollowed by 6 or 9 numbers followed by spaces up to the field length of 12. ");
 					return false;
 				}
 				else if (c >= 0 && c <= 9)
 				{
 					nums++;
 					numFound = true;
 				}
 			}
 			if (nums < 6)
 			{
 				alert("If the first character of AA5b is a letter, but not a C, then there must be 1-3 alphabetic characters\nfollowed by 6 or 9 numbers followed by spaces up to the field length of 12. ");
 				return false;
 			}
 		}
 	}
 	//CM5410: End
 	return true;
 }
 //CM5081: End

//CM3632: Begin
 function clearhckControl(hckrow,qkey)
 {
 	  for (var y=0;y<(hckrow.cells.length - 1);y++)
 	  {
 		var restoredClassValue=$(hckrow.cells[y]).data('restore-value');
 	    var fieldClassValue= hckrow.cells[y].className == 'off'  ? (restoredClassValue != undefined ? restoredClassValue : hckrow.cells[y].className)  : hckrow.cells[y].className  ;
 		$(hckrow.cells[y]).data('restore-value',fieldClassValue);
 		hckrow.cells[y].className = "off";
 		hckrow.cells[y].disabled =false;
 	  }

 	  var restoredValue=$(qkey).data('restore-value');
	  var fieldValue=qkey.value;

 	  $(qkey).data('restore-value',getRestoredValueIfExists(restoredValue,fieldValue));
 	  qkey.value = "";
 }

 function restorehckControl(hckrow,qkey)
 {
 	  for (var y=0;y<(hckrow.cells.length - 1);y++)
 	  {
 		 if($(hckrow.cells[y]).data('restore-value') != undefined)
 		 {
 			hckrow.cells[y].className=$(hckrow.cells[y]).data('restore-value');
 		 }
  	  }
 	  if($(qkey).data('restore-value')!=undefined)
 	  {
 		 qkey.value=$(qkey).data('restore-value');
 	  }

 }

 function hcmdsP1AutoFill(qkey, obj)
 {
 	questionReviewed(qkey);
 	if (qkey != '' && obj.value == 0)
 	{
 		var k = qkey.substring(0,qkey.length-1);
 		document.forms.mdsData[k + "B"].value = 0;
 		document.forms.mdsData[k + "C"].value = 0;
 		if (k == 'P1a')
 			mdsData.P1bA.focus();
 		if (k == 'P1b')
 			mdsData.P1cA.focus();
 		if (k == 'P1c')
 			mdsData.P1dA.focus();
 		if (k == 'P1d')
 			mdsData.P1eA.focus();
 		if (k == 'P1e')
 			mdsData.P1fA.focus();
 		if (k == 'P1f')
 			mdsData.P1gA.focus();
 		if (k == 'P1g')
 			mdsData.P1hA.focus();
 		if (k == 'P1h')
 			mdsData.P1iA.focus();
 		if (k == 'P1i')
 			mdsData.P1jA.focus();
 		if (k == 'P1j')
 			linkP2a.focus();
 	}
 }

 function ackLinkOnFocus(obj)
 {
 	obj.style.backgroundColor = 'YELLOW';
 }

 function ackLinkOnBlur(obj)
 {
 	obj.style.backgroundColor = '';
 }
 //CM5021: End

//CM5027: Begin
 function showGroupTips(stdaid, assessTypeCode, section, questNo)
 {
 	openSizedLookup2("/care/chart/mds/questiongrouptips.jsp?ESOLstdaid="+stdaid+"&ESOLassesstypecode="+assessTypeCode+"&ESOLsection="+section+"&ESOLquestno="+questNo+"","Show_Tips","550","300","scrollbars");
 }
 //CM5027: End

//CM19006 Begin
 function cleanOther(qkey)
 {
 	if(qkey == 'J4j')
 	    document.forms.mdsData.J4j8.value = " ";
 	if(qkey == 'J1o')
 	    document.forms.mdsDataJ1o8.value = " ";
 	if(qkey == 'J8e')
 	    document.forms.mdsDataJ8e8value = " ";
 	if(qkey == 'I1nn')
 	    document.forms.mdsDataI1nn8.value = " ";
 	if(qkey == 'Q1g')
 	    document.forms.mdsData.Q1g8.value = " ";
 	if(qkey == 'A10e')
 	    document.forms.mdsData.A10.value = " ";
 	if(qkey == 'A8h')
 	    document.forms.mdsData.A8.value = " ";
 	if(qkey == 'T1j')
 	    document.forms.mdsData.T1j8.value = " ";
 	if(qkey == 'D22')
 	    document.forms.mdsData.D22a.value = " ";
 }
 //CM19006 End

 function clearchkControl(qkey, allKeys, noaKey)
 {
 	if (document.getElementById(qkey + "checkboxUTD"))
 	{
 		if (document.forms.mdsData[qkey])
 			document.forms.mdsData[qkey].value = "0";
 		document.getElementById(qkey + "checkboxUTD").style.display = 'inline';
 		if (document.getElementById(qkey + "checkboxspan"))
 			document.getElementById(qkey + "checkboxspan").style.display = 'inline';
 		if (document.getElementById(qkey + "checkboxutdspan"))
 			document.getElementById(qkey + "checkboxutdspan").style.display = 'none';
 		if (document.getElementById(qkey + "checkboxClear"))
 			document.getElementById(qkey + "checkboxClear").style.display = 'none';
 	}

 	setNoneOfAboveCheckbox(qkey, allKeys, noaKey);
 }
 //CM5517: End

//CM5598: Begin
 function Hashtable()
 {
     this.clear = hashtable_clear;
     this.containsKey = hashtable_containsKey;
     this.containsValue = hashtable_containsValue;
     this.get = hashtable_get;
     this.isEmpty = hashtable_isEmpty;
     this.keys = hashtable_keys;
     this.put = hashtable_put;
     this.remove = hashtable_remove;
     this.size = hashtable_size;
     this.toString = hashtable_toString;
     this.values = hashtable_values;
     this.hashtable = new Array();
 }

 /*=======Private methods for internal use only========*/
 function hashtable_clear(){
     this.hashtable = new Array();
 }

 function hashtable_containsKey(key){
     var exists = false;
     for (var i in this.hashtable) {
         if (i == key && this.hashtable[i] != null) {
             exists = true;
             break;
         }
     }
     return exists;
 }

 function hashtable_containsValue(value){
     var contains = false;
     if (value != null) {
         for (var i in this.hashtable) {
             if (this.hashtable[i] == value) {
                 contains = true;
                 break;
             }
         }
     }
     return contains;
 }

 function hashtable_get(key){
     return this.hashtable[key];
 }

 function hashtable_isEmpty(){
     return (this.size == 0) ? true : false;
 }

 function hashtable_keys(){
     var keys = new Array();
     for (var i in this.hashtable) {
         if (this.hashtable[i] != null)
             keys.push(i);
     }
     return keys;
 }

 function hashtable_put(key, value){
     if (key == null || value == null) {
         throw "NullPointerException {" + key + "},{" + value + "}";
     }else{
         this.hashtable[key] = value;
     }
 }

 function hashtable_remove(key){
     var rtn = this.hashtable[key];
     this.hashtable[key] = null;
     return rtn;
 }

 function checkSpelling(id)
 {
   var text = document.getElementById(id).value;

   var form = document.forms["mdsData"];
   if (form && text != null && text.length > 0)
   {
     //save the current form settings
     var tmpAction = form.action;
     var tmpTarget = form.target;

     //open the help window popup
     openSizedLookup2("about:blank","spellcheckpopup",680,335,"");

      //set the form settings for info popup
     form.action = "/tools/spellcheckpopup.jsp?ESOLtextid="+id+"&ESOLtext="+encodeURIComponent(text);
     form.target = "spellcheckpopup";

     //submit the form the the popup
     form.submit();

     //reset the form settings
     form.action = tmpAction;
     form.target = tmpTarget;
   }
 }

 function hashtable_size(){
     var size = 0;
     for (var i in this.hashtable) {
         if (this.hashtable[i] != null)
             size ++;
     }
     return size;
 }

 function hashtable_toString(){
     var result = "";
     for (var i in this.hashtable)
     {
         if (this.hashtable[i] != null)
             result += "{" + i + "},{" + this.hashtable[i] + "}\n";
     }
     return result;
 }

 function hashtable_values(){
     var values = new Array();
     for (var i in this.hashtable) {
         if (this.hashtable[i] != null)
             values.push(this.hashtable[i]);
     }
     return values;
 }

//This function refreshes the value of the control to the most recent value taken from the client profile (which is stored in refreshedResponses
 function refreshResponse(qKey, controlType)
 {
 	var control = document.forms.mdsData[qKey];
 	var response = refreshedResponses.get(qKey);

 	if (controlType == "rad" || controlType == "radh")
 	{
 		if (response == "error")
 			alert('The pick list needs to be updated in Setup to match this assessment\'s pick list or \n"Enforce Profile Consistency" needs to be turned off in MDS Configuration.');
 		else if (response == "-")
 			control[control.length - 1].checked = true;
 		else
 		{
 			//CM10838 start
 			//this handles responses that are numbers.
 			if(control[response -1]!=null)
 				control[response -1].checked = true;
 			else
 			{
 				//this handles responses that are letters.
 				for(var i=0;i<control.length;i++)
 				{
 					if(control[i].value==response)
 						control[i].checked = true;
 					else
 						control[i].checked = false;
 				}
 			}
 			//CM10838 end
 		}
 	}
 	else if (controlType == "dte")
 	{
 		control = document.forms.mdsData["displaydate" + qKey];
 		if (isPccDateField(control)) {
 			$(control).data().dateField.setValue(response);
 		} else {
	 		control.value = response;
 		}
 		dateChange(qKey);
 	}
 	else
 	{
 		// HTML readonly attribute only works certain controls, the change below was ONLY done to exclude a txt control,
 		// on which HTML readonly does work on.
 		var enabled = controlType !== 'txt' || $("input[name='" + qKey + "']:disabled").size() === 0;

 		if (enabled)
 		{
 			control.value = refreshedResponses.get(qKey);
 		}
 	}

 	// Remove hightlight from link once refreshed
 	document.getElementById("refresh"+qKey).style.background="";
 }

//CM5389: Begin
//This function makes the "other" field visible if "other" is seclected for site or type.  If site or type is
//made blank then it clears the corresponding row.
function bdyShowClearOther(ths, hideCtrlName, row, qkey)
{
	var hideCtrl = document.forms.mdsData[hideCtrlName];

	if (ths.value.search("Other") != -1)
	{
		hideCtrl.style.display = '';
		hideCtrl.focus();
	}
	else
	{
		if (ths.value == '')
		{
			bdyClearRow(row,qkey);
		}

		hideCtrl.style.display = 'none';
		hideCtrl.value = '';
	}
}

//This function makes sure that a site and type is selected in order to enter data into the length, width, depth
//or stage fields of the body control.
function bdyValidate(ths, bdySiteKey, bdyTypeKey)
{
	var bdySiteCtrl = document.forms.mdsData[bdySiteKey];
	var bdyTypeCtrl = document.forms.mdsData[bdyTypeKey];

	if(bdySiteCtrl.value == '')
	{
		alert('A Site must be selected in order for this field to exist.');
		ths.value = '';
		bdySiteCtrl.focus();
	}
	else if (bdyTypeCtrl.value == '')
	{
		alert('A Type must be selected in order for this field to exist.');
		ths.value = '';
		bdyTypeCtrl.focus();
	}
}

//This function clears the entire body control.
function bdyClearCtrl(qkey, noRows)
{
	for (var i = 0; i < noRows; i++)
		bdyClearRow(i, qkey);
}

function displaySigChangeDef(aid)
{
	openSizedLookup2("/care/chart/mds/sigchangedefinitions.jsp?ESOLassessid="+aid+"&ESOLinsection=Y", "", 400, 400, "scrollbars");
}

/**
 * This method sets the global variables used to determine if the assess_type_code
 * changes.
 */
function setOriginalATCQuestions()
{
	if (mdsData.AA8a)
		origAA8a = mdsData.AA8a.value;
	if (mdsData.AA8b)
		origAA8b = mdsData.AA8b.value;
	if (mdsData.A8a)
		origA8a = mdsData.A8a.value;
	if (mdsData.A8b)
		origA8b = mdsData.A8b.value;

}

/**
 * This method returns true if any question that changes the assess_type_code changed
 */
function atcChanged()
{
	var ret = false;

	if ( mdsData.AA8a && origAA8a != mdsData.AA8a.value )
	{
		changedKey = "AA8a";
		ret = true;
	}
	else if ( mdsData.AA8b && origAA8b != mdsData.AA8b.value )
	{
		ret = true;
		changedKey = "AA8b";
	}
	else if ( mdsData.A8a && origA8a != mdsData.A8a.value )
	{
		ret = true;
		changedKey = "A8a";
	}
	else if (mdsData.A8b && origA8b != mdsData.A8b.value)
	{
		changedKey = "A8ba";
		ret = true;
	}

	return ret;
}

/**
* Opens the diagnosis wizard
**/
function openDiagWizard(aid, codes, keys)
{
	openSizedLookup2("/care/chart/mds/mdsdiagwizard.jsp?ESOLassessid=" + aid + "&ESOLmissingcodes=" + codes + "&ESOLmissingkeys=" + keys + "&ESOLisPartialMdsProgress=Y","","700","570","scrollbars");
}

//////////////////////////////////////
//This method is used to open a structured
//progress note
//////////////////////////////////////
function openStructuredProgressNote(aid,stdAssessId)
{
	openSizedLookup2("/clinical/assess_popup/previewspn.xhtml?ESOLassessid="+aid+"&ESOLstdAssessId="+stdAssessId ,'',850,675,'');
}

function openCICReferenceGuides()
{
	openSizedLookup2("/care/chart/einteractrefguidespopup.xhtml",'',380,350,'');
}

//////////////////////////////////////
//This method is get the username and password in order to send a request for third party education - CM13708
//////////////////////////////////////
function requestEducation()
{
	var paramNames = new Array();
	paramNames[0] = 'as_education_username';
	paramNames[1] = 'as_education_password';

	GlobalDwr.getConfigParameterValues(paramNames,submitEducationRequest);
}
 
function clearHCMed(qKey)
{
	document.forms.mdsData[qKey + "DSC"].value = "";
	document.forms.mdsData[qKey + "RA"].value = "";
	document.forms.mdsData[qKey + "FR"].value = "";
	document.forms.mdsData[qKey + "AA"].value = "";
	document.forms.mdsData[qKey + "NDC"].value = "";
}
//CM3291: End

function cKeyPressed()
{
	if (document.getElementById("cancelbutton"))
		document.getElementById("cancelbutton").focus();
	cancel();
}

//CM5021: Begin
var ackLinkArray = new Array();
function buildAckLinkArray()
{
	var tempArr = $(":disabled[id^='linkack']");
	var elementsAdded = 0;
	for (var i=0; i<tempArr.length; i++)
	{
		if (document.getElementById("ack" + tempArr[i].id.substring(7,tempArr[i].id.length) + "questionchecker").style.display != 'none')
		{
			ackLinkArray[elementsAdded] = tempArr[i];
			elementsAdded++;
		}
	}
}
//CM5021: End


//CM5499: Begin
/** This function is called from questionform.jsp.  It sets ESOLinsertfocus to point to the last question inserted.
	*	This allows setObjectFocus() to focus on this question.
	**/
function insertControl(focusId)
{
	frmData.ESOLinsertcontrolfocus.value = 'insert' + focusId;
}
//CM5499: End

function toggleCarePlanItemCheckBoxes(carePlanItem) {
	var carePlanType = carePlanItem.attr('data-care-plan-item-type');
	if(carePlanType.match(/focus/i)) {
		toggleCarePlanItems(carePlanItem);
	}
	else if(carePlanType.match(/goal|intervention/i)) {
		toggleFocus(carePlanItem);
	}
	else if(carePlanType.match(/task/i)) {
		toggleAssociatedFocusForTask(carePlanItem);
	}
}

function toggleFocus(carePlanItem) {
	var isCarePlanItemChecked = carePlanItem.is(':checked');
	var isCarePlanItemActive = ('A' === carePlanItem.attr('data-care-plan-item-status'));
	if(isCarePlanItemChecked && !isCarePlanItemActive) {
		var focusId = carePlanItem.attr('data-focus-id');
		var $focusCheckBox = $('[data-focus-id="' + focusId + '"][data-care-plan-item-type="Focus"]');
		var isFocusActive = ('A' === carePlanItem.attr('data-care-plan-item-status'));
		if(!isFocusActive) {
			$focusCheckBox.attr('checked', true);
			$focusCheckBox.trigger('change');
		}
	}
}

function toggleCarePlanItems(carePlanItem) {
	var isFocusChecked = carePlanItem.is(':checked');
	if(isFocusChecked) return;
	var isFocusActive = ('A' === carePlanItem.attr('data-care-plan-item-status'));
	var focusId = carePlanItem.attr('data-focus-id');
	if(isFocusActive) {
		$('[data-focus-id="' + focusId + '"][data-care-plan-item-type!="Focus"]').each(
				function() {
					var isCarePlanItemActive = ('A' === $(this).attr('data-care-plan-item-status'));
					if($(this).is(':checked') && isCarePlanItemActive) {
						$(this).attr('checked', false);
						$(this).trigger('change');
					}					
				}
		);
	}
	else {
		$('[data-focus-id="' + focusId + '"][data-care-plan-item-type!="Focus"]').each(
				function() {
					var isCarePlanItemActive = ('A' === $(this).attr('data-care-plan-item-status'));
					if($(this).is(':checked') && !isCarePlanItemActive) {
						$(this).attr('checked', false);
						$(this).trigger('change');
					}					
				}
		);
	}
}

function toggleAssociatedFocusForTask(carePlanItem) {
	var isCarePlanItemChecked = carePlanItem.is(':checked');
	var doesStatusExist = ('A' === carePlanItem.attr('data-care-plan-item-status')) || ('R' === carePlanItem.attr('data-care-plan-item-status'))
	|| ('C' === carePlanItem.attr('data-care-plan-item-status'));
	if(isCarePlanItemChecked && !doesStatusExist) {
		var focusId = carePlanItem.attr('data-focus-id');
		var $focusCheckBox = $('[data-focus-id="' + focusId + '"][data-care-plan-item-type="Focus"]');
		var isFocusActive = ('A' === carePlanItem.attr('data-care-plan-item-status'));
		if(!isFocusActive) {
			$focusCheckBox.prop('checked', true);
			$focusCheckBox.trigger('change');
		}
	}
}

function isPccDateField(element)
{
	return $(element).length != 0 && typeof($(element).data().dateField) != 'undefined';
}

