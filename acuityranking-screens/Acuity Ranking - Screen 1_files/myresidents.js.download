COMSNamespace = COMSNamespace || {};
COMSNamespace.MyResidents = COMSNamespace.MyResidents || {};

COMSNamespace.MyResidents.ViewModel = new function () {
    COMSNamespace.MyResidents.LoadingState = {
        NOTLOADED: 1,
        LOADING: 2,
        LOADED: 3
    }

    var self = this;

    self.ExternalIDsVM = new COMSNamespace.MyResidents.ExternalResidentIDsViewModelCreate();
    self.LastSelectedSort = COMSNamespace.MyResidents.LastSelectedSort ;
    self.LastSelectedPhysician = COMSNamespace.MyResidents.LastSelectedPhysician;
    self.LastSelectedSubunit = COMSNamespace.MyResidents.LastSelectedSubunit;

    // Properties
    self.operationInProgress = ko.observable(false);
    self.AlertsList = ko.observableArray();
    self.Residents = ko.observableArray();
    self.LoadingResidentPage = COMSNamespace.MyResidents.LoadingState.NOTLOADED;
    self.SelectedPhysician = {
        Name: ko.observable(""),
        Idx: ko.observable(self.LastSelectedPhysician)
    };
    self.SelectedPhysician.Name($("a[data-physicianidx=" + self.LastSelectedPhysician + "]").text());

    self.SelectedUnit = {
        Name: ko.observable(""),
        Idx: ko.observable(self.LastSelectedSubunit)
    };
    self.SelectedUnit.Name($("a[data-subunitidx=" + self.LastSelectedSubunit + "]").text());

    self.SortBy = {
        Name: ko.observable(""),
        Idx: ko.observable(self.LastSelectedSort)
    };
    self.SortBy.Name($("a[data-sortby=" + self.LastSelectedSort + "]").text());

    self.Keyword = ko.observable("");
    self.ExpandAll = ko.observable(COMSNamespace.MyResidents.IsNurseView);
    self.AdmissionToViewOnLoad = ko.observable("");

    self.PayerFilterDescription = ko.observable("-select-");

    if (COMSTitleBarVM && COMSTitleBarVM.QuickReviewActivated) {
        COMSTitleBarVM.QuickReviewActivated.subscribe(function (v) {
            if (!v) {
                self.ResetTaskStates();
            }
        });
    }

    self.PayerFilter = function () {
        var description = "";
        $('[data-payer-type-name]').each(function (index, item) {
            if ($(item).prop('checked')) {
                if (description) { description += ", "; }
                description += $(item).attr('data-payer-type-name');
            }
        });
        if (!description) { description = "-select-"; }
        self.PayerFilterDescription(description);
        self.Load();
    }

    self.Load = function () {
        if (self.operationInProgress()) {
            return;
        }

        if (self.CurrentPage() == 1) {
            ShowProgressDisplay("Loading Residents...");
        } else {
            $('#divPageLoadingIndicator').show();
        }
        self.operationInProgress(true);
        var searchModel = {
            SortBy: self.SortBy.Idx(),
            PhysicianIdx: self.SelectedPhysician.Idx() ? self.SelectedPhysician.Idx() : null,
            SubunitIdx: self.SelectedUnit.Idx() ? self.SelectedUnit.Idx() : null,
            Keyword: $.trim(self.Keyword()),
            Page: self.CurrentPage(),
            Payers: [],
            PayerNames: []
        }
        $('[data-payer-type-idx]').each(function (index, item) {
            if ($(item).prop('checked')) {
                searchModel.Payers.push($(item).attr('data-payer-type-idx'));
                searchModel.PayerNames.push($(item).attr('data-payer-type-name'));
            }
        });

        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/Residents',
            data: ko.toJSON(searchModel),
            success: function (model) {
                self.operationInProgress(false);
                var x = ko.mapping.fromJS(model.Residents);
                self.TotalResidents(model.TotalResidents);
                ko.utils.arrayForEach(x(), function (resident) {
                    resident.IsExpanded = ko.observable(self.ExpandAll());
                    resident.MemosState = ko.observable(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                    resident.TasksState = ko.observable(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                    resident.ExpandedState = ko.observable(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                    resident.ResidentLoading = ko.computed(function () {
                        return (resident.MemosState() == COMSNamespace.MyResidents.LoadingState.LOADING ||
                            resident.TasksState() == COMSNamespace.MyResidents.LoadingState.LOADING);
                    });
                    resident.ResidentExpandLoading = ko.computed(function () {
                        return (resident.ExpandedState() == COMSNamespace.MyResidents.LoadingState.LOADING);
                    });
                    resident.ShowAllMemos = ko.observable(false);
                });

                if (self.CurrentPage() == 1) {
                    self.Residents.removeAll();
                    self.Residents(x());
                }
                else {
                    ko.utils.arrayForEach(x(), function (item) {
                        self.Residents.push(item);
                    });
                }

                $('.residentConditionTab[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                    var target = $(e.target).attr("href") // activated tab
                    var resident = ko.dataFor(e.target);
                    self.DrawConditionsGraph(resident);
                });

                self.LazyLoad();
                HideProgressDisplay();

                    if (document.getElementById('QRLink') != null)
                    COMSTitleBarVM.QuickReviewActivated(false);
 
                    $('#divPageLoadingIndicator').hide();
                self.LoadingResidentPage = COMSNamespace.MyResidents.LoadingState.NOTLOADED;
            },
            error: function () {
                self.LoadingResidentPage = COMSNamespace.MyResidents.LoadingState.NOTLOADED;
            }
        });

        return false;
    }

    self.SelectPhysician = function (item, event) {
        self.SelectedPhysician.Name($(event.target).attr('data-name'));
        self.SelectedPhysician.Idx($(event.target).attr('data-physicianidx'));
        self.ResetPaging();
        self.Load();
    }

    self.SelectUnit = function (item, event) {
        self.SelectedUnit.Name($(event.target).attr('data-name'));
        self.SelectedUnit.Idx($(event.target).attr('data-subunitidx'));
        self.ResetPaging();
        self.Load();
    }

    self.SearchByText = function (item, event) {
        self.ResetPaging();
        self.Load();
    }

    self.Clear = function (item, event) {
        self.PayerFilterDescription("-select-");
        $('[data-payer-type-idx]').each(function (index, item) {
            $(item).prop('checked', false);
        });

        self.SelectedUnit.Name("-select-");
        self.SelectedUnit.Idx(null);
        self.SelectedPhysician.Name("-select-");
        self.SelectedPhysician.Idx(null);
        self.SortBy.Name("Resident Name (Asc)");
        self.SortBy.Idx("1");
        self.Keyword("");
        self.ResetPaging();
        self.Load();
    }

    self.Sort = function (item, event) {
        self.SortBy.Name($(event.target).text());
        self.SortBy.Idx($(event.target).attr('data-sortby'));
        self.ResetPaging();
        self.Load();
    }

    self.ToggleExpand = function (item, event) {
        item.IsExpanded(!item.IsExpanded());
        self.LoadActiveTab(item);
        if (!item.IsExpanded()) {
            self.LazyLoad();
            self.LazyLoadResidents();
        }
    }

    self.ToggleAllExpand = function (item, event) {
        self.ExpandAll(!self.ExpandAll());
        ko.utils.arrayForEach(self.Residents(), function (resident) {
            resident.IsExpanded(self.ExpandAll());
        });
        self.LazyLoad();
        self.LazyLoadResidents();
    }

    self.LoadActiveTab = function (resident) {

        if (!resident) // Card #946 - COMS I/O Flow Sheet
            return;

        if (resident.IsExpanded()) {
            var activeFound = false;
            $(".active[data-expanded-idx=" + resident.Idx() + "]").each(function (index, element) {
                activeFound = true;
            });
            if (!activeFound) {
                var firstTab = $(".tab-pane[data-expanded-idx=" + resident.Idx() + "]").get(0);
                if (firstTab) {
                    $(firstTab).toggleClass('active');
                    resident.CurrentTab("MEMO");
                }
            }
            self.LoadExpandedData(resident);
        }
    }

    self.ResetTaskStates = function () {
        $('div .resRow').each(function (elem) {
            var divRes = this;
            var resident = ko.dataFor(divRes);
            resident.TasksState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
            resident.AdditionalTasks.removeAll();
            resident.TasksDueCount(0);
            resident.CurrentTaskDue.TaskDueName('');
            resident.CurrentTaskDue.TaskDueStatus('');
            resident.CurrentTaskDue.Idx('');
        });
        self.LazyLoad();
    }

    self.SuppressLazyLoad = ko.observable(false);

    self.LazyLoad = function () {

        if (self.SuppressLazyLoad())    // Card #946 - COMS I/O Flow Sheet
            return;

        var viewport_height = $(window).height();
        var scrollTop = $(document).scrollTop();
        var viewport_scroll_bottom = viewport_height + scrollTop;
        $('div .resRow').each(function (elem) {
            var divRes = this;
            var div_top = $(divRes).offset().top;
            var elem_height = $(divRes).height();
            if ((div_top > (scrollTop - elem_height)) && (div_top < viewport_scroll_bottom)) {
                var resident = ko.dataFor(divRes);
                self.LoadTasksAndMemoCount(resident);
                self.LoadActiveTab(resident);
            }
        });
    }

    self.LazyLoadResidents = function () {

        if (self.SuppressLazyLoad())
            return;

        if (self.CurrentPage() < self.Pages()) {
            var viewport_height = $(window).height();
            var scrollTop = $(document).scrollTop();
            var viewport_scroll_bottom = viewport_height + scrollTop;
            $('#bottomIndicator').each(function (elem) {
                var divIndicator = this;
                var divIndicator_top = $(divIndicator).offset().top;
                if (divIndicator_top <= viewport_scroll_bottom) {
                    self.NextPage();
                }
            });
        }
    }

    self.LoadMemos = function (item, event) {
        if (item.MemosState() == COMSNamespace.MyResidents.LoadingState.NOTLOADED) {
            item.MemosState(COMSNamespace.MyResidents.LoadingState.LOADING);
            var searchModel = {
                Idx: item.Idx(),
                ResidentIdx: item.ResidentIdx(),
                AdmissionTypeIdx: item.AdmissionTypeIdx()
            }

            $.ajax({
                type: 'POST',
                contentType: "application/json;",
                url: '/resident/myresidents/memocount',
                data: ko.toJSON(searchModel),
                success: function (count) {
                    item.MemosState(COMSNamespace.MyResidents.LoadingState.LOADED);
                    item.MemoCount(count);
                },
                error: function () {
                    item.MemosState(COMSNamespace.MyResidents.LoadingState.LOADED);
                }
            });
        }
    }

    self.ActivateQR = function (resident) {
        self.AdmissionToViewOnLoad(resident.Idx());
        COMSTitleBarVM.QuickReviewActivated(true);
        return false;
    }

    self.LoadExpandedData = function (item) {
        if (item.ExpandedState() == COMSNamespace.MyResidents.LoadingState.NOTLOADED) {
            item.ExpandedState(COMSNamespace.MyResidents.LoadingState.LOADING);

            var searchModel = {
                Idx: item.Idx(),
                ResidentIdx: item.ResidentIdx(),
                AdmissionTypeIdx: item.AdmissionTypeIdx()
            }

            $.ajax({
                type: 'POST',
                contentType: "application/json;",
                url: '/resident/myresidents/expandeddata',
                data: ko.toJSON(searchModel),
                success: function (data) {
                    item.ExpandedState(COMSNamespace.MyResidents.LoadingState.LOADED);
                    var x = ko.mapping.fromJS(data.Memos);
                    item.Memos(x());
                    x = ko.mapping.fromJS(data.Vitals);
                    item.Vitals(x());
                    item.Conditions = data.Conditions;
                },
                error: function () {
                    item.ExpandedState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                }
            });
        }
    }

    self.LoadTasks = function (item) {
        if (item.TasksState() == COMSNamespace.MyResidents.LoadingState.NOTLOADED) {
            item.TasksState(COMSNamespace.MyResidents.LoadingState.LOADING);
            var searchModel = {
                Idx: item.Idx(),
                ResidentIdx: item.ResidentIdx(),
                AdmissionTypeIdx: item.AdmissionTypeIdx()
            }

            $.ajax({
                type: 'POST',
                contentType: "application/json;",
                url: '/resident/myresidents/scheduledtasks',
                data: ko.toJSON(searchModel),
                success: function (tasks) {
                    item.TasksState(COMSNamespace.MyResidents.LoadingState.LOADED);
                    item.AdditionalTasks.removeAll();
                    item.TasksDueCount(tasks.length);
                    item.CurrentTaskDue.TaskDueName('');
                    item.CurrentTaskDue.TaskDueStatus('');
                    item.CurrentTaskDue.Idx('');
                    var x = ko.mapping.fromJS(tasks);
                    if (x().length > 0) {
                        currenTask = x()[0];
                        item.CurrentTaskDue.TaskDueName(currenTask.TaskDueName());
                        item.CurrentTaskDue.TaskDueStatus(currenTask.TaskDueStatus());
                        item.CurrentTaskDue.Idx(currenTask.Idx());
                        if (x().length > 1) {
                            var tempArray = [];
                            for (var i = 1; i < x().length; i++) {
                                tempArray.push(x()[i]);
                            }
                            item.AdditionalTasks(tempArray);
                        }
                    }
                },
                error: function () {
                    item.TasksState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                }
            });
        }
    }

    self.LoadTasksAndMemoCount = function (item) {

        if (item == null || item.TasksState == null || item.TasksState == undefined || item.MemosState == null || item.MemosState == undefined)     // Card #946 - COMS I / O Flow Sheet
            return;

        if (item.TasksState() == COMSNamespace.MyResidents.LoadingState.NOTLOADED ||
            item.MemosState() == COMSNamespace.MyResidents.LoadingState.NOTLOADED) {
            item.MemosState(COMSNamespace.MyResidents.LoadingState.LOADING);
            item.TasksState(COMSNamespace.MyResidents.LoadingState.LOADING);
            var searchModel = {
                Idx: item.Idx(),
                ResidentIdx: item.ResidentIdx(),
                AdmissionTypeIdx: item.AdmissionTypeIdx()
            }

            $.ajax({
                type: 'POST',
                contentType: "application/json;",
                url: '/resident/myresidents/ScheduledTasksAndMemoCount',
                data: ko.toJSON(searchModel),
                success: function (data) {
                    item.MemosState(COMSNamespace.MyResidents.LoadingState.LOADED);
                    item.MemoCount(data.MemoCount);

                    item.TasksState(COMSNamespace.MyResidents.LoadingState.LOADED);
                    item.AdditionalTasks.removeAll();
                    item.TasksDueCount(data.Tasks.length);
                    item.CurrentTaskDue.TaskDueName('');
                    item.CurrentTaskDue.TaskDueStatus('');
                    item.CurrentTaskDue.Idx('');
                    var x = ko.mapping.fromJS(data.Tasks);
                    if (x().length > 0) {
                        currenTask = x()[0];
                        item.CurrentTaskDue.TaskDueName(currenTask.TaskDueName());
                        item.CurrentTaskDue.TaskDueStatus(currenTask.TaskDueStatus());
                        item.CurrentTaskDue.Idx(currenTask.Idx());
                        if (x().length > 1) {
                            var tempArray = [];
                            for (var i = 1; i < x().length; i++) {
                                tempArray.push(x()[i]);
                            }
                            item.AdditionalTasks(tempArray);
                        }
                    }
                },
                error: function () {
                    item.MemosState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                    item.TasksState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                }
            });
        }
    }

    self.DrawConditionsGraph = function (resident) {
        var jsonData = " { 'admissionIdx' : '" + resident.Idx() + "' } ";

        $.ajax({
            type: 'POST',
            url: '/Resident/Profile/ResidentConditionsQuickView',
            data: jsonData,
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var graphData = [];

                ko.utils.arrayForEach(response, function (j) {
                    var e = new EvalsVM(j);

                    graphData.push(e);
                });

                var ctx = document.getElementById("canvasConditions_" + resident.Idx());

                new GenerateAbnormalChart(ctx, graphData);

            },
            error: function (x, s, e) {
            }

        });
    }

    self.PerformTaskAction = function (task, admission) {
        if (self.operationInProgress()) {
            return;
        }

        self.operationInProgress(true);
        ShowProgressDisplay("Loading...");
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/taskurl/' + task.Idx(),
            data: "{}",
            success: function (url) {
                self.operationInProgress(false);
                if (url) {
                    self.SelectAdmission(admission, function () { document.location.href = url; });
                }
                else {
                    HideProgressDisplay();
                    $('#divMyResidentsMessageText').text("The assessment associated with this task has been closed.");
                    $('#divMyResidentsMessage').modal("show");
                    admission.TasksState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
                    self.LoadTasks(admission);
                }
            }
        });
    }

    self.ShowAlerts = function (item) {
        self.AlertsList.removeAll();
        $('#divAlertsName').text(item.FullName());
        $('#divMyResidentsAlerts').modal("show");
        var searchModel = {
            Idx: item.Idx(),
            ResidentIdx: item.ResidentIdx(),
            AdmissionTypeIdx: item.AdmissionTypeIdx()
        }

        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/alerts',
            data: ko.toJSON(searchModel),
            success: function (alerts) {
                var x = ko.mapping.fromJS(alerts);
                self.AlertsList(x());
            },
            error: function () {
                $('#divAlertsMsg').text('Unable to load alerts.');
            }
        });
    }

    self.SelectAdmission = function (admission, callback) {
        if (self.operationInProgress()) {
            return;
        }

        ShowProgressDisplay("Loading...");
        var searchModel = {
            Idx: admission.Idx(),
            ResidentIdx: admission.ResidentIdx(),
            AdmissionTypeIdx: admission.AdmissionTypeIdx()
        }

        self.operationInProgress(true);
        $.ajax({
            type: 'POST',
            contentType: "application/json;",
            url: '/resident/myresidents/selectadmission',
            data: ko.toJSON(searchModel),
            success: function (msg) {
                if (callback) {
                    self.operationInProgress(false);
                    callback();
                }
                else {
                    document.location.href = "../residents/residentprofile.aspx";
                }
            }
        });

        return false;
    }

    self.AddEvaluation = function (resident) {
        self.SelectAdmission(resident, function () { document.location.href = "../residents/assessmentselection.aspx"; });
    }

    // Start - Card #946 - COMS I/O Flowsheet
    self.StartIOFlowsheet = function (resident) {
        self.SelectAdmission(resident, function () { document.location.href = "../residents/assessmentselection.aspx"; });
    }
    // End - Card #946 - COMS I/O Flowsheet

    self.AddMemo = function (resident) {
        var win = radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/MemoEdit.aspx&Mode=A&NoRefresh=1&AIX=' + resident.Idx(), 'winGeneric');
        win.ClientCallBackFunction = function () {
            resident.MemosState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
            resident.ExpandedState(COMSNamespace.MyResidents.LoadingState.NOTLOADED);
            self.LoadMemos(resident);
            self.LoadActiveTab(resident);
        };
    }

    self.AddHomeCare = function (resident) {

        var HCNoteId = '23';
        radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&NoteType=' + HCNoteId + '&AIX=' + resident.Idx(), 'winGeneric');

        return false;
    }

    self.AddNote = function (resident) {
        radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&AIX=' + resident.Idx(), 'winGeneric');
    }

    self.AddPhysNote = function (resident) {
        radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&NoteType=17&AIX=' + resident.Idx(), 'winGeneric');
    }

    self.AddSBARNote = function (resident) {
        radOpenResponsive('../profile/ResSelectInset.aspx?NP=Residents/NoteEdit.aspx&Mode=A&NoRefresh=1&AIX=' + resident.Idx() + '&NoteType=31', 'winGeneric');
    }

    self.NavigateToSBAR = function (resident) {
        self.SelectAdmission(resident, function () {
            document.location.href = "../asmt/asmtinteractlanding.aspx?type=SBAR";
        });
    }

    self.NavigateToAsmt = function (resident) {
        self.SelectAdmission(resident, function () { document.location.href = "../Residents/AssessmentSelection.aspx"; });
    }

    self.NavigateToChart = function (resident) {
        self.SelectAdmission(resident, function () { document.location.href = "../reporting/chartreport.aspx"; });
    }

    self.NavigateToProtocols = function (resident) {
        self.SelectAdmission(resident, function () { document.location.href = "../Residents/TaskProtocols.aspx"; });
    }

    self.NavigateToMeds = function (resident) {
        self.SelectAdmission(resident, function () {
            HideProgressDisplay();
            radOpenResponsive('../Residents/MedicationsWarningList.aspx', 'winGeneric');
        });
    }

    self.NavigateToComprensiveNotification = function () {
        $('#divMyResidentsMessageText').text("This option is available within the COMS premium package. Please contact your AHT sales rep for more information.");
        $('#divMyResidentsMessage').modal("show");
    }

    self.TotalResidents = ko.observable(0);
    self.Pages = ko.computed(function () {
        return Math.floor(self.TotalResidents() / 25) + 1;
    });
    self.CurrentPage = ko.observable(1);

    self.NextPage = function () {
        if (self.LoadingResidentPage != COMSNamespace.MyResidents.LoadingState.LOADING) {
            self.LoadingResidentPage = COMSNamespace.MyResidents.LoadingState.LOADING;
            if (self.CurrentPage() < self.Pages()) {
                self.CurrentPage(self.CurrentPage() + 1);
                self.Load();
            }
        }
    }

    self.ResetPaging = function () {
        self.CurrentPage(1);
    }
}
